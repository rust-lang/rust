Function name: if_let::joint_or_patterns
Raw bytes (373): 0x[01, 01, 44, 01, 4b, 4f, 0d, 05, 09, 4f, 0d, 05, 09, 01, 1b, 05, 2d, 2d, 05, 01, 27, 47, 2d, 05, 0d, 01, 33, 4b, 31, 4f, 0d, 05, 09, 31, 09, 01, 47, 05, 0d, 4f, 0d, 05, 09, 01, 87, 02, 8b, 02, 1d, 8f, 02, 19, 11, 15, 8b, 02, 1d, 8f, 02, 19, 11, 15, 01, 73, 11, 21, 21, 11, 01, ef, 01, f3, 01, 21, 11, 19, 01, d3, 01, d7, 01, 29, db, 01, 21, f3, 01, 1d, 11, 19, 21, bf, 01, 15, 25, ce, 01, ba, 01, 01, d3, 01, d7, 01, 29, db, 01, 21, f3, 01, 1d, 11, 19, 21, bf, 01, 15, 25, c7, 01, 15, cb, 01, 25, 29, 1d, 01, d3, 01, d7, 01, 29, db, 01, 21, f3, 01, 1d, 11, 19, 29, 25, 1d, 15, 01, ef, 01, f3, 01, 21, 11, 19, 01, 87, 02, 8b, 02, 1d, 8f, 02, 19, 11, 15, 8b, 02, 1d, 8f, 02, 19, 11, 15, 1a, 01, 26, 01, 00, 27, 28, 08, 05, 01, 0c, 00, 40, 20, 02, 4b, 00, 0c, 00, 40, 30, 16, 1f, 01, 02, 03, 00, 0d, 00, 1c, 30, 22, 0d, 02, 04, 00, 00, 14, 00, 1b, 30, 2d, 05, 03, 04, 00, 00, 1f, 00, 28, 30, 2e, 3f, 04, 00, 05, 00, 2a, 00, 33, 30, 31, 09, 05, 00, 00, 00, 36, 00, 3f, 42, 00, 43, 00, 46, 02, 00, 47, 02, 06, 4b, 02, 05, 00, 06, 28, 10, 05, 03, 0c, 00, 40, 20, f6, 01, 87, 02, 00, 0c, 00, 40, 30, 6e, 77, 01, 02, 03, 00, 0d, 00, 1c, 30, ea, 01, 19, 02, 04, 00, 00, 14, 00, 1b, ce, 01, 00, 19, 00, 1a, 30, 21, 11, 03, 04, 00, 00, 1f, 00, 28, ba, 01, 00, 26, 00, 27, 30, a3, 01, c3, 01, 04, 00, 05, 00, 2a, 00, 33, ce, 01, 00, 31, 00, 32, 30, e3, 01, e7, 01, 05, 00, 00, 00, 36, 00, 3f, 29, 00, 3d, 00, 3e, ea, 01, 00, 43, 00, 46, f6, 01, 00, 47, 02, 06, 87, 02, 02, 05, 00, 06, 01, 01, 01, 00, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 68
- expression 0 operands: lhs = Counter(0), rhs = Expression(18, Add)
- expression 1 operands: lhs = Expression(19, Add), rhs = Counter(3)
- expression 2 operands: lhs = Counter(1), rhs = Counter(2)
- expression 3 operands: lhs = Expression(19, Add), rhs = Counter(3)
- expression 4 operands: lhs = Counter(1), rhs = Counter(2)
- expression 5 operands: lhs = Counter(0), rhs = Expression(6, Add)
- expression 6 operands: lhs = Counter(1), rhs = Counter(11)
- expression 7 operands: lhs = Counter(11), rhs = Counter(1)
- expression 8 operands: lhs = Counter(0), rhs = Expression(9, Add)
- expression 9 operands: lhs = Expression(17, Add), rhs = Counter(11)
- expression 10 operands: lhs = Counter(1), rhs = Counter(3)
- expression 11 operands: lhs = Counter(0), rhs = Expression(12, Add)
- expression 12 operands: lhs = Expression(18, Add), rhs = Counter(12)
- expression 13 operands: lhs = Expression(19, Add), rhs = Counter(3)
- expression 14 operands: lhs = Counter(1), rhs = Counter(2)
- expression 15 operands: lhs = Counter(12), rhs = Counter(2)
- expression 16 operands: lhs = Counter(0), rhs = Expression(17, Add)
- expression 17 operands: lhs = Counter(1), rhs = Counter(3)
- expression 18 operands: lhs = Expression(19, Add), rhs = Counter(3)
- expression 19 operands: lhs = Counter(1), rhs = Counter(2)
- expression 20 operands: lhs = Counter(0), rhs = Expression(65, Add)
- expression 21 operands: lhs = Expression(66, Add), rhs = Counter(7)
- expression 22 operands: lhs = Expression(67, Add), rhs = Counter(6)
- expression 23 operands: lhs = Counter(4), rhs = Counter(5)
- expression 24 operands: lhs = Expression(66, Add), rhs = Counter(7)
- expression 25 operands: lhs = Expression(67, Add), rhs = Counter(6)
- expression 26 operands: lhs = Counter(4), rhs = Counter(5)
- expression 27 operands: lhs = Counter(0), rhs = Expression(28, Add)
- expression 28 operands: lhs = Counter(4), rhs = Counter(8)
- expression 29 operands: lhs = Counter(8), rhs = Counter(4)
- expression 30 operands: lhs = Counter(0), rhs = Expression(59, Add)
- expression 31 operands: lhs = Expression(60, Add), rhs = Counter(8)
- expression 32 operands: lhs = Counter(4), rhs = Counter(6)
- expression 33 operands: lhs = Counter(0), rhs = Expression(52, Add)
- expression 34 operands: lhs = Expression(53, Add), rhs = Counter(10)
- expression 35 operands: lhs = Expression(54, Add), rhs = Counter(8)
- expression 36 operands: lhs = Expression(60, Add), rhs = Counter(7)
- expression 37 operands: lhs = Counter(4), rhs = Counter(6)
- expression 38 operands: lhs = Counter(8), rhs = Expression(47, Add)
- expression 39 operands: lhs = Counter(5), rhs = Counter(9)
- expression 40 operands: lhs = Expression(51, Sub), rhs = Expression(46, Sub)
- expression 41 operands: lhs = Counter(0), rhs = Expression(52, Add)
- expression 42 operands: lhs = Expression(53, Add), rhs = Counter(10)
- expression 43 operands: lhs = Expression(54, Add), rhs = Counter(8)
- expression 44 operands: lhs = Expression(60, Add), rhs = Counter(7)
- expression 45 operands: lhs = Counter(4), rhs = Counter(6)
- expression 46 operands: lhs = Counter(8), rhs = Expression(47, Add)
- expression 47 operands: lhs = Counter(5), rhs = Counter(9)
- expression 48 operands: lhs = Expression(49, Add), rhs = Counter(5)
- expression 49 operands: lhs = Expression(50, Add), rhs = Counter(9)
- expression 50 operands: lhs = Counter(10), rhs = Counter(7)
- expression 51 operands: lhs = Counter(0), rhs = Expression(52, Add)
- expression 52 operands: lhs = Expression(53, Add), rhs = Counter(10)
- expression 53 operands: lhs = Expression(54, Add), rhs = Counter(8)
- expression 54 operands: lhs = Expression(60, Add), rhs = Counter(7)
- expression 55 operands: lhs = Counter(4), rhs = Counter(6)
- expression 56 operands: lhs = Counter(10), rhs = Counter(9)
- expression 57 operands: lhs = Counter(7), rhs = Counter(5)
- expression 58 operands: lhs = Counter(0), rhs = Expression(59, Add)
- expression 59 operands: lhs = Expression(60, Add), rhs = Counter(8)
- expression 60 operands: lhs = Counter(4), rhs = Counter(6)
- expression 61 operands: lhs = Counter(0), rhs = Expression(65, Add)
- expression 62 operands: lhs = Expression(66, Add), rhs = Counter(7)
- expression 63 operands: lhs = Expression(67, Add), rhs = Counter(6)
- expression 64 operands: lhs = Counter(4), rhs = Counter(5)
- expression 65 operands: lhs = Expression(66, Add), rhs = Counter(7)
- expression 66 operands: lhs = Expression(67, Add), rhs = Counter(6)
- expression 67 operands: lhs = Counter(4), rhs = Counter(5)
Number of file 0 mappings: 26
- Code(Counter(0)) at (prev + 38, 1) to (start + 0, 39)
- MCDCDecision { bitmap_idx: 8, conditions_num: 5 } at (prev + 1, 12) to (start + 0, 64)
- Branch { true: Expression(0, Sub), false: Expression(18, Add) } at (prev + 0, 12) to (start + 0, 64)
    true  = (c0 - ((c1 + c2) + c3))
    false = ((c1 + c2) + c3)
- MCDCBranch { true: Expression(5, Sub), false: Expression(7, Add), condition_id: 1, true_next_id: 2, false_next_id: 3 } at (prev + 0, 13) to (start + 0, 28)
    true  = (c0 - (c1 + c11))
    false = (c11 + c1)
- MCDCBranch { true: Expression(8, Sub), false: Counter(3), condition_id: 2, true_next_id: 4, false_next_id: 0 } at (prev + 0, 20) to (start + 0, 27)
    true  = (c0 - ((c1 + c3) + c11))
    false = c3
- MCDCBranch { true: Counter(11), false: Counter(1), condition_id: 3, true_next_id: 4, false_next_id: 0 } at (prev + 0, 31) to (start + 0, 40)
    true  = c11
    false = c1
- MCDCBranch { true: Expression(11, Sub), false: Expression(15, Add), condition_id: 4, true_next_id: 0, false_next_id: 5 } at (prev + 0, 42) to (start + 0, 51)
    true  = (c0 - (((c1 + c2) + c3) + c12))
    false = (c12 + c2)
- MCDCBranch { true: Counter(12), false: Counter(2), condition_id: 5, true_next_id: 0, false_next_id: 0 } at (prev + 0, 54) to (start + 0, 63)
    true  = c12
    false = c2
- Code(Expression(16, Sub)) at (prev + 0, 67) to (start + 0, 70)
    = (c0 - (c1 + c3))
- Code(Expression(0, Sub)) at (prev + 0, 71) to (start + 2, 6)
    = (c0 - ((c1 + c2) + c3))
- Code(Expression(18, Add)) at (prev + 2, 5) to (start + 0, 6)
    = ((c1 + c2) + c3)
- MCDCDecision { bitmap_idx: 16, conditions_num: 5 } at (prev + 3, 12) to (start + 0, 64)
- Branch { true: Expression(61, Sub), false: Expression(65, Add) } at (prev + 0, 12) to (start + 0, 64)
    true  = (c0 - (((c4 + c5) + c6) + c7))
    false = (((c4 + c5) + c6) + c7)
- MCDCBranch { true: Expression(27, Sub), false: Expression(29, Add), condition_id: 1, true_next_id: 2, false_next_id: 3 } at (prev + 0, 13) to (start + 0, 28)
    true  = (c0 - (c4 + c8))
    false = (c8 + c4)
- MCDCBranch { true: Expression(58, Sub), false: Counter(6), condition_id: 2, true_next_id: 4, false_next_id: 0 } at (prev + 0, 20) to (start + 0, 27)
    true  = (c0 - ((c4 + c6) + c8))
    false = c6
- Code(Expression(51, Sub)) at (prev + 0, 25) to (start + 0, 26)
    = (c0 - ((((c4 + c6) + c7) + c8) + c10))
- MCDCBranch { true: Counter(8), false: Counter(4), condition_id: 3, true_next_id: 4, false_next_id: 0 } at (prev + 0, 31) to (start + 0, 40)
    true  = c8
    false = c4
- Code(Expression(46, Sub)) at (prev + 0, 38) to (start + 0, 39)
    = (c8 - (c5 + c9))
- MCDCBranch { true: Expression(40, Add), false: Expression(48, Add), condition_id: 4, true_next_id: 0, false_next_id: 5 } at (prev + 0, 42) to (start + 0, 51)
    true  = ((c0 - ((((c4 + c6) + c7) + c8) + c10)) + (c8 - (c5 + c9)))
    false = (((c10 + c7) + c9) + c5)
- Code(Expression(51, Sub)) at (prev + 0, 49) to (start + 0, 50)
    = (c0 - ((((c4 + c6) + c7) + c8) + c10))
- MCDCBranch { true: Expression(56, Add), false: Expression(57, Add), condition_id: 5, true_next_id: 0, false_next_id: 0 } at (prev + 0, 54) to (start + 0, 63)
    true  = (c10 + c9)
    false = (c7 + c5)
- Code(Counter(10)) at (prev + 0, 61) to (start + 0, 62)
- Code(Expression(58, Sub)) at (prev + 0, 67) to (start + 0, 70)
    = (c0 - ((c4 + c6) + c8))
- Code(Expression(61, Sub)) at (prev + 0, 71) to (start + 2, 6)
    = (c0 - (((c4 + c5) + c6) + c7))
- Code(Expression(65, Add)) at (prev + 2, 5) to (start + 0, 6)
    = (((c4 + c5) + c6) + c7)
- Code(Counter(0)) at (prev + 1, 1) to (start + 0, 2)
Highest counter ID seen: c12

Function name: if_let::joint_pattern_with_or
Raw bytes (121): 0x[01, 01, 13, 01, 47, 4b, 0d, 05, 09, 4b, 0d, 05, 09, 01, 3f, 4b, 11, 05, 09, 11, 09, 01, 2b, 47, 11, 4b, 0d, 05, 09, 01, 05, 01, 3f, 4b, 11, 05, 09, 4b, 0d, 05, 09, 0b, 01, 20, 01, 00, 2b, 28, 05, 04, 01, 0c, 00, 34, 20, 02, 47, 00, 0c, 00, 34, 30, 3a, 23, 02, 03, 04, 00, 0d, 00, 1c, 30, 26, 0d, 03, 00, 00, 00, 14, 00, 1b, 30, 11, 09, 04, 00, 00, 00, 1f, 00, 28, 30, 36, 05, 01, 02, 00, 00, 2a, 00, 33, 3a, 00, 37, 00, 3a, 02, 00, 3b, 02, 06, 47, 02, 05, 00, 06, 01, 01, 01, 00, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 19
- expression 0 operands: lhs = Counter(0), rhs = Expression(17, Add)
- expression 1 operands: lhs = Expression(18, Add), rhs = Counter(3)
- expression 2 operands: lhs = Counter(1), rhs = Counter(2)
- expression 3 operands: lhs = Expression(18, Add), rhs = Counter(3)
- expression 4 operands: lhs = Counter(1), rhs = Counter(2)
- expression 5 operands: lhs = Counter(0), rhs = Expression(15, Add)
- expression 6 operands: lhs = Expression(18, Add), rhs = Counter(4)
- expression 7 operands: lhs = Counter(1), rhs = Counter(2)
- expression 8 operands: lhs = Counter(4), rhs = Counter(2)
- expression 9 operands: lhs = Counter(0), rhs = Expression(10, Add)
- expression 10 operands: lhs = Expression(17, Add), rhs = Counter(4)
- expression 11 operands: lhs = Expression(18, Add), rhs = Counter(3)
- expression 12 operands: lhs = Counter(1), rhs = Counter(2)
- expression 13 operands: lhs = Counter(0), rhs = Counter(1)
- expression 14 operands: lhs = Counter(0), rhs = Expression(15, Add)
- expression 15 operands: lhs = Expression(18, Add), rhs = Counter(4)
- expression 16 operands: lhs = Counter(1), rhs = Counter(2)
- expression 17 operands: lhs = Expression(18, Add), rhs = Counter(3)
- expression 18 operands: lhs = Counter(1), rhs = Counter(2)
Number of file 0 mappings: 11
- Code(Counter(0)) at (prev + 32, 1) to (start + 0, 43)
- MCDCDecision { bitmap_idx: 5, conditions_num: 4 } at (prev + 1, 12) to (start + 0, 52)
- Branch { true: Expression(0, Sub), false: Expression(17, Add) } at (prev + 0, 12) to (start + 0, 52)
    true  = (c0 - ((c1 + c2) + c3))
    false = ((c1 + c2) + c3)
- MCDCBranch { true: Expression(14, Sub), false: Expression(8, Add), condition_id: 2, true_next_id: 3, false_next_id: 4 } at (prev + 0, 13) to (start + 0, 28)
    true  = (c0 - ((c1 + c2) + c4))
    false = (c4 + c2)
- MCDCBranch { true: Expression(9, Sub), false: Counter(3), condition_id: 3, true_next_id: 0, false_next_id: 0 } at (prev + 0, 20) to (start + 0, 27)
    true  = (c0 - (((c1 + c2) + c3) + c4))
    false = c3
- MCDCBranch { true: Counter(4), false: Counter(2), condition_id: 4, true_next_id: 0, false_next_id: 0 } at (prev + 0, 31) to (start + 0, 40)
    true  = c4
    false = c2
- MCDCBranch { true: Expression(13, Sub), false: Counter(1), condition_id: 1, true_next_id: 2, false_next_id: 0 } at (prev + 0, 42) to (start + 0, 51)
    true  = (c0 - c1)
    false = c1
- Code(Expression(14, Sub)) at (prev + 0, 55) to (start + 0, 58)
    = (c0 - ((c1 + c2) + c4))
- Code(Expression(0, Sub)) at (prev + 0, 59) to (start + 2, 6)
    = (c0 - ((c1 + c2) + c3))
- Code(Expression(17, Add)) at (prev + 2, 5) to (start + 0, 6)
    = ((c1 + c2) + c3)
- Code(Counter(0)) at (prev + 1, 1) to (start + 0, 2)
Highest counter ID seen: c4

Function name: if_let::let_else
Raw bytes (75): 0x[01, 01, 06, 01, 17, 05, 09, 05, 09, 01, 05, 01, 05, 05, 09, 09, 01, 31, 01, 00, 19, 28, 03, 02, 01, 09, 00, 18, 20, 02, 17, 00, 09, 00, 18, 30, 12, 05, 01, 02, 00, 00, 09, 00, 18, 30, 02, 09, 02, 00, 00, 00, 10, 00, 17, 12, 00, 1b, 00, 20, 17, 00, 28, 00, 2e, 02, 01, 05, 00, 13, 01, 01, 01, 00, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 6
- expression 0 operands: lhs = Counter(0), rhs = Expression(5, Add)
- expression 1 operands: lhs = Counter(1), rhs = Counter(2)
- expression 2 operands: lhs = Counter(1), rhs = Counter(2)
- expression 3 operands: lhs = Counter(0), rhs = Counter(1)
- expression 4 operands: lhs = Counter(0), rhs = Counter(1)
- expression 5 operands: lhs = Counter(1), rhs = Counter(2)
Number of file 0 mappings: 9
- Code(Counter(0)) at (prev + 49, 1) to (start + 0, 25)
- MCDCDecision { bitmap_idx: 3, conditions_num: 2 } at (prev + 1, 9) to (start + 0, 24)
- Branch { true: Expression(0, Sub), false: Expression(5, Add) } at (prev + 0, 9) to (start + 0, 24)
    true  = (c0 - (c1 + c2))
    false = (c1 + c2)
- MCDCBranch { true: Expression(4, Sub), false: Counter(1), condition_id: 1, true_next_id: 2, false_next_id: 0 } at (prev + 0, 9) to (start + 0, 24)
    true  = (c0 - c1)
    false = c1
- MCDCBranch { true: Expression(0, Sub), false: Counter(2), condition_id: 2, true_next_id: 0, false_next_id: 0 } at (prev + 0, 16) to (start + 0, 23)
    true  = (c0 - (c1 + c2))
    false = c2
- Code(Expression(4, Sub)) at (prev + 0, 27) to (start + 0, 32)
    = (c0 - c1)
- Code(Expression(5, Add)) at (prev + 0, 40) to (start + 0, 46)
    = (c1 + c2)
- Code(Expression(0, Sub)) at (prev + 1, 5) to (start + 0, 19)
    = (c0 - (c1 + c2))
- Code(Counter(0)) at (prev + 1, 1) to (start + 0, 2)
Highest counter ID seen: c2

Function name: if_let::simple_joint_pattern
Raw bytes (97): 0x[01, 01, 0c, 01, 2b, 2f, 0d, 05, 09, 2f, 0d, 05, 09, 01, 05, 01, 2f, 05, 09, 01, 2f, 05, 09, 2f, 0d, 05, 09, 0a, 01, 1a, 01, 00, 2a, 28, 04, 03, 01, 0c, 00, 28, 20, 02, 2b, 00, 0c, 00, 28, 30, 16, 05, 01, 02, 00, 00, 0d, 00, 1c, 30, 02, 0d, 03, 00, 00, 00, 14, 00, 1b, 30, 22, 09, 02, 03, 00, 00, 1e, 00, 27, 22, 00, 2b, 00, 2e, 02, 00, 2f, 02, 06, 2b, 02, 05, 00, 06, 01, 01, 01, 00, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 12
- expression 0 operands: lhs = Counter(0), rhs = Expression(10, Add)
- expression 1 operands: lhs = Expression(11, Add), rhs = Counter(3)
- expression 2 operands: lhs = Counter(1), rhs = Counter(2)
- expression 3 operands: lhs = Expression(11, Add), rhs = Counter(3)
- expression 4 operands: lhs = Counter(1), rhs = Counter(2)
- expression 5 operands: lhs = Counter(0), rhs = Counter(1)
- expression 6 operands: lhs = Counter(0), rhs = Expression(11, Add)
- expression 7 operands: lhs = Counter(1), rhs = Counter(2)
- expression 8 operands: lhs = Counter(0), rhs = Expression(11, Add)
- expression 9 operands: lhs = Counter(1), rhs = Counter(2)
- expression 10 operands: lhs = Expression(11, Add), rhs = Counter(3)
- expression 11 operands: lhs = Counter(1), rhs = Counter(2)
Number of file 0 mappings: 10
- Code(Counter(0)) at (prev + 26, 1) to (start + 0, 42)
- MCDCDecision { bitmap_idx: 4, conditions_num: 3 } at (prev + 1, 12) to (start + 0, 40)
- Branch { true: Expression(0, Sub), false: Expression(10, Add) } at (prev + 0, 12) to (start + 0, 40)
    true  = (c0 - ((c1 + c2) + c3))
    false = ((c1 + c2) + c3)
- MCDCBranch { true: Expression(5, Sub), false: Counter(1), condition_id: 1, true_next_id: 2, false_next_id: 0 } at (prev + 0, 13) to (start + 0, 28)
    true  = (c0 - c1)
    false = c1
- MCDCBranch { true: Expression(0, Sub), false: Counter(3), condition_id: 3, true_next_id: 0, false_next_id: 0 } at (prev + 0, 20) to (start + 0, 27)
    true  = (c0 - ((c1 + c2) + c3))
    false = c3
- MCDCBranch { true: Expression(8, Sub), false: Counter(2), condition_id: 2, true_next_id: 3, false_next_id: 0 } at (prev + 0, 30) to (start + 0, 39)
    true  = (c0 - (c1 + c2))
    false = c2
- Code(Expression(8, Sub)) at (prev + 0, 43) to (start + 0, 46)
    = (c0 - (c1 + c2))
- Code(Expression(0, Sub)) at (prev + 0, 47) to (start + 2, 6)
    = (c0 - ((c1 + c2) + c3))
- Code(Expression(10, Add)) at (prev + 2, 5) to (start + 0, 6)
    = ((c1 + c2) + c3)
- Code(Counter(0)) at (prev + 1, 1) to (start + 0, 2)
Highest counter ID seen: c3

Function name: if_let::simple_or_pattern
Raw bytes (66): 0x[01, 01, 04, 01, 05, 01, 0b, 05, 09, 09, 05, 08, 01, 14, 01, 01, 27, 28, 03, 02, 01, 0c, 00, 21, 20, 02, 05, 00, 0c, 00, 21, 30, 06, 0f, 01, 00, 02, 00, 0c, 00, 15, 30, 09, 05, 02, 00, 00, 00, 18, 00, 21, 02, 00, 28, 02, 06, 05, 02, 05, 00, 06, 01, 01, 01, 00, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 4
- expression 0 operands: lhs = Counter(0), rhs = Counter(1)
- expression 1 operands: lhs = Counter(0), rhs = Expression(2, Add)
- expression 2 operands: lhs = Counter(1), rhs = Counter(2)
- expression 3 operands: lhs = Counter(2), rhs = Counter(1)
Number of file 0 mappings: 8
- Code(Counter(0)) at (prev + 20, 1) to (start + 1, 39)
- MCDCDecision { bitmap_idx: 3, conditions_num: 2 } at (prev + 1, 12) to (start + 0, 33)
- Branch { true: Expression(0, Sub), false: Counter(1) } at (prev + 0, 12) to (start + 0, 33)
    true  = (c0 - c1)
    false = c1
- MCDCBranch { true: Expression(1, Sub), false: Expression(3, Add), condition_id: 1, true_next_id: 0, false_next_id: 2 } at (prev + 0, 12) to (start + 0, 21)
    true  = (c0 - (c1 + c2))
    false = (c2 + c1)
- MCDCBranch { true: Counter(2), false: Counter(1), condition_id: 2, true_next_id: 0, false_next_id: 0 } at (prev + 0, 24) to (start + 0, 33)
    true  = c2
    false = c1
- Code(Expression(0, Sub)) at (prev + 0, 40) to (start + 2, 6)
    = (c0 - c1)
- Code(Counter(1)) at (prev + 2, 5) to (start + 0, 6)
- Code(Counter(0)) at (prev + 1, 1) to (start + 0, 2)
Highest counter ID seen: c2

Function name: if_let::single_nested_pattern
Raw bytes (75): 0x[01, 01, 06, 01, 17, 05, 09, 05, 09, 01, 05, 01, 05, 05, 09, 09, 01, 0e, 01, 00, 24, 28, 03, 02, 01, 0c, 00, 1b, 20, 02, 17, 00, 0c, 00, 1b, 30, 12, 05, 01, 02, 00, 00, 0c, 00, 1b, 30, 02, 09, 02, 00, 00, 00, 13, 00, 1a, 12, 00, 1e, 00, 21, 02, 00, 22, 02, 06, 17, 02, 05, 00, 06, 01, 01, 01, 00, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 6
- expression 0 operands: lhs = Counter(0), rhs = Expression(5, Add)
- expression 1 operands: lhs = Counter(1), rhs = Counter(2)
- expression 2 operands: lhs = Counter(1), rhs = Counter(2)
- expression 3 operands: lhs = Counter(0), rhs = Counter(1)
- expression 4 operands: lhs = Counter(0), rhs = Counter(1)
- expression 5 operands: lhs = Counter(1), rhs = Counter(2)
Number of file 0 mappings: 9
- Code(Counter(0)) at (prev + 14, 1) to (start + 0, 36)
- MCDCDecision { bitmap_idx: 3, conditions_num: 2 } at (prev + 1, 12) to (start + 0, 27)
- Branch { true: Expression(0, Sub), false: Expression(5, Add) } at (prev + 0, 12) to (start + 0, 27)
    true  = (c0 - (c1 + c2))
    false = (c1 + c2)
- MCDCBranch { true: Expression(4, Sub), false: Counter(1), condition_id: 1, true_next_id: 2, false_next_id: 0 } at (prev + 0, 12) to (start + 0, 27)
    true  = (c0 - c1)
    false = c1
- MCDCBranch { true: Expression(0, Sub), false: Counter(2), condition_id: 2, true_next_id: 0, false_next_id: 0 } at (prev + 0, 19) to (start + 0, 26)
    true  = (c0 - (c1 + c2))
    false = c2
- Code(Expression(4, Sub)) at (prev + 0, 30) to (start + 0, 33)
    = (c0 - c1)
- Code(Expression(0, Sub)) at (prev + 0, 34) to (start + 2, 6)
    = (c0 - (c1 + c2))
- Code(Expression(5, Add)) at (prev + 2, 5) to (start + 0, 6)
    = (c1 + c2)
- Code(Counter(0)) at (prev + 1, 1) to (start + 0, 2)
Highest counter ID seen: c2

