Function name: if_let::if_let
Raw bytes (43): 0x[01, 01, 01, 05, 09, 07, 01, 0c, 01, 01, 10, 20, 02, 09, 03, 0c, 00, 13, 02, 00, 11, 00, 12, 05, 00, 16, 00, 1b, 02, 00, 1c, 02, 06, 09, 02, 0c, 02, 06, 05, 03, 05, 01, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 1
- expression 0 operands: lhs = Counter(1), rhs = Counter(2)
Number of file 0 mappings: 7
- Code(Counter(0)) at (prev + 12, 1) to (start + 1, 16)
- Branch { true: Expression(0, Sub), false: Counter(2) } at (prev + 3, 12) to (start + 0, 19)
    true  = (c1 - c2)
    false = c2
- Code(Expression(0, Sub)) at (prev + 0, 17) to (start + 0, 18)
    = (c1 - c2)
- Code(Counter(1)) at (prev + 0, 22) to (start + 0, 27)
- Code(Expression(0, Sub)) at (prev + 0, 28) to (start + 2, 6)
    = (c1 - c2)
- Code(Counter(2)) at (prev + 2, 12) to (start + 2, 6)
- Code(Counter(1)) at (prev + 3, 5) to (start + 1, 2)
Highest counter ID seen: c2

Function name: if_let::if_let_chain
Raw bytes (74): 0x[01, 01, 08, 01, 05, 01, 1f, 05, 09, 01, 1f, 05, 09, 01, 1f, 05, 09, 05, 09, 0a, 01, 17, 01, 00, 33, 20, 02, 05, 01, 0c, 00, 13, 02, 00, 11, 00, 12, 01, 00, 16, 00, 17, 20, 16, 09, 01, 10, 00, 17, 16, 00, 15, 00, 16, 02, 00, 1a, 00, 1b, 16, 01, 05, 03, 06, 1f, 03, 0c, 02, 06, 01, 03, 05, 01, 02]
Number of files: 1
- file 0 => global file 1
Number of expressions: 8
- expression 0 operands: lhs = Counter(0), rhs = Counter(1)
- expression 1 operands: lhs = Counter(0), rhs = Expression(7, Add)
- expression 2 operands: lhs = Counter(1), rhs = Counter(2)
- expression 3 operands: lhs = Counter(0), rhs = Expression(7, Add)
- expression 4 operands: lhs = Counter(1), rhs = Counter(2)
- expression 5 operands: lhs = Counter(0), rhs = Expression(7, Add)
- expression 6 operands: lhs = Counter(1), rhs = Counter(2)
- expression 7 operands: lhs = Counter(1), rhs = Counter(2)
Number of file 0 mappings: 10
- Code(Counter(0)) at (prev + 23, 1) to (start + 0, 51)
- Branch { true: Expression(0, Sub), false: Counter(1) } at (prev + 1, 12) to (start + 0, 19)
    true  = (c0 - c1)
    false = c1
- Code(Expression(0, Sub)) at (prev + 0, 17) to (start + 0, 18)
    = (c0 - c1)
- Code(Counter(0)) at (prev + 0, 22) to (start + 0, 23)
- Branch { true: Expression(5, Sub), false: Counter(2) } at (prev + 1, 16) to (start + 0, 23)
    true  = (c0 - (c1 + c2))
    false = c2
- Code(Expression(5, Sub)) at (prev + 0, 21) to (start + 0, 22)
    = (c0 - (c1 + c2))
- Code(Expression(0, Sub)) at (prev + 0, 26) to (start + 0, 27)
    = (c0 - c1)
- Code(Expression(5, Sub)) at (prev + 1, 5) to (start + 3, 6)
    = (c0 - (c1 + c2))
- Code(Expression(7, Add)) at (prev + 3, 12) to (start + 2, 6)
    = (c1 + c2)
- Code(Counter(0)) at (prev + 3, 5) to (start + 1, 2)
Highest counter ID seen: c2

