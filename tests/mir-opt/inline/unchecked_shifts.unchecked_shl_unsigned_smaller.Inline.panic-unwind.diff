- // MIR for `unchecked_shl_unsigned_smaller` before Inline
+ // MIR for `unchecked_shl_unsigned_smaller` after Inline
  
  fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {
      debug a => _1;
      debug b => _2;
      let mut _0: u16;
      let mut _3: u16;
      let mut _4: u32;
+     scope 1 (inlined core::num::<impl u16>::unchecked_shl) {
+         let mut _5: bool;
+         let _6: ();
+         scope 2 (inlined core::ub_checks::check_language_ub) {
+             scope 3 (inlined core::ub_checks::check_language_ub::runtime) {
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_3);
          _3 = copy _1;
          StorageLive(_4);
          _4 = copy _2;
-         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> [return: bb1, unwind continue];
+         StorageLive(_6);
+         StorageLive(_5);
+         _5 = UbChecks();
+         switchInt(move _5) -> [0: bb2, otherwise: bb1];
      }
  
      bb1: {
+         _6 = core::num::<impl u16>::unchecked_shl::precondition_check(copy _4) -> [return: bb2, unwind unreachable];
+     }
+ 
+     bb2: {
+         StorageDead(_5);
+         _0 = ShlUnchecked(copy _3, copy _4);
+         StorageDead(_6);
          StorageDead(_4);
          StorageDead(_3);
          return;
      }
  }
  
