// MIR for `foo::{closure#0}::{closure#0}` after built

fn foo::{closure#0}::{closure#0}(_1: {async closure body@$DIR/async_closure_fake_read_for_by_move.rs:12:27: 15:6}, _2: ResumeTy) -> ()
yields ()
 {
    debug _task_context => _2;
    debug f => (*(_1.0: &Foo));
    let mut _0: ();
    let mut _3: &Foo;
    let mut _4: &&Foo;
    let mut _5: isize;
    let mut _6: bool;

    bb0: {
        _5 = discriminant((*(_1.0: &Foo)));
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const ();
        goto -> bb10;
    }

    bb2: {
        falseEdge -> [real: bb5, imaginary: bb1];
    }

    bb3: {
        goto -> bb1;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _3 = &fake shallow (*(_1.0: &Foo));
        _4 = &fake shallow (_1.0: &Foo);
        StorageLive(_6);
        _6 = const true;
        switchInt(move _6) -> [0: bb8, otherwise: bb7];
    }

    bb6: {
        falseEdge -> [real: bb3, imaginary: bb1];
    }

    bb7: {
        StorageDead(_6);
        FakeRead(ForMatchGuard, _3);
        FakeRead(ForMatchGuard, _4);
        _0 = const ();
        goto -> bb10;
    }

    bb8: {
        goto -> bb9;
    }

    bb9: {
        StorageDead(_6);
        goto -> bb6;
    }

    bb10: {
        drop(_1) -> [return: bb11, unwind: bb13, drop: bb12];
    }

    bb11: {
        return;
    }

    bb12: {
        coroutine_drop;
    }

    bb13 (cleanup): {
        resume;
    }
}
