- // MIR for `generic` before DataflowConstProp
+ // MIR for `generic` after DataflowConstProp
  
  fn generic() -> () {
      let mut _0: ();
      let _1: usize;
      scope 1 {
          debug gx => _1;
          let _2: usize;
          scope 2 {
              debug gy => _2;
              let _3: usize;
              scope 3 {
                  debug dx => _3;
                  let _4: usize;
                  scope 4 {
                      debug dy => _4;
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
          _1 = OffsetOf(Gamma<T>, [(0, 0)]);
          StorageLive(_2);
          _2 = OffsetOf(Gamma<T>, [(0, 1)]);
          StorageLive(_3);
-         _3 = OffsetOf(Delta<T>, [(0, 1)]);
+         _3 = const 0_usize;
          StorageLive(_4);
-         _4 = OffsetOf(Delta<T>, [(0, 2)]);
+         _4 = const 2_usize;
          _0 = const ();
          StorageDead(_4);
          StorageDead(_3);
          StorageDead(_2);
          StorageDead(_1);
          return;
      }
  }
  
