// MIR for `test` after ElaborateDrops

fn test() -> Option<Vec<u32>> {
    let mut _0: std::option::Option<std::vec::Vec<u32>>;
    let mut _1: std::vec::Vec<u32>;
    let mut _2: std::boxed::Box<std::mem::MaybeUninit<[u32; 1]>>;
    let mut _3: std::boxed::Box<std::mem::MaybeUninit<[u32; 1]>>;
    let mut _4: *mut std::boxed::Box<std::mem::MaybeUninit<[u32; 1]>>;
    let mut _5: *mut [u32; 1];
    let mut _6: u32;
    let mut _7: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>;
    let mut _8: std::option::Option<u32>;
    let mut _9: isize;
    let _10: std::option::Option<std::convert::Infallible>;
    let mut _11: !;
    let mut _12: std::option::Option<std::convert::Infallible>;
    let _13: u32;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = Box::<[u32; 1]>::new_uninit() -> [return: bb1, unwind: bb15];
    }

    bb1: {
        StorageLive(_4);
        _4 = &raw mut _3;
        _5 = boxed::box_uninit_as_mut_ptr::<[u32; 1]>(copy _4) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = Option::<u32>::None;
        _7 = <Option<u32> as Try>::branch(move _8) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        StorageDead(_8);
        PlaceMention(_7);
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb6, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = copy ((_7 as Continue).0: u32);
        _6 = copy _13;
        StorageDead(_13);
        (*_5) = [move _6];
        StorageDead(_6);
        _2 = move _3;
        StorageDead(_4);
        goto -> bb8;
    }

    bb6: {
        StorageLive(_10);
        _10 = copy ((_7 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_12);
        _12 = copy _10;
        _0 = <Option<Vec<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _12) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        drop(_3) -> [return: bb11, unwind: bb15];
    }

    bb8: {
        StorageDead(_3);
        _1 = box_uninit_array_into_vec_unsafe::<u32, 1>(move _2) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        StorageDead(_2);
        _0 = Option::<Vec<u32>>::Some(move _1);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_1);
        StorageDead(_7);
        goto -> bb12;
    }

    bb11: {
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        StorageDead(_7);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        goto -> bb15;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}
