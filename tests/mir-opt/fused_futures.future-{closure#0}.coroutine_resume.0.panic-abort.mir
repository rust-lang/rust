// MIR for `future::{closure#0}` 0 coroutine_resume
/* coroutine_layout = CoroutineLayout {
    field_tys: {},
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
    },
    storage_conflicts: BitMatrix(0x0) {},
} */

fn future::{closure#0}(_1: Pin<&mut {async fn body of future()}>, _2: &mut Context<'_>) -> Poll<u32> {
    debug _task_context => _2;
    let mut _0: std::task::Poll<u32>;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        _4 = discriminant((*(_1.0: &mut {async fn body of future()})));
        switchInt(move _4) -> [0: bb1, 1: bb4, otherwise: bb5];
    }

    bb1: {
        _3 = const 42_u32;
        goto -> bb3;
    }

    bb2: {
        _0 = Poll::<u32>::Ready(move _3);
        discriminant((*(_1.0: &mut {async fn body of future()}))) = 1;
        return;
    }

    bb3: {
        goto -> bb2;
    }

    bb4: {
        _0 = Poll::<u32>::Pending;
        return;
    }

    bb5: {
        unreachable;
    }
}
