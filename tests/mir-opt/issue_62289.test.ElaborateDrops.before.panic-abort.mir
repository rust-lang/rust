// MIR for `test` before ElaborateDrops

fn test() -> Option<Box<u32>> {
    let mut _0: std::option::Option<std::boxed::Box<u32>>;
    let _1: std::boxed::Box<std::mem::MaybeUninit<u32>>;
    let mut _2: std::boxed::Box<u32>;
    let mut _3: std::boxed::Box<std::mem::MaybeUninit<u32>>;
    let mut _4: *mut u32;
    let mut _5: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>;
    let mut _6: std::option::Option<u32>;
    let mut _7: isize;
    let mut _9: !;
    let mut _10: std::option::Option<std::convert::Infallible>;
    scope 1 {
        debug b => _1;
        let _8: std::option::Option<std::convert::Infallible>;
        let _11: u32;
        scope 2 {
            debug residual => _8;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _11;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Box::<u32>::new_uninit() -> [return: bb1, unwind: bb16];
    }

    bb1: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = move _1;
        StorageLive(_4);
        _4 = copy (_3.0: std::ptr::Unique<std::mem::MaybeUninit<u32>>) as *mut u32 (Transmute);
        StorageLive(_5);
        StorageLive(_6);
        _6 = Option::<u32>::None;
        _5 = <Option<u32> as Try>::branch(move _6) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        StorageDead(_6);
        PlaceMention(_5);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_11);
        _11 = copy ((_5 as Continue).0: u32);
        (*_4) = copy _11;
        StorageDead(_11);
        _2 = move _3 as std::boxed::Box<u32> (Transmute);
        StorageDead(_4);
        drop(_3) -> [return: bb7, unwind: bb13];
    }

    bb5: {
        StorageLive(_8);
        _8 = copy ((_5 as Break).0: std::option::Option<std::convert::Infallible>);
        StorageLive(_10);
        _10 = copy _8;
        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _10) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        drop(_3) -> [return: bb10, unwind: bb15];
    }

    bb7: {
        StorageDead(_3);
        _0 = Option::<Box<u32>>::Some(move _2);
        drop(_2) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        StorageDead(_2);
        drop(_1) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        StorageDead(_1);
        StorageDead(_5);
        goto -> bb12;
    }

    bb10: {
        StorageDead(_3);
        StorageDead(_2);
        drop(_1) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        StorageDead(_1);
        StorageDead(_5);
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }
}
