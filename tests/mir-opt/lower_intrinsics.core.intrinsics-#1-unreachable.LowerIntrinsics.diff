- // MIR for `std::intrinsics::unreachable` before LowerIntrinsics
+ // MIR for `std::intrinsics::unreachable` after LowerIntrinsics

  fn std::intrinsics::unreachable() -> ! {
      let mut _0: !;                       // return place in scope 0 at $SRC_DIR/core/src/intrinsics.rs:LL:COL

      bb0: {
-         _0 = std::intrinsics::unreachable() -> bb1; // scope 0 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
-                                          // mir::Constant
-                                          // + span: $SRC_DIR/core/src/intrinsics.rs:LL:COL
-                                          // + literal: Const { ty: unsafe extern "rust-intrinsic" fn() -> ! {std::intrinsics::unreachable}, val: Value(Scalar(<ZST>)) }
+         unreachable;                     // scope 0 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
      }

      bb1: {
          return;                          // scope 0 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
      }

      bb2 (cleanup): {
          resume;                          // scope 0 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
      }
  }