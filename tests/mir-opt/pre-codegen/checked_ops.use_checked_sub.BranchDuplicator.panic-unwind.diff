- // MIR for `use_checked_sub` before BranchDuplicator
+ // MIR for `use_checked_sub` after BranchDuplicator
  
  fn use_checked_sub(_1: u32, _2: u32) -> () {
      debug x => _1;
      debug rhs => _2;
      let mut _0: ();
      let mut _3: std::option::Option<u32>;
      let mut _4: u32;
      let mut _5: u32;
      let mut _6: isize;
      let _8: ();
      let mut _9: u32;
      scope 1 {
          debug delta => _7;
          let _7: u32;
          scope 2 (inlined core::num::<impl u32>::checked_sub) {
              let mut _10: bool;
              let mut _11: u32;
          }
      }
  
      bb0: {
          StorageLive(_3);
          StorageLive(_4);
          _4 = copy _1;
          StorageLive(_5);
          _5 = copy _2;
          StorageLive(_10);
          _10 = Lt(copy _4, copy _5);
          switchInt(move _10) -> [0: bb5, otherwise: bb4];
      }
  
      bb1: {
          StorageLive(_7);
          _7 = copy ((_3 as Some).0: u32);
          StorageLive(_9);
          _9 = copy _7;
          _8 = do_something(move _9) -> [return: bb2, unwind continue];
      }
  
      bb2: {
          StorageDead(_9);
          StorageDead(_7);
          goto -> bb3;
      }
  
      bb3: {
          StorageDead(_3);
          return;
      }
  
      bb4: {
          _3 = const Option::<u32>::None;
-         goto -> bb6;
+         StorageDead(_10);
+         StorageDead(_5);
+         StorageDead(_4);
+         _6 = discriminant(_3);
+         switchInt(move _6) -> [1: bb1, 0: bb3, otherwise: bb7];
      }
  
      bb5: {
          StorageLive(_11);
          _11 = SubUnchecked(copy _4, copy _5);
          _3 = Option::<u32>::Some(move _11);
          StorageDead(_11);
-         goto -> bb6;
-     }
- 
-     bb6: {
          StorageDead(_10);
          StorageDead(_5);
          StorageDead(_4);
          _6 = discriminant(_3);
          switchInt(move _6) -> [1: bb1, 0: bb3, otherwise: bb7];
+     }
+ 
+     bb6: {
+         unreachable;
      }
  
      bb7: {
          unreachable;
      }
  }
  
  ALLOC0 (size: 8, align: 4) {
      00 00 00 00 __ __ __ __                         │ ....░░░░
  }
  
