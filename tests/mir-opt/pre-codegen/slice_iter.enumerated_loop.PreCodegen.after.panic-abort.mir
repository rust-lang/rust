// MIR for `enumerated_loop` after PreCodegen

fn enumerated_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _10: std::slice::Iter<'_, T>;
    let mut _11: std::iter::Enumerate<std::slice::Iter<'_, T>>;
    let mut _12: std::iter::Enumerate<std::slice::Iter<'_, T>>;
    let mut _20: std::option::Option<(usize, &T)>;
    let mut _23: &impl Fn(usize, &T);
    let mut _24: (usize, &T);
    let _25: ();
    scope 1 {
        debug iter => _12;
        let _21: usize;
        let _22: &T;
        scope 2 {
            debug i => _21;
            debug x => _22;
        }
        scope 17 (inlined <Enumerate<std::slice::Iter<'_, T>> as Iterator>::next) {
            let mut _13: &mut std::slice::Iter<'_, T>;
            let mut _14: std::option::Option<&T>;
            let mut _18: (usize, bool);
            let mut _19: (usize, &T);
            scope 18 {
                let _17: usize;
                scope 23 {
                }
            }
            scope 19 {
                scope 20 {
                    scope 26 (inlined <Option<(usize, &T)> as FromResidual<Option<Infallible>>>::from_residual) {
                    }
                }
            }
            scope 21 {
                scope 22 {
                }
            }
            scope 24 (inlined <Option<&T> as Try>::branch) {
                let mut _15: isize;
                let _16: &T;
                scope 25 {
                }
            }
        }
    }
    scope 3 (inlined core::slice::<impl [T]>::iter) {
        scope 4 (inlined std::slice::Iter::<'_, T>::new) {
            let _3: usize;
            let mut _9: usize;
            scope 5 {
                let _6: std::ptr::NonNull<T>;
                scope 6 {
                    let _8: usize;
                    scope 7 {
                    }
                    scope 11 (inlined NonNull::<T>::add) {
                        let mut _7: *const T;
                        scope 12 (inlined NonNull::<T>::as_ptr) {
                        }
                    }
                    scope 13 (inlined core::slice::iter::addr_usize::<T>) {
                    }
                }
                scope 8 (inlined NonNull::<[T]>::from_ref) {
                    let mut _4: *const [T];
                }
                scope 9 (inlined NonNull::<[T]>::cast::<T>) {
                    let mut _5: *const T;
                    scope 10 (inlined NonNull::<[T]>::as_ptr) {
                    }
                }
            }
        }
    }
    scope 14 (inlined <std::slice::Iter<'_, T> as Iterator>::enumerate) {
        scope 15 (inlined Enumerate::<std::slice::Iter<'_, T>>::new) {
        }
    }
    scope 16 (inlined <Enumerate<std::slice::Iter<'_, T>> as IntoIterator>::into_iter) {
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_3);
        StorageLive(_6);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_7);
        _3 = PtrMetadata(copy _1);
        _4 = &raw const (*_1);
        _5 = copy _4 as *const T (PtrToPtr);
        _6 = NonNull::<T> { pointer: copy _5 };
        StorageLive(_8);
        switchInt(const <T as std::mem::SizedTypeProperties>::IS_ZST) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = Offset(copy _5, copy _3);
        _8 = copy _7 as usize (Transmute);
        goto -> bb3;
    }

    bb2: {
        _8 = copy _3;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_9);
        _9 = copy _8;
        _10 = std::slice::Iter::<'_, T> { ptr: copy _6, end_addr_or_len: move _9, _marker: const ZeroSized: PhantomData<&T> };
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_6);
        StorageDead(_3);
        _11 = Enumerate::<std::slice::Iter<'_, T>> { iter: copy _10, count: const 0_usize };
        StorageDead(_10);
        StorageLive(_12);
        _12 = copy _11;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_20);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_14);
        StorageLive(_13);
        _13 = &mut (_12.0: std::slice::Iter<'_, T>);
        _14 = <std::slice::Iter<'_, T> as Iterator>::next(move _13) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        StorageDead(_13);
        StorageLive(_15);
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb11];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_20);
        StorageDead(_12);
        drop(_2) -> [return: bb7, unwind unreachable];
    }

    bb7: {
        return;
    }

    bb8: {
        _16 = move ((_14 as Some).0: &T);
        StorageDead(_15);
        StorageDead(_14);
        _17 = copy (_12.1: usize);
        _18 = AddWithOverflow(copy (_12.1: usize), const 1_usize);
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", copy (_12.1: usize), const 1_usize) -> [success: bb9, unwind unreachable];
    }

    bb9: {
        (_12.1: usize) = move (_18.0: usize);
        StorageLive(_19);
        _19 = (copy _17, copy _16);
        _20 = Option::<(usize, &T)>::Some(move _19);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        _21 = copy (((_20 as Some).0: (usize, &T)).0: usize);
        _22 = copy (((_20 as Some).0: (usize, &T)).1: &T);
        StorageLive(_23);
        _23 = &_2;
        StorageLive(_24);
        _24 = (copy _21, copy _22);
        _25 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _23, move _24) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        goto -> bb4;
    }

    bb11: {
        unreachable;
    }
}
