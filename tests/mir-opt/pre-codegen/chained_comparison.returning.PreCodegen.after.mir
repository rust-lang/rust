// MIR for `returning` after PreCodegen

fn returning(_1: &Blueprint, _2: &Blueprint) -> bool {
    debug a => _1;
    debug b => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: u32;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: bool;
    let mut _15: u32;
    let mut _16: u32;
    let mut _17: bool;

    bb0: {
        StorageLive(_5);
        StorageLive(_3);
        _3 = copy ((*_1).0: u32);
        StorageLive(_4);
        _4 = copy ((*_2).0: u32);
        _5 = Ne(move _3, move _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb10];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_5);
        StorageLive(_8);
        StorageLive(_6);
        _6 = copy ((*_1).1: u32);
        StorageLive(_7);
        _7 = copy ((*_2).1: u32);
        _8 = Ne(move _6, move _7);
        switchInt(move _8) -> [0: bb2, otherwise: bb9];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_9);
        _9 = copy ((*_1).2: u32);
        StorageLive(_10);
        _10 = copy ((*_2).2: u32);
        _11 = Ne(move _9, move _10);
        switchInt(move _11) -> [0: bb3, otherwise: bb8];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_11);
        StorageLive(_14);
        StorageLive(_12);
        _12 = copy ((*_1).3: u32);
        StorageLive(_13);
        _13 = copy ((*_2).3: u32);
        _14 = Ne(move _12, move _13);
        switchInt(move _14) -> [0: bb4, otherwise: bb7];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_14);
        StorageLive(_17);
        StorageLive(_15);
        _15 = copy ((*_1).4: u32);
        StorageLive(_16);
        _16 = copy ((*_2).4: u32);
        _17 = Ne(move _15, move _16);
        switchInt(move _17) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_17);
        _0 = const true;
        goto -> bb11;
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_15);
        _0 = const false;
        StorageDead(_17);
        goto -> bb11;
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_12);
        _0 = const false;
        StorageDead(_14);
        goto -> bb11;
    }

    bb8: {
        StorageDead(_10);
        StorageDead(_9);
        _0 = const false;
        StorageDead(_11);
        goto -> bb11;
    }

    bb9: {
        StorageDead(_7);
        StorageDead(_6);
        _0 = const false;
        StorageDead(_8);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_4);
        StorageDead(_3);
        _0 = const false;
        StorageDead(_5);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}
