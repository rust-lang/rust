// MIR for `variant_a::{closure#0}` after PreCodegen

fn variant_a::{closure#0}(_1: &mut {closure@$DIR/slice_filter.rs:7:25: 7:39}, _2: &&(usize, usize, usize, usize)) -> bool {
    let mut _0: bool;
    let mut _3: &(usize, usize, usize, usize);
    let _4: &usize;
    let mut _5: &(usize, usize, usize, usize);
    let _6: &usize;
    let mut _7: &(usize, usize, usize, usize);
    let _8: &usize;
    let mut _9: &(usize, usize, usize, usize);
    let _10: &usize;
    let mut _11: &&usize;
    let _12: &usize;
    let mut _13: &&usize;
    let mut _16: bool;
    let mut _17: &&usize;
    let _18: &usize;
    let mut _19: &&usize;
    let mut _22: bool;
    let mut _23: &&usize;
    let _24: &usize;
    let mut _25: &&usize;
    let mut _28: bool;
    let mut _29: &&usize;
    let _30: &usize;
    let mut _31: &&usize;
    scope 1 {
        debug a => _4;
        debug b => _6;
        debug c => _8;
        debug d => _10;
        scope 2 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _11;
            debug other => _13;
            scope 3 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _4;
                debug other => _8;
                let mut _14: usize;
                let mut _15: usize;
            }
        }
        scope 4 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _17;
            debug other => _19;
            scope 5 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _10;
                debug other => _6;
                let mut _20: usize;
                let mut _21: usize;
            }
        }
        scope 6 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _23;
            debug other => _25;
            scope 7 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _8;
                debug other => _4;
                let mut _26: usize;
                let mut _27: usize;
            }
        }
        scope 8 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _29;
            debug other => _31;
            scope 9 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _6;
                debug other => _10;
                let mut _32: usize;
                let mut _33: usize;
            }
        }
    }

    bb0: {
        _3 = copy (*_2);
        _4 = &((*_3).0: usize);
        _5 = copy (*_2);
        _6 = &((*_5).1: usize);
        _7 = copy (*_2);
        _8 = &((*_7).2: usize);
        _9 = copy (*_2);
        _10 = &((*_9).3: usize);
        StorageLive(_16);
        StorageLive(_11);
        _11 = &_4;
        StorageLive(_13);
        StorageLive(_12);
        _12 = copy _8;
        _13 = &_12;
        StorageLive(_14);
        _14 = copy ((*_3).0: usize);
        StorageLive(_15);
        _15 = copy ((*_7).2: usize);
        _16 = Le(move _14, move _15);
        StorageDead(_15);
        StorageDead(_14);
        switchInt(move _16) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_13);
        StorageDead(_11);
        goto -> bb4;
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_13);
        StorageDead(_11);
        StorageLive(_22);
        StorageLive(_17);
        _17 = &_10;
        StorageLive(_19);
        StorageLive(_18);
        _18 = copy _6;
        _19 = &_18;
        StorageLive(_20);
        _20 = copy ((*_9).3: usize);
        StorageLive(_21);
        _21 = copy ((*_5).1: usize);
        _22 = Le(move _20, move _21);
        StorageDead(_21);
        StorageDead(_20);
        switchInt(move _22) -> [0: bb3, otherwise: bb8];
    }

    bb3: {
        StorageDead(_18);
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_28);
        StorageLive(_23);
        _23 = &_8;
        StorageLive(_25);
        StorageLive(_24);
        _24 = copy _4;
        _25 = &_24;
        StorageLive(_26);
        _26 = copy ((*_7).2: usize);
        StorageLive(_27);
        _27 = copy ((*_3).0: usize);
        _28 = Le(move _26, move _27);
        StorageDead(_27);
        StorageDead(_26);
        switchInt(move _28) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        StorageDead(_24);
        StorageDead(_25);
        StorageDead(_23);
        _0 = const false;
        goto -> bb7;
    }

    bb6: {
        StorageDead(_24);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_29);
        _29 = &_6;
        StorageLive(_31);
        StorageLive(_30);
        _30 = copy _10;
        _31 = &_30;
        StorageLive(_32);
        _32 = copy ((*_5).1: usize);
        StorageLive(_33);
        _33 = copy ((*_9).3: usize);
        _0 = Le(move _32, move _33);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_28);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_19);
        StorageDead(_17);
        _0 = const true;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_16);
        return;
    }
}
