// MIR for `variant_a::{closure#0}` after PreCodegen

fn variant_a::{closure#0}(_1: &mut {closure@$DIR/slice_filter.rs:7:25: 7:39}, _2: &&(usize, usize, usize, usize)) -> bool {
    let mut _0: bool;
    let mut _3: &(usize, usize, usize, usize);
    let _4: &usize;
    let _5: &usize;
    let _6: &usize;
    let _7: &usize;
    let mut _8: &&usize;
    let _9: &usize;
    let mut _10: &&usize;
    let mut _13: bool;
    let mut _14: &&usize;
    let _15: &usize;
    let mut _16: &&usize;
    let mut _19: bool;
    let mut _20: &&usize;
    let _21: &usize;
    let mut _22: &&usize;
    let mut _23: bool;
    let mut _24: &&usize;
    let _25: &usize;
    let mut _26: &&usize;
    scope 1 {
        debug a => _4;
        debug b => _5;
        debug c => _6;
        debug d => _7;
        scope 2 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _8;
            debug other => _10;
            scope 3 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _4;
                debug other => _6;
                let mut _11: usize;
                let mut _12: usize;
            }
        }
        scope 4 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _14;
            debug other => _16;
            scope 5 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _7;
                debug other => _5;
                let mut _17: usize;
                let mut _18: usize;
            }
        }
        scope 6 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _20;
            debug other => _22;
            scope 7 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _6;
                debug other => _4;
            }
        }
        scope 8 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            debug self => _24;
            debug other => _26;
            scope 9 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                debug self => _5;
                debug other => _7;
                let mut _27: usize;
                let mut _28: usize;
            }
        }
    }

    bb0: {
        _3 = copy (*_2);
        _4 = &((*_3).0: usize);
        _5 = &((*_3).1: usize);
        _6 = &((*_3).2: usize);
        _7 = &((*_3).3: usize);
        StorageLive(_13);
        StorageLive(_8);
        _8 = &_4;
        StorageLive(_10);
        StorageLive(_9);
        _9 = copy _6;
        _10 = &_9;
        _11 = copy ((*_3).0: usize);
        _12 = copy ((*_3).2: usize);
        _13 = Le(copy _11, copy _12);
        switchInt(move _13) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb4;
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_19);
        StorageLive(_14);
        _14 = &_7;
        StorageLive(_16);
        StorageLive(_15);
        _15 = copy _5;
        _16 = &_15;
        StorageLive(_17);
        _17 = copy ((*_3).3: usize);
        StorageLive(_18);
        _18 = copy ((*_3).1: usize);
        _19 = Le(move _17, move _18);
        StorageDead(_18);
        StorageDead(_17);
        switchInt(move _19) -> [0: bb3, otherwise: bb8];
    }

    bb3: {
        StorageDead(_15);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_23);
        StorageLive(_20);
        _20 = &_6;
        StorageLive(_22);
        StorageLive(_21);
        _21 = copy _4;
        _22 = &_21;
        _23 = Le(copy _12, copy _11);
        switchInt(move _23) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_20);
        _0 = const false;
        goto -> bb7;
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_24);
        _24 = &_5;
        StorageLive(_26);
        StorageLive(_25);
        _25 = copy _7;
        _26 = &_25;
        StorageLive(_27);
        _27 = copy ((*_3).1: usize);
        StorageLive(_28);
        _28 = copy ((*_3).3: usize);
        _0 = Le(move _27, move _28);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_26);
        StorageDead(_24);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_23);
        goto -> bb9;
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_16);
        StorageDead(_14);
        _0 = const true;
        goto -> bb9;
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_13);
        return;
    }
}
