// MIR for `two_unwrap_unchecked` after PreCodegen

fn two_unwrap_unchecked(_1: &Option<i32>) -> i32 {
    debug v => _1;
    let mut _0: i32;
    let mut _2: std::option::Option<i32>;
    let _4: i32;
    let mut _5: std::option::Option<i32>;
    scope 1 {
        debug v1 => _4;
        let _7: i32;
        scope 2 {
            debug v2 => _7;
        }
        scope 8 (inlined #[track_caller] Option::<i32>::unwrap_unchecked) {
            let mut _6: isize;
            scope 9 {
            }
            scope 10 (inlined #[track_caller] unreachable_unchecked) {
                scope 11 (inlined core::ub_checks::check_language_ub) {
                    scope 12 (inlined core::ub_checks::check_language_ub::runtime) {
                    }
                }
            }
        }
    }
    scope 3 (inlined #[track_caller] Option::<i32>::unwrap_unchecked) {
        let mut _3: isize;
        scope 4 {
        }
        scope 5 (inlined #[track_caller] unreachable_unchecked) {
            scope 6 (inlined core::ub_checks::check_language_ub) {
                scope 7 (inlined core::ub_checks::check_language_ub::runtime) {
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = copy (*_1);
        StorageLive(_3);
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb3];
    }

    bb1: {
        _4 = move ((_2 as Some).0: i32);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_5);
        _5 = copy (*_1);
        StorageLive(_6);
        _6 = discriminant(_5);
        switchInt(move _6) -> [0: bb3, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_5 as Some).0: i32);
        StorageDead(_6);
        StorageDead(_5);
        _0 = Add(copy _4, copy _7);
        return;
    }

    bb3: {
        unreachable;
    }
}
