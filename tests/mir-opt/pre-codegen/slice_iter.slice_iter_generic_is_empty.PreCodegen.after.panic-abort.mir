// MIR for `slice_iter_generic_is_empty` after PreCodegen

fn slice_iter_generic_is_empty(_1: &std::slice::Iter<'_, T>) -> bool {
    debug it => _1;
    let mut _0: bool;
    scope 1 (inlined <std::slice::Iter<'_, T> as ExactSizeIterator>::is_empty) {
        let mut _3: *const usize;
        let mut _4: *const std::ptr::NonNull<T>;
        let mut _6: *const T;
        let mut _7: *const T;
        let mut _8: usize;
        let _13: usize;
        scope 2 {
        }
        scope 3 {
            scope 4 {
                scope 13 (inlined <NonNull<T> as PartialEq>::eq) {
                    let mut _10: std::ptr::NonNull<T>;
                    let mut _11: *mut T;
                    let mut _12: *mut T;
                    scope 14 (inlined NonNull::<T>::as_ptr) {
                    }
                    scope 15 (inlined NonNull::<T>::as_ptr) {
                    }
                }
            }
            scope 5 {
                let _2: std::ptr::NonNull<T>;
                scope 6 {
                    let _5: std::ptr::NonNull<T>;
                    scope 7 {
                        scope 9 (inlined NonNull::<T>::as_ptr) {
                        }
                        scope 10 (inlined NonNull::<T>::as_ptr) {
                        }
                        scope 11 (inlined NonNull::<T>::add) {
                            let mut _9: *const T;
                            scope 12 (inlined NonNull::<T>::as_ptr) {
                            }
                        }
                    }
                    scope 8 (inlined std::ptr::const_ptr::<impl *const usize>::cast::<NonNull<T>>) {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_13);
        StorageLive(_2);
        StorageLive(_5);
        StorageLive(_8);
        StorageLive(_7);
        StorageLive(_9);
        switchInt(const <T as std::mem::SizedTypeProperties>::IS_ZST) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _2 = copy ((*_1).0: std::ptr::NonNull<T>);
        StorageLive(_4);
        StorageLive(_3);
        _3 = &raw const ((*_1).1: usize);
        _4 = copy _3 as *const std::ptr::NonNull<T> (PtrToPtr);
        StorageDead(_3);
        _5 = copy (*_4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = copy _5 as *const T (Transmute);
        _7 = copy _2 as *const T (Transmute);
        _8 = ptr_offset_from_unsigned::<T>(move _6, copy _7) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        StorageDead(_6);
        _9 = Offset(copy _7, copy _8);
        StorageLive(_11);
        StorageLive(_10);
        _10 = copy ((*_1).0: std::ptr::NonNull<T>);
        _11 = copy _10 as *mut T (Transmute);
        StorageDead(_10);
        StorageLive(_12);
        _12 = copy _9 as *mut T (PtrToPtr);
        _0 = Eq(move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb4;
    }

    bb3: {
        _13 = copy ((*_1).1: usize);
        _0 = Eq(copy _13, const 0_usize);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_13);
        return;
    }
}
