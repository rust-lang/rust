// MIR for `a::{closure#0}` 0 coroutine_drop_async

fn a::{closure#0}(_1: Pin<&mut {async fn body of a<T>()}>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _2;
    debug x => ((*_20).0: T);
    let mut _0: std::task::Poll<()>;
    let _3: T;
    let mut _4: impl std::future::Future<Output = ()>;
    let mut _5: &mut T;
    let mut _6: std::pin::Pin<&mut T>;
    let mut _7: &mut T;
    let mut _8: *mut T;
    let mut _9: std::task::Poll<()>;
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: &mut impl std::future::Future<Output = ()>;
    let mut _12: std::pin::Pin<&mut impl std::future::Future<Output = ()>>;
    let mut _13: isize;
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: &mut impl std::future::Future<Output = ()>;
    let mut _16: std::pin::Pin<&mut impl std::future::Future<Output = ()>>;
    let mut _17: isize;
    let mut _18: ();
    let mut _19: u32;
    let mut _20: &mut {async fn body of a<T>()};
    scope 1 {
        debug x => (((*_20) as variant#4).0: T);
    }

    bb0: {
        _20 = copy (_1.0: &mut {async fn body of a<T>()});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb8, 2: bb15, 3: bb13, 4: bb14, otherwise: bb16];
    }

    bb1: {
        nop;
        nop;
        _0 = Poll::<()>::Ready(const ());
        return;
    }

    bb2: {
        _0 = Poll::<()>::Pending;
        discriminant((*_20)) = 4;
        return;
    }

    bb3: {
        StorageLive(_16);
        _15 = &mut (((*_20) as variant#4).1: impl std::future::Future<Output = ()>);
        _16 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _15) -> [return: bb6, unwind: bb12];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageDead(_16);
        _17 = discriminant(_9);
        switchInt(move _17) -> [0: bb1, 1: bb2, otherwise: bb4];
    }

    bb6: {
        _9 = <impl Future<Output = ()> as Future>::poll(move _16, move _14) -> [return: bb5, unwind: bb12];
    }

    bb7: {
        _0 = Poll::<()>::Ready(const ());
        return;
    }

    bb8: {
        goto -> bb11;
    }

    bb9 (cleanup): {
        goto -> bb12;
    }

    bb10: {
        goto -> bb7;
    }

    bb11: {
        drop(((*_20).0: T)) -> [return: bb10, unwind: bb9];
    }

    bb12 (cleanup): {
        discriminant((*_20)) = 2;
        resume;
    }

    bb13: {
        goto -> bb3;
    }

    bb14: {
        goto -> bb3;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        _0 = Poll::<()>::Ready(const ());
        return;
    }
}
