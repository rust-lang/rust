- // MIR for `run2::{closure#0}` before Inline
+ // MIR for `run2::{closure#0}` after Inline
  
  fn run2::{closure#0}(_1: {closure@$DIR/inline_coroutine_body.rs:13:9: 13:11}) -> () {
      debug permit => (_1.0: ActionPermit<'_, T>);
      debug ctx => (*(_1.1: &mut std::task::Context<'_>));
      let mut _0: ();
      let mut _2: {async fn body of ActionPermit<'_, T>::perform()};
      let mut _3: ActionPermit<'_, T>;
      let mut _5: &mut {async fn body of ActionPermit<'_, T>::perform()};
      let _6: ();
      let mut _7: std::task::Poll<()>;
      let mut _8: std::pin::Pin<&mut {async fn body of ActionPermit<'_, T>::perform()}>;
      let mut _9: &mut std::task::Context<'_>;
      let mut _10: &mut std::task::Context<'_>;
+     let mut _52: *mut ActionPermit<'_, T>;
+     let mut _53: ();
+     let mut _54: *mut {async fn body of ActionPermit<'_, T>::perform()};
+     let mut _55: ();
      scope 1 {
          debug fut => _2;
          let _4: std::pin::Pin<&mut {async fn body of ActionPermit<'_, T>::perform()}>;
          scope 2 {
              debug fut => _4;
              scope 3 {
              }
+             scope 6 (inlined ActionPermit::<'_, T>::perform::{closure#0}) {
+                 let _11: ActionPermit<'_, T>;
+                 let mut _12: std::future::Ready<()>;
+                 let mut _13: std::future::Ready<()>;
+                 let mut _14: ();
+                 let mut _16: ();
+                 let _17: ();
+                 let mut _18: std::task::Poll<()>;
+                 let mut _19: std::pin::Pin<&mut std::future::Ready<()>>;
+                 let mut _20: &mut std::future::Ready<()>;
+                 let mut _21: &mut std::future::Ready<()>;
+                 let mut _22: &mut std::task::Context<'_>;
+                 let mut _23: &mut std::task::Context<'_>;
+                 let mut _24: &mut std::task::Context<'_>;
+                 let mut _25: isize;
+                 let mut _27: !;
+                 let mut _28: &mut std::task::Context<'_>;
+                 let mut _29: ();
+                 let mut _30: ();
+                 let mut _31: &mut std::task::Context<'_>;
+                 let mut _32: u32;
+                 let mut _33: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _34: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _35: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _36: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _37: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _38: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _39: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _40: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 scope 7 {
+                     let mut _15: std::future::Ready<()>;
+                     scope 8 {
+                         let _26: ();
+                         scope 9 {
+                         }
+                         scope 12 (inlined Pin::<&mut std::future::Ready<()>>::new_unchecked) {
+                         }
+                         scope 13 (inlined <std::future::Ready<()> as Future>::poll) {
+                             let mut _42: ();
+                             let mut _43: std::option::Option<()>;
+                             let mut _44: &mut std::option::Option<()>;
+                             let mut _45: &mut std::future::Ready<()>;
+                             let mut _46: &mut std::pin::Pin<&mut std::future::Ready<()>>;
+                             scope 14 (inlined <Pin<&mut std::future::Ready<()>> as DerefMut>::deref_mut) {
+                                 let mut _47: std::pin::Pin<&mut std::future::Ready<()>>;
+                                 scope 15 (inlined Pin::<&mut std::future::Ready<()>>::as_mut) {
+                                     let mut _48: &mut &mut std::future::Ready<()>;
+                                     scope 16 (inlined Pin::<&mut std::future::Ready<()>>::new_unchecked) {
+                                     }
+                                     scope 18 (inlined <&mut std::future::Ready<()> as DerefMut>::deref_mut) {
+                                     }
+                                 }
+                                 scope 17 (inlined Pin::<&mut std::future::Ready<()>>::get_mut) {
+                                 }
+                             }
+                             scope 19 (inlined Option::<()>::take) {
+                                 let mut _49: std::option::Option<()>;
+                                 scope 20 (inlined std::mem::replace::<Option<()>>) {
+                                     scope 21 {
+                                     }
+                                 }
+                             }
+                             scope 22 (inlined #[track_caller] Option::<()>::expect) {
+                                 let mut _50: isize;
+                                 let mut _51: !;
+                                 scope 23 {
+                                 }
+                             }
+                         }
+                     }
+                     scope 10 (inlined ready::<()>) {
+                         let mut _41: std::option::Option<()>;
+                     }
+                     scope 11 (inlined <std::future::Ready<()> as IntoFuture>::into_future) {
+                     }
+                 }
+                 scope 24 (inlined drop_in_place::<ActionPermit<'_, T>> - shim(Some(ActionPermit<'_, T>))) {
+                 }
+             }
          }
+         scope 5 (inlined Pin::<&mut {async fn body of ActionPermit<'_, T>::perform()}>::new_unchecked) {
+         }
      }
+     scope 4 (inlined ActionPermit::<'_, T>::perform) {
+     }
+     scope 25 (inlined drop_in_place::<{async fn body of ActionPermit<'_, T>::perform()}> - shim(Some({async fn body of ActionPermit<'_, T>::perform()}))) {
+         let mut _56: &mut std::task::Context<'_>;
+         let _57: ActionPermit<'_, T>;
+         let mut _58: std::future::Ready<()>;
+         let mut _59: std::future::Ready<()>;
+         let mut _60: ();
+         let mut _62: ();
+         let _63: ();
+         let mut _64: std::task::Poll<()>;
+         let mut _65: std::pin::Pin<&mut std::future::Ready<()>>;
+         let mut _66: &mut std::future::Ready<()>;
+         let mut _67: &mut std::future::Ready<()>;
+         let mut _68: &mut std::task::Context<'_>;
+         let mut _69: &mut std::task::Context<'_>;
+         let mut _70: &mut std::task::Context<'_>;
+         let mut _71: isize;
+         let mut _73: !;
+         let mut _74: &mut std::task::Context<'_>;
+         let mut _75: ();
+         let mut _76: ();
+         let mut _77: &mut std::task::Context<'_>;
+         let mut _78: u32;
+         scope 26 {
+             let mut _61: std::future::Ready<()>;
+             scope 27 {
+                 let _72: ();
+                 scope 28 {
+                 }
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_2);
          StorageLive(_3);
          _3 = move (_1.0: ActionPermit<'_, T>);
-         _2 = ActionPermit::<'_, T>::perform(move _3) -> [return: bb1, unwind unreachable];
-     }
- 
-     bb1: {
+         _2 = {coroutine@$DIR/inline_coroutine_body.rs:25:28: 27:6 (#0)} { self: move _3 };
          StorageDead(_3);
          StorageLive(_4);
          StorageLive(_5);
          _5 = &mut _2;
-         _4 = Pin::<&mut {async fn body of ActionPermit<'_, T>::perform()}>::new_unchecked(move _5) -> [return: bb2, unwind unreachable];
-     }
- 
-     bb2: {
+         _4 = Pin::<&mut {async fn body of ActionPermit<'_, T>::perform()}> { pointer: copy _5 };
          StorageDead(_5);
          StorageLive(_6);
          StorageLive(_7);
          StorageLive(_8);
          _8 = move _4;
          StorageLive(_9);
          _10 = deref_copy (_1.1: &mut std::task::Context<'_>);
          _9 = &mut (*_10);
-         _7 = <{async fn body of ActionPermit<'_, T>::perform()} as Future>::poll(move _8, move _9) -> [return: bb3, unwind unreachable];
+         StorageLive(_11);
+         StorageLive(_15);
+         StorageLive(_16);
+         StorageLive(_25);
+         StorageLive(_27);
+         StorageLive(_30);
+         StorageLive(_31);
+         StorageLive(_32);
+         StorageLive(_33);
+         StorageLive(_34);
+         StorageLive(_35);
+         StorageLive(_36);
+         StorageLive(_37);
+         StorageLive(_38);
+         StorageLive(_39);
+         StorageLive(_40);
+         _33 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         _32 = discriminant((*_33));
+         switchInt(move _32) -> [0: bb2, 1: bb8, 3: bb7, otherwise: bb4];
      }
  
-     bb3: {
+     bb1: {
+         StorageDead(_40);
+         StorageDead(_39);
+         StorageDead(_38);
+         StorageDead(_37);
+         StorageDead(_36);
+         StorageDead(_35);
+         StorageDead(_34);
+         StorageDead(_33);
+         StorageDead(_32);
+         StorageDead(_31);
+         StorageDead(_30);
+         StorageDead(_27);
+         StorageDead(_25);
+         StorageDead(_16);
+         StorageDead(_15);
+         StorageDead(_11);
          StorageDead(_9);
          StorageDead(_8);
          StorageDead(_7);
          _6 = const ();
          StorageDead(_6);
          _0 = const ();
          StorageDead(_4);
-         drop(_2) -> [return: bb4, unwind unreachable];
+         StorageLive(_54);
+         _54 = &raw mut _2;
+         StorageLive(_55);
+         StorageLive(_56);
+         StorageLive(_57);
+         StorageLive(_59);
+         StorageLive(_60);
+         StorageLive(_61);
+         StorageLive(_62);
+         StorageLive(_63);
+         StorageLive(_64);
+         StorageLive(_65);
+         StorageLive(_66);
+         StorageLive(_67);
+         StorageLive(_68);
+         StorageLive(_69);
+         StorageLive(_70);
+         StorageLive(_71);
+         StorageLive(_72);
+         StorageLive(_73);
+         StorageLive(_76);
+         StorageLive(_77);
+         StorageLive(_78);
+         _78 = discriminant((*_54));
+         switchInt(move _78) -> [0: bb13, 3: bb14, otherwise: bb12];
      }
  
+     bb2: {
+         _31 = move _9;
+         _34 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         _35 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         (((*_34) as variant#3).0: ActionPermit<'_, T>) = move ((*_35).0: ActionPermit<'_, T>);
+         StorageLive(_12);
+         StorageLive(_13);
+         StorageLive(_14);
+         _14 = ();
+         StorageLive(_41);
+         _41 = Option::<()>::Some(copy _14);
+         _13 = std::future::Ready::<()>(move _41);
+         StorageDead(_41);
+         StorageDead(_14);
+         _12 = move _13;
+         StorageDead(_13);
+         _36 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         (((*_36) as variant#3).1: std::future::Ready<()>) = move _12;
+         goto -> bb3;
+     }
+ 
+     bb3: {
+         StorageLive(_17);
+         StorageLive(_18);
+         StorageLive(_19);
+         StorageLive(_20);
+         StorageLive(_21);
+         _37 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         _21 = &mut (((*_37) as variant#3).1: std::future::Ready<()>);
+         _20 = &mut (*_21);
+         _19 = Pin::<&mut std::future::Ready<()>> { pointer: copy _20 };
+         StorageDead(_20);
+         StorageLive(_22);
+         StorageLive(_23);
+         StorageLive(_24);
+         _24 = copy _31;
+         _23 = move _24;
+         _22 = &mut (*_23);
+         StorageDead(_24);
+         StorageLive(_45);
+         StorageLive(_46);
+         StorageLive(_51);
+         StorageLive(_42);
+         StorageLive(_43);
+         StorageLive(_44);
+         _46 = &mut _19;
+         StorageLive(_47);
+         StorageLive(_48);
+         _48 = &mut (_19.0: &mut std::future::Ready<()>);
+         _45 = copy (_19.0: &mut std::future::Ready<()>);
+         StorageDead(_48);
+         _47 = Pin::<&mut std::future::Ready<()>> { pointer: copy _45 };
+         StorageDead(_47);
+         _44 = &mut ((*_45).0: std::option::Option<()>);
+         StorageLive(_49);
+         _49 = Option::<()>::None;
+         _43 = copy ((*_45).0: std::option::Option<()>);
+         ((*_45).0: std::option::Option<()>) = copy _49;
+         StorageDead(_49);
+         StorageDead(_44);
+         StorageLive(_50);
+         _50 = discriminant(_43);
+         switchInt(move _50) -> [0: bb9, 1: bb10, otherwise: bb4];
+     }
+ 
      bb4: {
+         unreachable;
+     }
+ 
+     bb5: {
+         _17 = const ();
+         StorageDead(_23);
+         StorageDead(_21);
+         StorageDead(_18);
+         StorageDead(_17);
+         StorageLive(_28);
+         StorageLive(_29);
+         _29 = ();
+         _7 = Poll::<()>::Pending;
+         StorageDead(_12);
+         StorageDead(_28);
+         StorageDead(_29);
+         _38 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         discriminant((*_38)) = 3;
+         goto -> bb1;
+     }
+ 
+     bb6: {
+         StorageLive(_26);
+         _26 = copy ((_18 as Ready).0: ());
+         _30 = copy _26;
+         StorageDead(_26);
+         StorageDead(_23);
+         StorageDead(_21);
+         StorageDead(_18);
+         StorageDead(_17);
+         StorageDead(_12);
+         _39 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         StorageLive(_52);
+         _52 = &raw mut (((*_39) as variant#3).0: ActionPermit<'_, T>);
+         StorageLive(_53);
+         drop(((*_52).0: std::cell::Ref<'_, T>)) -> [return: bb11, unwind unreachable];
+     }
+ 
+     bb7: {
+         StorageLive(_12);
+         StorageLive(_28);
+         StorageLive(_29);
+         _28 = move _9;
+         StorageDead(_29);
+         _31 = move _28;
+         StorageDead(_28);
+         _16 = const ();
+         goto -> bb3;
+     }
+ 
+     bb8: {
+         assert(const false, "`async fn` resumed after completion") -> [success: bb8, unwind unreachable];
+     }
+ 
+     bb9: {
+         _51 = option::expect_failed(const "`Ready` polled after completion") -> unwind unreachable;
+     }
+ 
+     bb10: {
+         _42 = move ((_43 as Some).0: ());
+         StorageDead(_50);
+         StorageDead(_43);
+         _18 = Poll::<()>::Ready(move _42);
+         StorageDead(_42);
+         StorageDead(_51);
+         StorageDead(_46);
+         StorageDead(_45);
+         StorageDead(_22);
+         StorageDead(_19);
+         _25 = discriminant(_18);
+         switchInt(move _25) -> [0: bb6, 1: bb5, otherwise: bb4];
+     }
+ 
+     bb11: {
+         StorageDead(_53);
+         StorageDead(_52);
+         _7 = Poll::<()>::Ready(move _30);
+         _40 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         discriminant((*_40)) = 1;
+         goto -> bb1;
+     }
+ 
+     bb12: {
+         StorageDead(_78);
+         StorageDead(_77);
+         StorageDead(_76);
+         StorageDead(_73);
+         StorageDead(_72);
+         StorageDead(_71);
+         StorageDead(_70);
+         StorageDead(_69);
+         StorageDead(_68);
+         StorageDead(_67);
+         StorageDead(_66);
+         StorageDead(_65);
+         StorageDead(_64);
+         StorageDead(_63);
+         StorageDead(_62);
+         StorageDead(_61);
+         StorageDead(_60);
+         StorageDead(_59);
+         StorageDead(_57);
+         StorageDead(_56);
+         StorageDead(_55);
+         StorageDead(_54);
          StorageDead(_2);
          return;
+     }
+ 
+     bb13: {
+         drop(((*_54).0: ActionPermit<'_, T>)) -> [return: bb12, unwind unreachable];
+     }
+ 
+     bb14: {
+         StorageLive(_58);
+         StorageLive(_74);
+         StorageLive(_75);
+         StorageDead(_75);
+         StorageDead(_74);
+         StorageDead(_58);
+         drop((((*_54) as variant#3).0: ActionPermit<'_, T>)) -> [return: bb12, unwind unreachable];
      }
  }
  
