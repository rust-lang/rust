// MIR for `vec_macro` after CleanupPostBorrowck

fn vec_macro() -> Vec<i32> {
    let mut _0: std::vec::Vec<i32>;
    let mut _1: std::boxed::Box<[i32]>;
    let mut _2: std::boxed::Box<[i32; 8]>;
    let mut _3: *mut u8;
    let mut _4: std::boxed::Box<[i32; 8]>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = boxed::box_new_uninit(const <[i32; 8] as std::mem::SizedTypeProperties>::SIZE, const <[i32; 8] as std::mem::SizedTypeProperties>::ALIGN) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        StorageLive(_4);
        _4 = ShallowInitBox(move _3, [i32; 8]);
        (*_4) = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32];
        _2 = move _4;
        _1 = move _2 as std::boxed::Box<[i32]> (PointerCoercion(Unsize, Implicit));
        drop(_2) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        StorageDead(_4);
        StorageDead(_2);
        _0 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _1) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_1);
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}
