// MIR for `b::{closure#0}` 0 coroutine_resume
/* coroutine_layout = CoroutineLayout {
    field_tys: {
        _0: CoroutineSavedTy {
            ty: Coroutine(
                DefId(0:5 ~ async_await[ccf8]::a::{closure#0}),
                [
                    (),
                    Binder { value: &'^0 mut std::task::Context<'^1>, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                    (),
                    (),
                    (),
                ],
            ),
            source_info: SourceInfo {
                span: $DIR/async_await.rs:16:5: 16:14 (#9),
                scope: scope[0],
            },
            ignore_for_traits: false,
        },
        _1: CoroutineSavedTy {
            ty: Coroutine(
                DefId(0:5 ~ async_await[ccf8]::a::{closure#0}),
                [
                    (),
                    Binder { value: &'^0 mut std::task::Context<'^1>, bound_vars: [Region(BrAnon), Region(BrAnon)] },
                    (),
                    (),
                    (),
                ],
            ),
            source_info: SourceInfo {
                span: $DIR/async_await.rs:17:5: 17:14 (#11),
                scope: scope[0],
            },
            ignore_for_traits: false,
        },
    },
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
        Suspend0 (3): [_0],
        Suspend1 (4): [_1],
    },
    storage_conflicts: BitMatrix(2x2) {
        (_0, _0),
        (_1, _1),
    },
} */

fn b::{closure#0}(_1: Pin<&mut {async fn body of b()}>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _36;
    let mut _0: std::task::Poll<()>;
    let _3: ();
    let mut _4: {async fn body of a()};
    let mut _5: {async fn body of a()};
    let mut _6: {async fn body of a()};
    let mut _7: ();
    let _8: ();
    let mut _9: std::task::Poll<()>;
    let mut _10: std::pin::Pin<&mut {async fn body of a()}>;
    let mut _11: &mut {async fn body of a()};
    let mut _12: &mut {async fn body of a()};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: !;
    let mut _17: unsafe<'a, 'b> &'a mut std::task::Context<'b>;
    let mut _18: ();
    let mut _19: {async fn body of a()};
    let mut _20: {async fn body of a()};
    let mut _21: {async fn body of a()};
    let _22: ();
    let mut _23: std::task::Poll<()>;
    let mut _24: std::pin::Pin<&mut {async fn body of a()}>;
    let mut _25: &mut {async fn body of a()};
    let mut _26: &mut {async fn body of a()};
    let mut _27: &mut std::task::Context<'_>;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: unsafe<'a, 'b> &'a mut std::task::Context<'b>;
    let mut _32: ();
    let mut _33: &mut std::task::Context<'_>;
    let mut _34: &mut std::task::Context<'_>;
    let mut _35: ();
    let mut _36: unsafe<'a, 'b> &'a mut std::task::Context<'b>;
    let mut _37: u32;
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async fn body of b()})) as variant#3).0: {async fn body of a()});
        let _15: ();
        scope 2 {
            debug result => _15;
        }
    }
    scope 3 {
        debug __awaitee => (((*(_1.0: &mut {async fn body of b()})) as variant#4).0: {async fn body of a()});
        let _29: ();
        scope 4 {
            debug result => _29;
        }
    }

    bb0: {
        _37 = discriminant((*(_1.0: &mut {async fn body of b()})));
        switchInt(move _37) -> [0: bb1, 1: bb27, 3: bb25, 4: bb26, otherwise: bb7];
    }

    bb1: {
        _36 = wrap_binder!(move _2; unsafe<'a, 'b> &'a mut std::task::Context<'b>);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = a() -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _4 = <{async fn body of a()} as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        StorageDead(_5);
        PlaceMention(_4);
        nop;
        (((*(_1.0: &mut {async fn body of b()})) as variant#3).0: {async fn body of a()}) = move _4;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut (((*(_1.0: &mut {async fn body of b()})) as variant#3).0: {async fn body of a()});
        _11 = &mut (*_12);
        _10 = Pin::<&mut {async fn body of a()}>::new_unchecked(move _11) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        StorageDead(_11);
        StorageLive(_13);
        _33 = deref_copy unwrap_binder!(_36; &mut Context<'_>);
        _13 = &mut (*_33);
        _9 = <{async fn body of a()} as Future>::poll(move _10, move _13) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_10);
        PlaceMention(_9);
        _14 = discriminant(_9);
        switchInt(move _14) -> [0: bb9, 1: bb8, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _8 = const ();
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ();
        _0 = Poll::<()>::Pending;
        StorageDead(_3);
        StorageDead(_4);
        StorageDead(_17);
        StorageDead(_18);
        discriminant((*(_1.0: &mut {async fn body of b()}))) = 3;
        return;
    }

    bb9: {
        StorageLive(_15);
        _15 = copy ((_9 as Ready).0: ());
        _3 = copy _15;
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        drop((((*(_1.0: &mut {async fn body of b()})) as variant#3).0: {async fn body of a()})) -> [return: bb11, unwind unreachable];
    }

    bb10: {
        StorageDead(_18);
        _36 = move _17;
        StorageDead(_17);
        _7 = const ();
        goto -> bb4;
    }

    bb11: {
        nop;
        goto -> bb12;
    }

    bb12: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_19);
        StorageLive(_20);
        _20 = a() -> [return: bb13, unwind unreachable];
    }

    bb13: {
        _19 = <{async fn body of a()} as IntoFuture>::into_future(move _20) -> [return: bb14, unwind unreachable];
    }

    bb14: {
        StorageDead(_20);
        PlaceMention(_19);
        nop;
        (((*(_1.0: &mut {async fn body of b()})) as variant#4).0: {async fn body of a()}) = move _19;
        goto -> bb15;
    }

    bb15: {
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &mut (((*(_1.0: &mut {async fn body of b()})) as variant#4).0: {async fn body of a()});
        _25 = &mut (*_26);
        _24 = Pin::<&mut {async fn body of a()}>::new_unchecked(move _25) -> [return: bb16, unwind unreachable];
    }

    bb16: {
        StorageDead(_25);
        StorageLive(_27);
        _34 = deref_copy unwrap_binder!(_36; &mut Context<'_>);
        _27 = &mut (*_34);
        _23 = <{async fn body of a()} as Future>::poll(move _24, move _27) -> [return: bb17, unwind unreachable];
    }

    bb17: {
        StorageDead(_27);
        StorageDead(_24);
        PlaceMention(_23);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb19, 1: bb18, otherwise: bb7];
    }

    bb18: {
        _22 = const ();
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ();
        _0 = Poll::<()>::Pending;
        StorageDead(_19);
        StorageDead(_31);
        StorageDead(_32);
        discriminant((*(_1.0: &mut {async fn body of b()}))) = 4;
        return;
    }

    bb19: {
        StorageLive(_29);
        _29 = copy ((_23 as Ready).0: ());
        _35 = copy _29;
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        drop((((*(_1.0: &mut {async fn body of b()})) as variant#4).0: {async fn body of a()})) -> [return: bb21, unwind unreachable];
    }

    bb20: {
        StorageDead(_32);
        _36 = move _31;
        StorageDead(_31);
        _7 = const ();
        goto -> bb15;
    }

    bb21: {
        nop;
        goto -> bb22;
    }

    bb22: {
        StorageDead(_19);
        goto -> bb24;
    }

    bb23: {
        _0 = Poll::<()>::Ready(move _35);
        discriminant((*(_1.0: &mut {async fn body of b()}))) = 1;
        return;
    }

    bb24: {
        goto -> bb23;
    }

    bb25: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_17);
        StorageLive(_18);
        _17 = wrap_binder!(move _2; unsafe<'a, 'b> &'a mut std::task::Context<'b>);
        goto -> bb10;
    }

    bb26: {
        StorageLive(_19);
        StorageLive(_31);
        StorageLive(_32);
        _31 = wrap_binder!(move _2; unsafe<'a, 'b> &'a mut std::task::Context<'b>);
        goto -> bb20;
    }

    bb27: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb27, unwind unreachable];
    }
}
