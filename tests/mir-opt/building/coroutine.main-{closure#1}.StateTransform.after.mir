// MIR for `main::{closure#1}` after StateTransform
/* coroutine_layout = CoroutineLayout {
    field_tys: {
        _s0: CoroutineSavedTy {
            ty: std::string::String,
            source_info: SourceInfo {
                span: $DIR/coroutine.rs:25:6: 25:9 (#0),
                scope: scope[0],
            },
            ignore_for_traits: false,
        },
    },
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
        Suspend0 (3): [_s0],
        Suspend1 (4): [_s0],
    },
    storage_conflicts: BitMatrix(1x1) {
        (_s0, _s0),
    },
} */

fn main::{closure#1}(_1: Pin<&mut {coroutine@$DIR/coroutine.rs:25:5: 25:18}>, _2: String) -> CoroutineState<(&str, String, &Location<'_>), ()> {
    debug arg => (((*_18) as variant#4).0: std::string::String);
    let mut _0: std::ops::CoroutineState<(&str, std::string::String, &std::panic::Location<'_>), ()>;
    let _3: std::string::String;
    let mut _4: (&str, std::string::String, &std::panic::Location<'_>);
    let mut _5: std::string::String;
    let mut _6: &std::string::String;
    let mut _7: &std::panic::Location<'_>;
    let _8: std::string::String;
    let mut _9: (&str, std::string::String, &std::panic::Location<'_>);
    let mut _10: &str;
    let _11: &str;
    let mut _12: std::string::String;
    let mut _13: &std::string::String;
    let mut _14: &std::panic::Location<'_>;
    let _15: &std::panic::Location<'_>;
    let mut _16: ();
    let mut _17: u32;
    let mut _18: &mut {coroutine@$DIR/coroutine.rs:25:5: 25:18};

    bb0: {
        _18 = copy (_1.0: &mut {coroutine@$DIR/coroutine.rs:25:5: 25:18});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb15, 3: bb13, 4: bb14, otherwise: bb16];
    }

    bb1: {
        (((*_18) as variant#4).0: std::string::String) = move _2;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(((*_18) as variant#4).0: std::string::String);
        _5 = <String as Clone>::clone(move _6) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = Location::<'_>::caller() -> [return: bb3, unwind unreachable];
    }

    bb3: {
        _4 = (const "first", move _5, move _7);
        StorageDead(_7);
        StorageDead(_5);
        _0 = CoroutineState::<(&str, String, &Location<'_>), ()>::Yielded(move _4);
        StorageDead(_3);
        StorageDead(_4);
        discriminant((*_18)) = 3;
        return;
    }

    bb4: {
        StorageDead(_4);
        drop(_3) -> [return: bb5, unwind unreachable];
    }

    bb5: {
        StorageDead(_3);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "second";
        _10 = &(*_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(((*_18) as variant#4).0: std::string::String);
        _12 = <String as Clone>::clone(move _13) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = Location::<'_>::caller() -> [return: bb7, unwind unreachable];
    }

    bb7: {
        _14 = &(*_15);
        _9 = (move _10, move _12, move _14);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        _0 = CoroutineState::<(&str, String, &Location<'_>), ()>::Yielded(move _9);
        StorageDead(_8);
        StorageDead(_9);
        StorageDead(_11);
        StorageDead(_15);
        discriminant((*_18)) = 4;
        return;
    }

    bb8: {
        StorageDead(_9);
        drop(_8) -> [return: bb9, unwind unreachable];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_11);
        StorageDead(_8);
        _16 = const ();
        drop((((*_18) as variant#4).0: std::string::String)) -> [return: bb10, unwind unreachable];
    }

    bb10: {
        goto -> bb12;
    }

    bb11: {
        _0 = CoroutineState::<(&str, String, &Location<'_>), ()>::Complete(move _16);
        discriminant((*_18)) = 1;
        return;
    }

    bb12: {
        goto -> bb11;
    }

    bb13: {
        StorageLive(_3);
        StorageLive(_4);
        _3 = move _2;
        goto -> bb4;
    }

    bb14: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_11);
        StorageLive(_15);
        _8 = move _2;
        goto -> bb8;
    }

    bb15: {
        assert(const false, "coroutine resumed after completion") -> [success: bb15, unwind unreachable];
    }

    bb16: {
        unreachable;
    }
}

ALLOC0 (size: 6, align: 1) {
    73 65 63 6f 6e 64                               │ second
}

ALLOC1 (size: 5, align: 1) {
    66 69 72 73 74                                  │ first
}
