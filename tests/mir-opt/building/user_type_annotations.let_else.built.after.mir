// MIR for `let_else` after built

| User Type Annotations
| 0: user_ty: Canonical { value: Ty((u32, u64, &'static char)), max_universe: U0, variables: [] }, span: $DIR/user_type_annotations.rs:35:20: 35:45, inferred_ty: (u32, u64, &char)
| 1: user_ty: Canonical { value: Ty((u32, u64, &'static char)), max_universe: U0, variables: [] }, span: $DIR/user_type_annotations.rs:35:20: 35:45, inferred_ty: (u32, u64, &char)
|
fn let_else() -> () {
    let mut _0: ();
    let mut _1: !;
    let _2: u32 as UserTypeProjection { base: UserType(0), projs: [Field(0, ())] };
    let _3: u64 as UserTypeProjection { base: UserType(0), projs: [Field(1, ())] };
    let _4: &char as UserTypeProjection { base: UserType(0), projs: [Field(2, ())] };
    let mut _5: (u32, u64, &char);
    let mut _6: &char;
    let _7: &char;
    let _8: char;
    scope 1 {
        debug x => _2;
        debug y => _3;
        debug z => _4;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const 'u';
        _7 = &_8;
        _6 = &(*_7);
        _5 = (const 7_u32, const 12_u64, move _6);
        StorageDead(_6);
        PlaceMention(_5);
        falseEdge -> [real: bb4, imaginary: bb3];
    }

    bb1: {
        _1 = core::panicking::panic(const "internal error: entered unreachable code") -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        goto -> bb5;
    }

    bb4: {
        AscribeUserType(_5, +, UserTypeProjection { base: UserType(1), projs: [] });
        _2 = copy (_5.0: u32);
        _3 = copy (_5.1: u64);
        _4 = copy (_5.2: &char);
        StorageDead(_7);
        StorageDead(_5);
        _0 = const ();
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb1;
    }

    bb6 (cleanup): {
        resume;
    }
}
