// MIR for `let_else_bindless` after built

| User Type Annotations
| 0: user_ty: Canonical { value: Ty((u32, u64, &'static char)), max_universe: U0, variables: [] }, span: $DIR/user_type_annotations.rs:40:20: 40:45, inferred_ty: (u32, u64, &char)
| 1: user_ty: Canonical { value: Ty((u32, u64, &'static char)), max_universe: U0, variables: [] }, span: $DIR/user_type_annotations.rs:40:20: 40:45, inferred_ty: (u32, u64, &char)
|
fn let_else_bindless() -> () {
    let mut _0: ();
    let mut _1: !;
    let mut _2: (u32, u64, &char);
    let mut _3: &char;
    let _4: &char;
    let _5: char;
    scope 1 {
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const 'u';
        _4 = &_5;
        _3 = &(*_4);
        _2 = (const 7_u32, const 12_u64, move _3);
        StorageDead(_3);
        PlaceMention(_2);
        falseEdge -> [real: bb4, imaginary: bb3];
    }

    bb1: {
        _1 = core::panicking::panic(const "internal error: entered unreachable code") -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        goto -> bb5;
    }

    bb4: {
        AscribeUserType(_2, +, UserTypeProjection { base: UserType(1), projs: [] });
        StorageDead(_4);
        StorageDead(_2);
        _0 = const ();
        StorageDead(_5);
        return;
    }

    bb5: {
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_5);
        goto -> bb1;
    }

    bb6 (cleanup): {
        resume;
    }
}
