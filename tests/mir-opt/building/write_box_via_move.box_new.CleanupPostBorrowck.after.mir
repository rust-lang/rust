// MIR for `box_new` after CleanupPostBorrowck

fn box_new(_1: T) -> Box<[T; 1024]> {
    debug x => _1;
    let mut _0: std::boxed::Box<[T; 1024]>;
    let mut _2: std::boxed::Box<std::mem::MaybeUninit<[T; 1024]>>;
    let mut _3: std::boxed::Box<std::mem::MaybeUninit<[T; 1024]>>;
    let mut _4: std::boxed::Box<std::mem::MaybeUninit<[T; 1024]>>;
    let mut _5: *mut std::boxed::Box<std::mem::MaybeUninit<[T; 1024]>>;
    let mut _6: *mut [T; 1024];
    let mut _7: T;
    scope 1 {
        debug b => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = Box::<[T; 1024]>::new_uninit() -> [return: bb1, unwind: bb9];
    }

    bb1: {
        nop;
        StorageLive(_3);
        StorageLive(_4);
        _4 = move _2;
        StorageLive(_5);
        _5 = &raw mut _4;
        _6 = boxed::box_uninit_as_mut_ptr::<[T; 1024]>(copy _5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        StorageLive(_7);
        _7 = copy _1;
        (*_6) = [move _7; 1024];
        StorageDead(_7);
        _3 = move _4;
        StorageDead(_5);
        drop(_4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        StorageDead(_4);
        _0 = Box::<MaybeUninit<[T; 1024]>>::assume_init(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_3);
        drop(_2) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        StorageDead(_2);
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}
