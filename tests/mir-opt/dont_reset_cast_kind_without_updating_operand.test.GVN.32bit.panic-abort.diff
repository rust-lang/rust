- // MIR for `test` before GVN
+ // MIR for `test` after GVN
  
  fn test() -> () {
      let mut _0: ();
      let _1: &std::boxed::Box<()>;
      let _2: &std::boxed::Box<()>;
      let _3: std::boxed::Box<()>;
      let mut _4: ();
      let mut _7: *const ();
      let mut _9: *const [()];
      let mut _10: std::boxed::Box<()>;
      let mut _11: *const ();
      let mut _12: std::alloc::Global;
      let mut _27: usize;
      scope 1 {
          debug vp_ctx => _1;
          let _5: *const ();
          scope 2 {
              debug slf => _5;
              let _6: *const [()];
              scope 3 {
                  debug bytes => _6;
                  let _8: *mut ();
                  scope 4 {
                      debug _x => _8;
                  }
                  scope 26 (inlined foo) {
                      let mut _28: *const [()];
                  }
              }
              scope 24 (inlined slice_from_raw_parts::<()>) {
                  scope 25 (inlined std::ptr::from_raw_parts::<[()], ()>) {
                  }
              }
          }
      }
      scope 5 (inlined Box::<()>::new) {
          scope 6 (inlined Box::<()>::new_in) {
              let mut _13: std::boxed::Box<std::mem::MaybeUninit<()>>;
              let mut _14: *mut ();
              let mut _15: *mut std::mem::MaybeUninit<()>;
              let mut _16: *const std::mem::MaybeUninit<()>;
              let mut _25: std::alloc::Global;
              let mut _26: std::ptr::NonNull<std::mem::MaybeUninit<()>>;
              scope 7 {
                  scope 8 (inlined #[track_caller] std::ptr::write::<()>) {
                  }
                  scope 9 (inlined Box::<MaybeUninit<()>>::assume_init) {
                      let mut _17: *mut ();
                      scope 10 {
                          scope 19 (inlined Box::<()>::from_raw_in) {
                              let mut _19: std::ptr::Unique<()>;
                              scope 20 (inlined Unique::<()>::new_unchecked) {
                                  let mut _20: std::ptr::NonNull<()>;
                                  scope 21 (inlined #[track_caller] NonNull::<()>::new_unchecked) {
                                      let _21: ();
                                      let mut _22: *mut ();
                                      let mut _23: *const ();
                                      scope 22 (inlined core::ub_checks::check_language_ub) {
                                          let mut _24: bool;
                                          scope 23 (inlined core::ub_checks::check_language_ub::runtime) {
                                          }
                                      }
                                  }
                              }
                          }
                      }
                      scope 11 (inlined Box::<MaybeUninit<()>>::into_raw_with_allocator) {
                          scope 12 {
                              let _18: *mut std::mem::MaybeUninit<()>;
                              scope 13 {
                                  scope 14 {
                                  }
                                  scope 17 (inlined <ManuallyDrop<Box<MaybeUninit<()>>> as Deref>::deref) {
                                  }
                                  scope 18 (inlined #[track_caller] std::ptr::read::<std::alloc::Global>) {
                                  }
                              }
                              scope 16 (inlined <ManuallyDrop<Box<MaybeUninit<()>>> as DerefMut>::deref_mut) {
                              }
                          }
                          scope 15 (inlined ManuallyDrop::<Box<MaybeUninit<()>>>::new) {
                          }
                      }
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
-         StorageLive(_2);
+         nop;
          StorageLive(_3);
          StorageLive(_4);
-         _4 = ();
+         _4 = const ();
          StorageLive(_12);
          _12 = const std::alloc::Global;
          StorageLive(_16);
          StorageLive(_21);
          StorageLive(_25);
          StorageLive(_26);
          StorageLive(_13);
-         _13 = Box::<()>::new_uninit_in(move _12) -> [return: bb2, unwind unreachable];
+         _13 = Box::<()>::new_uninit_in(const std::alloc::Global) -> [return: bb2, unwind unreachable];
      }
  
      bb1: {
          StorageDead(_3);
          StorageDead(_1);
          return;
      }
  
      bb2: {
          StorageLive(_14);
          StorageLive(_15);
          _16 = copy ((_13.0: std::ptr::Unique<std::mem::MaybeUninit<()>>).0: std::ptr::NonNull<std::mem::MaybeUninit<()>>) as *const std::mem::MaybeUninit<()> (Transmute);
          _15 = &raw mut (*_16);
          _14 = copy _15 as *mut () (PtrToPtr);
          StorageDead(_15);
-         (*_14) = copy _4;
+         (*_14) = const ();
          StorageDead(_14);
          _26 = move ((_13.0: std::ptr::Unique<std::mem::MaybeUninit<()>>).0: std::ptr::NonNull<std::mem::MaybeUninit<()>>);
-         _25 = move (_13.1: std::alloc::Global);
+         _25 = const std::alloc::Global;
          StorageLive(_18);
          _18 = &raw mut (*_16);
-         StorageLive(_17);
+         nop;
          _17 = copy _18 as *mut () (PtrToPtr);
          StorageLive(_19);
          StorageLive(_20);
          StorageLive(_23);
          StorageLive(_24);
          _24 = UbChecks();
          switchInt(copy _24) -> [0: bb5, otherwise: bb3];
      }
  
      bb3: {
          StorageLive(_22);
-         _22 = copy _18 as *mut () (PtrToPtr);
-         _21 = NonNull::<T>::new_unchecked::precondition_check(move _22) -> [return: bb4, unwind unreachable];
+         _22 = copy _17;
+         _21 = NonNull::<T>::new_unchecked::precondition_check(copy _17) -> [return: bb4, unwind unreachable];
      }
  
      bb4: {
          StorageDead(_22);
          goto -> bb5;
      }
  
      bb5: {
          _23 = copy _18 as *const () (PtrToPtr);
          _20 = NonNull::<()> { pointer: copy _23 };
          StorageDead(_24);
          StorageDead(_23);
          _19 = Unique::<()> { pointer: move _20, _marker: const PhantomData::<()> };
          StorageDead(_20);
-         _3 = Box::<()>(move _19, copy _25);
+         _3 = Box::<()>(move _19, const std::alloc::Global);
          StorageDead(_19);
-         StorageDead(_17);
+         nop;
          StorageDead(_18);
          StorageDead(_13);
          StorageDead(_26);
          StorageDead(_25);
          StorageDead(_21);
          StorageDead(_16);
          StorageDead(_12);
          StorageDead(_4);
          _2 = &_3;
          _1 = &(*_2);
-         StorageDead(_2);
-         StorageLive(_5);
-         _10 = copy (*_1);
+         nop;
+         nop;
+         _10 = copy (*_2);
          _11 = copy ((_10.0: std::ptr::Unique<()>).0: std::ptr::NonNull<()>) as *const () (Transmute);
          _5 = &raw const (*_11);
-         StorageLive(_6);
+         nop;
          StorageLive(_7);
          _7 = copy _5;
          StorageLive(_27);
          _27 = const 1_usize;
-         _6 = *const [()] from (copy _7, copy _27);
+         _6 = *const [()] from (copy _5, const 1_usize);
          StorageDead(_27);
          StorageDead(_7);
          StorageLive(_8);
          StorageLive(_9);
          _9 = copy _6;
          StorageLive(_28);
-         _28 = copy _9;
-         _8 = copy _9 as *mut () (PtrToPtr);
+         _28 = copy _6;
+         _8 = copy _5 as *mut () (PtrToPtr);
          StorageDead(_28);
          StorageDead(_9);
          _0 = const ();
          StorageDead(_8);
-         StorageDead(_6);
-         StorageDead(_5);
+         nop;
+         nop;
          drop(_3) -> [return: bb1, unwind unreachable];
      }
  }
  
