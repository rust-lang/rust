- // MIR for `test` before GVN
+ // MIR for `test` after GVN
  
  fn test() -> () {
      let mut _0: ();
      let _1: &std::boxed::Box<()>;
      let _2: &std::boxed::Box<()>;
      let _3: std::boxed::Box<()>;
      let mut _6: *const ();
      let mut _8: *const [()];
      let mut _9: *const ();
      let mut _22: usize;
      let mut _23: std::ptr::NonNull<()>;
      scope 1 {
          debug vp_ctx => _1;
          let _4: *const ();
          scope 2 {
              debug slf => _9;
              let _5: *const [()];
              scope 3 {
                  debug bytes => _5;
                  let _7: *mut ();
                  scope 4 {
                      debug _x => _7;
                  }
                  scope 18 (inlined foo) {
                  }
              }
              scope 16 (inlined slice_from_raw_parts::<()>) {
                  scope 17 (inlined std::ptr::from_raw_parts::<[()], ()>) {
                  }
              }
          }
      }
      scope 5 (inlined Box::<()>::new) {
          let mut _10: usize;
          let mut _11: usize;
          let mut _12: *mut u8;
          scope 6 (inlined alloc::alloc::exchange_malloc) {
              let _13: std::alloc::Layout;
              let mut _14: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>;
              let mut _15: isize;
              let mut _17: !;
              scope 7 {
                  let _16: std::ptr::NonNull<[u8]>;
                  scope 8 {
                      scope 11 (inlined NonNull::<[u8]>::as_mut_ptr) {
                          scope 12 (inlined NonNull::<[u8]>::as_non_null_ptr) {
                              scope 13 (inlined NonNull::<[u8]>::cast::<u8>) {
                                  let mut _21: *mut [u8];
                                  scope 14 (inlined NonNull::<[u8]>::as_ptr) {
                                  }
                              }
                          }
                          scope 15 (inlined NonNull::<u8>::as_ptr) {
                          }
                      }
                  }
                  scope 10 (inlined <std::alloc::Global as Allocator>::allocate) {
                  }
              }
              scope 9 (inlined #[track_caller] Layout::from_size_align_unchecked) {
                  let mut _18: bool;
                  let _19: ();
                  let mut _20: std::ptr::Alignment;
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_10);
          StorageLive(_11);
          StorageLive(_12);
-         _10 = SizeOf(());
-         _11 = AlignOf(());
+         _10 = const 0_usize;
+         _11 = const 1_usize;
          StorageLive(_13);
          StorageLive(_15);
          StorageLive(_16);
          StorageLive(_18);
          _18 = const false;
-         switchInt(move _18) -> [0: bb6, otherwise: bb5];
+         switchInt(const false) -> [0: bb6, otherwise: bb5];
      }
  
      bb1: {
          StorageDead(_3);
          StorageDead(_1);
          return;
      }
  
      bb2: {
          unreachable;
      }
  
      bb3: {
-         _17 = handle_alloc_error(move _13) -> unwind unreachable;
+         _17 = handle_alloc_error(const Layout {{ size: 0_usize, align: std::ptr::Alignment(std::ptr::alignment::AlignmentEnum::_Align1Shl0) }}) -> unwind unreachable;
      }
  
      bb4: {
          _16 = copy ((_14 as Ok).0: std::ptr::NonNull<[u8]>);
          StorageLive(_21);
          _21 = copy _16 as *mut [u8] (Transmute);
          _12 = copy _21 as *mut u8 (PtrToPtr);
          StorageDead(_21);
          StorageDead(_14);
          StorageDead(_16);
          StorageDead(_15);
          StorageDead(_13);
          _3 = ShallowInitBox(copy _12, ());
          StorageDead(_12);
          StorageDead(_11);
          StorageDead(_10);
          _2 = &_3;
          _1 = copy _2;
          StorageDead(_2);
          StorageLive(_4);
          _23 = copy ((_3.0: std::ptr::Unique<()>).0: std::ptr::NonNull<()>);
          _9 = copy _23 as *const () (Transmute);
          _4 = copy _9;
-         StorageLive(_5);
+         nop;
          StorageLive(_6);
-         _6 = copy _4;
+         _6 = copy _9;
          StorageLive(_22);
          _22 = const 1_usize;
-         _5 = *const [()] from (copy _6, copy _22);
+         _5 = *const [()] from (copy _9, const 1_usize);
          StorageDead(_22);
          StorageDead(_6);
          StorageLive(_7);
          StorageLive(_8);
          _8 = copy _5;
-         _7 = copy _8 as *mut () (PtrToPtr);
+         _7 = copy _23 as *mut () (Transmute);
          StorageDead(_8);
          StorageDead(_7);
-         StorageDead(_5);
+         nop;
          StorageDead(_4);
          drop(_3) -> [return: bb1, unwind unreachable];
      }
  
      bb5: {
-         _19 = Layout::from_size_align_unchecked::precondition_check(copy _10, copy _11) -> [return: bb6, unwind unreachable];
+         _19 = Layout::from_size_align_unchecked::precondition_check(const 0_usize, const 1_usize) -> [return: bb6, unwind unreachable];
      }
  
      bb6: {
          StorageDead(_18);
          StorageLive(_20);
-         _20 = copy _11 as std::ptr::Alignment (Transmute);
-         _13 = Layout { size: copy _10, align: move _20 };
+         _20 = const std::ptr::Alignment(std::ptr::alignment::AlignmentEnum::_Align1Shl0);
+         _13 = const Layout {{ size: 0_usize, align: std::ptr::Alignment(std::ptr::alignment::AlignmentEnum::_Align1Shl0) }};
          StorageDead(_20);
          StorageLive(_14);
-         _14 = std::alloc::Global::alloc_impl(const alloc::alloc::exchange_malloc::promoted[0], copy _13, const false) -> [return: bb7, unwind unreachable];
+         _14 = std::alloc::Global::alloc_impl(const alloc::alloc::exchange_malloc::promoted[0], const Layout {{ size: 0_usize, align: std::ptr::Alignment(std::ptr::alignment::AlignmentEnum::_Align1Shl0) }}, const false) -> [return: bb7, unwind unreachable];
      }
  
      bb7: {
          _15 = discriminant(_14);
          switchInt(move _15) -> [0: bb4, 1: bb3, otherwise: bb2];
      }
+ }
+ 
+ ALLOC0 (size: 8, align: 4) {
+     01 00 00 00 00 00 00 00                         â”‚ ........
  }
  
