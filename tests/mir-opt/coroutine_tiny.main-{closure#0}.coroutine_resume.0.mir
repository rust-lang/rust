// MIR for `main::{closure#0}` 0 coroutine_resume
/* coroutine_layout = CoroutineLayout {
    field_tys: {
        _s0: CoroutineSavedTy {
            ty: HasDrop,
            source_info: SourceInfo {
                span: $DIR/coroutine_tiny.rs:22:13: 22:15 (#0),
                scope: scope[0],
            },
            ignore_for_traits: false,
        },
    },
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
        Suspend0 (3): [_s0],
    },
    storage_conflicts: BitMatrix(1x1) {
        (_s0, _s0),
    },
} */

fn main::{closure#0}(_1: Pin<&mut {coroutine@$DIR/coroutine_tiny.rs:21:5: 21:13}>, _2: u8) -> CoroutineState<(), ()> {
    debug _x => _2;
    let mut _0: std::ops::CoroutineState<(), ()>;
    let _3: HasDrop;
    let _4: u8;
    let _5: ();
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut {coroutine@$DIR/coroutine_tiny.rs:21:5: 21:13};
    scope 1 {
        debug _d => (((*_8) as variant#3).0: HasDrop);
    }

    bb0: {
        _8 = copy (_1.0: &mut {coroutine@$DIR/coroutine_tiny.rs:21:5: 21:13});
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 3: bb5, otherwise: bb6];
    }

    bb1: {
        nop;
        (((*_8) as variant#3).0: HasDrop) = const HasDrop;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_4);
        _0 = CoroutineState::<(), ()>::Yielded(const ());
        StorageDead(_4);
        discriminant((*_8)) = 3;
        return;
    }

    bb3: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = callee() -> [return: bb4, unwind unreachable];
    }

    bb4: {
        StorageDead(_5);
        goto -> bb2;
    }

    bb5: {
        StorageLive(_4);
        _4 = move _2;
        goto -> bb3;
    }

    bb6: {
        unreachable;
    }
}
