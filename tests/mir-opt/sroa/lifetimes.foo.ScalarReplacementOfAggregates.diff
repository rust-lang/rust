- // MIR for `foo` before ScalarReplacementOfAggregates
+ // MIR for `foo` after ScalarReplacementOfAggregates
  
  fn foo() -> () {
      let mut _0: ();
      let _1: Foo<T>;
      let mut _2: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>;
      let mut _3: std::boxed::Box<dyn std::fmt::Display>;
      let mut _4: std::boxed::Box<u32>;
      let mut _7: isize;
      let _9: ();
      let _10: ();
      let mut _11: std::fmt::Arguments<'_>;
      let mut _12: &[&str; 3];
      let _13: &[&str; 3];
      let _14: [&str; 3];
      let mut _15: &[core::fmt::rt::Argument<'_>; 2];
      let _16: &[core::fmt::rt::Argument<'_>; 2];
      let _17: [core::fmt::rt::Argument<'_>; 2];
      let mut _18: (&std::boxed::Box<dyn std::fmt::Display>, &u32);
      let mut _19: &std::boxed::Box<dyn std::fmt::Display>;
      let mut _20: &u32;
      let mut _22: core::fmt::rt::Argument<'_>;
      let mut _23: &std::boxed::Box<dyn std::fmt::Display>;
      let mut _24: core::fmt::rt::Argument<'_>;
      let mut _25: &u32;
      let mut _27: &std::boxed::Box<dyn std::fmt::Display>;
      let mut _28: &u32;
      let mut _29: bool;
      let mut _30: isize;
      let mut _31: isize;
      let mut _32: isize;
+     let _33: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>;
+     let _34: u32;
+     let mut _37: &std::boxed::Box<dyn std::fmt::Display>;
+     let mut _38: &u32;
      scope 1 {
-         debug foo => _1;
+         debug ((foo: Foo<T>).0: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>) => _33;
+         debug ((foo: Foo<T>).1: u32) => _34;
          let _5: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>;
          scope 2 {
              debug x => _5;
              let _6: u32;
              scope 3 {
                  debug y => _6;
                  scope 4 {
                      debug x => _8;
                      let _8: std::boxed::Box<dyn std::fmt::Display>;
                      let _21: (&std::boxed::Box<dyn std::fmt::Display>, &u32);
                      let mut _26: &[&str; 3];
+                     let _35: &std::boxed::Box<dyn std::fmt::Display>;
+                     let _36: &u32;
                      scope 5 {
-                         debug args => _21;
+                         debug ((args: (&Box<dyn std::fmt::Display>, &u32)).0: &std::boxed::Box<dyn std::fmt::Display>) => _35;
+                         debug ((args: (&Box<dyn std::fmt::Display>, &u32)).1: &u32) => _36;
                      }
                  }
              }
          }
      }
  
      bb0: {
          _29 = const false;
-         StorageLive(_1);
+         StorageLive(_33);
+         StorageLive(_34);
+         nop;
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_4);
          _4 = Box::<u32>::new(const 5_u32) -> [return: bb1, unwind unreachable];
      }
  
      bb1: {
          _3 = move _4 as std::boxed::Box<dyn std::fmt::Display> (PointerCoercion(Unsize, Implicit));
          StorageDead(_4);
          _2 = Result::<Box<dyn std::fmt::Display>, <T as Err>::Err>::Ok(move _3);
          StorageDead(_3);
-         _1 = Foo::<T> { x: move _2, y: const 7_u32 };
+         _33 = move _2;
+         _34 = const 7_u32;
+         nop;
          StorageDead(_2);
          StorageLive(_5);
          _29 = const true;
-         _5 = move (_1.0: std::result::Result<std::boxed::Box<dyn std::fmt::Display>, <T as Err>::Err>);
+         _5 = move _33;
          StorageLive(_6);
-         _6 = copy (_1.1: u32);
+         _6 = copy _34;
          _7 = discriminant(_5);
          switchInt(move _7) -> [0: bb2, otherwise: bb7];
      }
  
      bb2: {
          StorageLive(_8);
          _29 = const false;
          _8 = move ((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>);
          StorageLive(_9);
          StorageLive(_10);
          StorageLive(_11);
          StorageLive(_12);
          StorageLive(_13);
          _26 = const foo::<T>::promoted[0];
          _13 = &(*_26);
          _12 = &(*_13);
          StorageLive(_15);
          StorageLive(_16);
          StorageLive(_17);
-         StorageLive(_18);
+         StorageLive(_37);
+         StorageLive(_38);
+         nop;
          StorageLive(_19);
          _19 = &_8;
          StorageLive(_20);
          _20 = &_6;
-         _18 = (move _19, move _20);
+         _37 = move _19;
+         _38 = move _20;
+         nop;
          StorageDead(_20);
          StorageDead(_19);
-         StorageLive(_21);
-         _21 = copy _18;
+         StorageLive(_35);
+         StorageLive(_36);
+         nop;
+         _35 = copy _37;
+         _36 = copy _38;
+         nop;
          StorageLive(_22);
          StorageLive(_23);
-         _27 = deref_copy (_21.0: &std::boxed::Box<dyn std::fmt::Display>);
+         _27 = deref_copy _35;
          _23 = &(*_27);
          _22 = core::fmt::rt::Argument::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _23) -> [return: bb3, unwind unreachable];
      }
  
      bb3: {
          StorageDead(_23);
          StorageLive(_24);
          StorageLive(_25);
-         _28 = deref_copy (_21.1: &u32);
+         _28 = deref_copy _36;
          _25 = &(*_28);
          _24 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _25) -> [return: bb4, unwind unreachable];
      }
  
      bb4: {
          StorageDead(_25);
          _17 = [move _22, move _24];
          StorageDead(_24);
          StorageDead(_22);
-         StorageDead(_21);
+         StorageDead(_35);
+         StorageDead(_36);
+         nop;
          _16 = &_17;
          _15 = &(*_16);
          _11 = Arguments::<'_>::new_v1::<3, 2>(move _12, move _15) -> [return: bb5, unwind unreachable];
      }
  
      bb5: {
          StorageDead(_15);
          StorageDead(_12);
          _10 = _eprint(move _11) -> [return: bb6, unwind unreachable];
      }
  
      bb6: {
          StorageDead(_11);
-         StorageDead(_18);
+         StorageDead(_37);
+         StorageDead(_38);
+         nop;
          StorageDead(_17);
          StorageDead(_16);
          StorageDead(_13);
          StorageDead(_10);
          _9 = const ();
          StorageDead(_9);
          _0 = const ();
          drop(_8) -> [return: bb8, unwind unreachable];
      }
  
      bb7: {
          _0 = const ();
          goto -> bb9;
      }
  
      bb8: {
          StorageDead(_8);
          goto -> bb9;
      }
  
      bb9: {
          StorageDead(_6);
          _30 = discriminant(_5);
          switchInt(move _30) -> [0: bb11, otherwise: bb13];
      }
  
      bb10: {
          _29 = const false;
          StorageDead(_5);
-         StorageDead(_1);
+         StorageDead(_33);
+         StorageDead(_34);
+         nop;
          return;
      }
  
      bb11: {
          switchInt(copy _29) -> [0: bb10, otherwise: bb12];
      }
  
      bb12: {
          drop(((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>)) -> [return: bb10, unwind unreachable];
      }
  
      bb13: {
          drop(_5) -> [return: bb10, unwind unreachable];
      }
  }
  
