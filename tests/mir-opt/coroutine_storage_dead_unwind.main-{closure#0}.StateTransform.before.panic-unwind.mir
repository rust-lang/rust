// MIR for `main::{closure#0}` before StateTransform

fn main::{closure#0}(_1: {coroutine@$DIR/coroutine_storage_dead_unwind.rs:24:5: 24:7}, _2: ()) -> ()
yields ()
 {
    let mut _0: ();
    let _3: Foo;
    let _5: ();
    let _6: ();
    let mut _7: Foo;
    let _8: ();
    scope 1 {
        debug a => _3;
        let _4: Bar;
        scope 2 {
            debug b => _4;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Foo(const 5_i32);
        _4 = Bar(const 6_i32);
        StorageLive(_5);
        _5 = yield(const ()) -> [resume: bb1, drop: bb5];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = move _3;
        _6 = take::<Foo>(move _7) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_8);
        _8 = take::<Bar>(move _4) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        StorageDead(_8);
        _0 = const ();
        StorageDead(_3);
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5: {
        StorageDead(_5);
        drop(_3) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        StorageDead(_3);
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        coroutine_drop;
    }

    bb8 (cleanup): {
        StorageDead(_8);
        goto -> bb10;
    }

    bb9 (cleanup): {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb10;
    }

    bb10 (cleanup): {
        StorageDead(_3);
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        StorageDead(_3);
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }
}
