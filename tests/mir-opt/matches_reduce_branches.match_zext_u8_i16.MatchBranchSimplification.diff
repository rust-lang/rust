- // MIR for `match_zext_u8_i16` before MatchBranchSimplification
+ // MIR for `match_zext_u8_i16` after MatchBranchSimplification
  
  fn match_zext_u8_i16(_1: EnumAu8) -> i16 {
      debug i => _1;
      let mut _0: i16;
      let mut _2: u8;
+     let mut _3: u8;
  
      bb0: {
          _2 = discriminant(_1);
-         switchInt(move _2) -> [0: bb5, 127: bb4, 128: bb3, 255: bb2, otherwise: bb1];
-     }
- 
-     bb1: {
-         unreachable;
-     }
- 
-     bb2: {
-         _0 = const 255_i16;
-         goto -> bb6;
-     }
- 
-     bb3: {
-         _0 = const 128_i16;
-         goto -> bb6;
-     }
- 
-     bb4: {
-         _0 = const 127_i16;
-         goto -> bb6;
-     }
- 
-     bb5: {
-         _0 = const 0_i16;
-         goto -> bb6;
-     }
- 
-     bb6: {
+         StorageLive(_3);
+         _3 = move _2;
+         _0 = copy _3 as i16 (IntToInt);
+         StorageDead(_3);
          return;
      }
  }
  
