warning: this function depends on never type fallback being `()`
  --> $DIR/never-type-fallback-breaking.rs:18:1
   |
LL | fn m() {
   | ^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/never-type-fallback-breaking.rs:22:17
   |
LL |         true => Default::default(),
   |                 ^^^^^^^^^^^^^^^^^^
   = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default
help: use `()` annotations to avoid fallback changes
   |
LL |     let x: () = match true {
   |          ++++

warning: this function depends on never type fallback being `()`
  --> $DIR/never-type-fallback-breaking.rs:30:1
   |
LL | fn q() -> Option<()> {
   | ^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/never-type-fallback-breaking.rs:37:5
   |
LL |     deserialize()?;
   |     ^^^^^^^^^^^^^
help: use `()` annotations to avoid fallback changes
   |
LL |     deserialize::<()>()?;
   |                ++++++

warning: this function depends on never type fallback being `()`
  --> $DIR/never-type-fallback-breaking.rs:47:1
   |
LL | fn meow() -> Result<(), ()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `(): From<!>` will fail
  --> $DIR/never-type-fallback-breaking.rs:50:5
   |
LL |     help(1)?;
   |     ^^^^^^^
help: use `()` annotations to avoid fallback changes
   |
LL |     help::<(), _>(1)?;
   |         +++++++++

warning: this function depends on never type fallback being `()`
  --> $DIR/never-type-fallback-breaking.rs:59:1
   |
LL | pub fn fallback_return() -> Result<(), ()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/never-type-fallback-breaking.rs:62:19
   |
LL |     takes_apit(|| Default::default())?;
   |                   ^^^^^^^^^^^^^^^^^^
help: use `()` annotations to avoid fallback changes
   |
LL |     takes_apit::<()>(|| Default::default())?;
   |               ++++++

warning: this function depends on never type fallback being `()`
  --> $DIR/never-type-fallback-breaking.rs:73:1
   |
LL | fn fully_apit() -> Result<(), ()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/never-type-fallback-breaking.rs:76:17
   |
LL |     takes_apit2(mk()?);
   |                 ^^^^^
help: use `()` annotations to avoid fallback changes
   |
LL |     takes_apit2(mk::<()>()?);
   |                   ++++++

warning: 5 warnings emitted

