error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:25:13
   |
LL |     let Foo(mut x) = &Foo(0);
   |             ^^^ requires binding by-value, but the implicit default is by-reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the lint level is defined here
  --> $DIR/migration_lint.rs:7:9
   |
LL | #![deny(rust_2024_incompatible_pat)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
help: make the implied reference pattern explicit
   |
LL |     let &Foo(mut x) = &Foo(0);
   |         +

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:30:13
   |
LL |     let Foo(mut x) = &mut Foo(0);
   |             ^^^ requires binding by-value, but the implicit default is by-reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern explicit
   |
LL |     let &mut Foo(mut x) = &mut Foo(0);
   |         ++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:35:13
   |
LL |     let Foo(ref x) = &Foo(0);
   |             ^^^ cannot override to bind by-reference when that is the implicit default
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern explicit
   |
LL |     let &Foo(ref x) = &Foo(0);
   |         +

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:40:13
   |
LL |     let Foo(ref x) = &mut Foo(0);
   |             ^^^ cannot override to bind by-reference when that is the implicit default
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern explicit
   |
LL |     let &mut Foo(ref x) = &mut Foo(0);
   |         ++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:57:13
   |
LL |     let Foo(&x) = &Foo(&0);
   |             ^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern explicit
   |
LL |     let &Foo(&x) = &Foo(&0);
   |         +

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:62:13
   |
LL |     let Foo(&mut x) = &Foo(&mut 0);
   |             ^^^^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern explicit
   |
LL |     let &Foo(&mut x) = &Foo(&mut 0);
   |         +

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:67:13
   |
LL |     let Foo(&x) = &mut Foo(&0);
   |             ^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern explicit
   |
LL |     let &mut Foo(&x) = &mut Foo(&0);
   |         ++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:72:13
   |
LL |     let Foo(&mut x) = &mut Foo(&mut 0);
   |             ^^^^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern explicit
   |
LL |     let &mut Foo(&mut x) = &mut Foo(&mut 0);
   |         ++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:81:17
   |
LL |     if let Some(&x) = &&&&&Some(&0u8) {
   |                 ^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference patterns explicit
   |
LL |     if let &&&&&Some(&x) = &&&&&Some(&0u8) {
   |            +++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:87:17
   |
LL |     if let Some(&mut x) = &&&&&Some(&mut 0u8) {
   |                 ^^^^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference patterns explicit
   |
LL |     if let &&&&&Some(&mut x) = &&&&&Some(&mut 0u8) {
   |            +++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:93:17
   |
LL |     if let Some(&x) = &&&&&mut Some(&0u8) {
   |                 ^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference patterns explicit
   |
LL |     if let &&&&&mut Some(&x) = &&&&&mut Some(&0u8) {
   |            ++++++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:99:17
   |
LL |     if let Some(&mut Some(Some(x))) = &mut Some(&mut Some(&mut Some(0u8))) {
   |                 ^^^^ cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference patterns and variable binding mode explicit
   |
LL |     if let &mut Some(&mut Some(&mut Some(ref mut x))) = &mut Some(&mut Some(&mut Some(0u8))) {
   |            ++++                ++++      +++++++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:111:21
   |
LL |     let Struct { a, mut b, c } = &Struct { a: 0, b: 0, c: 0 };
   |                     ^^^ requires binding by-value, but the implicit default is by-reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern and variable binding modes explicit
   |
LL |     let &Struct { ref a, mut b, ref c } = &Struct { a: 0, b: 0, c: 0 };
   |         +         +++           +++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:117:21
   |
LL |     let Struct { a: &a, b, ref c } = &Struct { a: &0, b: &0, c: &0 };
   |                     ^      ^^^ cannot override to bind by-reference when that is the implicit default
   |                     |
   |                     cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference pattern and variable binding mode explicit
   |
LL |     let &Struct { a: &a, ref b, ref c } = &Struct { a: &0, b: &0, c: &0 };
   |         +                +++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:124:24
   |
LL |     if let Struct { a: &Some(a), b: Some(&b), c: Some(c) } =
   |                        ^                 ^ cannot implicitly match against multiple layers of reference
   |                        |
   |                        cannot implicitly match against multiple layers of reference
   |
   = warning: this changes meaning in Rust 2024
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
help: make the implied reference patterns and variable binding mode explicit
   |
LL |     if let &Struct { a: &Some(a), b: &Some(&b), c: &Some(ref c) } =
   |            +                         +             +     +++

error: this pattern relies on behavior which may change in edition 2024
  --> $DIR/migration_lint.rs:137:15
   |
LL |         (Some(mut x), migration_lint_macros::mixed_edition_pat!(y)) => {
   |               ^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ default binding mode is reset within expansion
   |               |
   |               requires binding by-value, but the implicit default is by-reference
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
   = note: this error originates in the macro `migration_lint_macros::mixed_edition_pat` (in Nightly builds, run with -Z macro-backtrace for more info)
help: make the implied reference pattern explicit
   |
LL |         &(Some(mut x), migration_lint_macros::mixed_edition_pat!(y)) => {
   |         +

error: aborting due to 16 previous errors

