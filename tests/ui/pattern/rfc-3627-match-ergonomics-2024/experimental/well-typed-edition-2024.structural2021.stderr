error[E0308]: mismatched types
  --> $DIR/well-typed-edition-2024.rs:34:23
   |
LL |     if let Some(Some(&&x)) = &Some(Some(&0)) {
   |                       ^^     --------------- this expression has type `&Option<Option<&{integer}>>`
   |                       |
   |                       expected integer, found `&_`
   |
   = note:   expected type `{integer}`
           found reference `&_`
help: consider removing `&` from the pattern
   |
LL -     if let Some(Some(&&x)) = &Some(Some(&0)) {
LL +     if let Some(Some(&x)) = &Some(Some(&0)) {
   |

error[E0308]: mismatched types
  --> $DIR/well-typed-edition-2024.rs:65:23
   |
LL |     if let Some(&Some(&x)) = &Some(&Some(0)) {
   |                       ^^     --------------- this expression has type `&Option<&Option<{integer}>>`
   |                       |
   |                       expected integer, found `&_`
   |
   = note:   expected type `{integer}`
           found reference `&_`
help: consider removing `&` from the pattern
   |
LL -     if let Some(&Some(&x)) = &Some(&Some(0)) {
LL +     if let Some(&Some(x)) = &Some(&Some(0)) {
   |

error[E0308]: mismatched types
  --> $DIR/well-typed-edition-2024.rs:84:23
   |
LL |     if let Some(&Some(&x)) = &Some(&mut Some(0)) {
   |                       ^^     ------------------- this expression has type `&Option<&mut Option<{integer}>>`
   |                       |
   |                       expected integer, found `&_`
   |
   = note:   expected type `{integer}`
           found reference `&_`
help: consider removing `&` from the pattern
   |
LL -     if let Some(&Some(&x)) = &Some(&mut Some(0)) {
LL +     if let Some(&Some(x)) = &Some(&mut Some(0)) {
   |

error[E0308]: mismatched types
  --> $DIR/well-typed-edition-2024.rs:90:23
   |
LL |     if let Some(&Some(&x)) = &mut Some(&Some(0)) {
   |                       ^^     ------------------- this expression has type `&mut Option<&Option<{integer}>>`
   |                       |
   |                       expected integer, found `&_`
   |
   = note:   expected type `{integer}`
           found reference `&_`
help: consider removing `&` from the pattern
   |
LL -     if let Some(&Some(&x)) = &mut Some(&Some(0)) {
LL +     if let Some(&Some(x)) = &mut Some(&Some(0)) {
   |

error[E0308]: mismatched types
  --> $DIR/well-typed-edition-2024.rs:125:15
   |
LL |     let [&mut &x] = &mut [&0];
   |               ^^    --------- this expression has type `&mut [&{integer}; 1]`
   |               |
   |               expected integer, found `&_`
   |
   = note:   expected type `{integer}`
           found reference `&_`
help: consider removing `&` from the pattern
   |
LL -     let [&mut &x] = &mut [&0];
LL +     let [&mut x] = &mut [&0];
   |

error[E0308]: mismatched types
  --> $DIR/well-typed-edition-2024.rs:131:15
   |
LL |     let [&mut &ref x] = &mut [&0];
   |               ^^^^^^    --------- this expression has type `&mut [&{integer}; 1]`
   |               |
   |               expected integer, found `&_`
   |
   = note:   expected type `{integer}`
           found reference `&_`
help: consider removing `&` from the pattern
   |
LL -     let [&mut &ref x] = &mut [&0];
LL +     let [&mut ref x] = &mut [&0];
   |

error[E0308]: mismatched types
  --> $DIR/well-typed-edition-2024.rs:137:15
   |
LL |     let [&mut &(mut x)] = &mut [&0];
   |               ^^^^^^^^    --------- this expression has type `&mut [&{integer}; 1]`
   |               |
   |               expected integer, found `&_`
   |
   = note:   expected type `{integer}`
           found reference `&_`
help: consider removing `&` from the pattern
   |
LL -     let [&mut &(mut x)] = &mut [&0];
LL +     let [&mut mut x)] = &mut [&0];
   |

error[E0596]: cannot borrow data in a `&` reference as mutable
  --> $DIR/well-typed-edition-2024.rs:111:19
   |
LL |         let [&mut ref mut x] = &mut [&0];
   |                   ^^^^^^^^^ cannot borrow as mutable

error: aborting due to 8 previous errors

Some errors have detailed explanations: E0308, E0596.
For more information about an error, try `rustc --explain E0308`.
