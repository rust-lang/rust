error[E0004]: non-exhaustive patterns: `(true, false)` not covered
  --> $DIR/match-arm-statics-2.rs:17:11
   |
LL |     match (true, false) {
   |           ^^^^^^^^^^^^^ pattern `(true, false)` not covered
LL |
LL |         TRUE_TRUE => (),
   |         --------- this pattern doesn't introduce a new catch-all binding, but rather pattern matches against the value of constant `TRUE_TRUE`
   |
   = note: the matched value is of type `(bool, bool)`
note: constant `TRUE_TRUE` defined here
  --> $DIR/match-arm-statics-2.rs:14:1
   |
LL | const TRUE_TRUE: (bool, bool) = (true, true);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: if you meant to introduce a binding, use a different name
   |
LL |         TRUE_TRUE_var => (),
   |                  ++++
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         (false, true) => (),
LL +         (true, false) => todo!()
   |

error[E0004]: non-exhaustive patterns: `Some(Some(Direction::West))` not covered
  --> $DIR/match-arm-statics-2.rs:29:11
   |
LL |     match Some(Some(North)) {
   |           ^^^^^^^^^^^^^^^^^ pattern `Some(Some(Direction::West))` not covered
   |
note: `Option<Option<Direction>>` defined here
  --> $SRC_DIR/core/src/option.rs:LL:COL
  ::: $SRC_DIR/core/src/option.rs:LL:COL
   |
   = note: not covered
   |
   = note: not covered
   = note: the matched value is of type `Option<Option<Direction>>`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         None => (),
LL +         Some(Some(Direction::West)) => todo!()
   |

error[E0004]: non-exhaustive patterns: `Foo { bar: Some(Direction::North), baz: NewBool(true) }` not covered
  --> $DIR/match-arm-statics-2.rs:48:11
   |
LL |     match (Foo { bar: Some(North), baz: NewBool(true) }) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { bar: Some(Direction::North), baz: NewBool(true) }` not covered
   |
note: `Foo` defined here
  --> $DIR/match-arm-statics-2.rs:40:8
   |
LL | struct Foo {
   |        ^^^
   = note: the matched value is of type `Foo`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Foo { bar: Some(EAST), .. } => (),
LL +         Foo { bar: Some(Direction::North), baz: NewBool(true) } => todo!()
   |

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0004`.
