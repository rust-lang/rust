error[E0004]: non-exhaustive patterns: `Foo { first: false, second: Some([0_usize, _, _, _]) }` and `Foo { first: false, second: Some([2_usize.., _, _, _]) }` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:7:11
   |
LL |     match (Foo { first: true, second: None }) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ patterns `Foo { first: false, second: Some([0_usize, _, _, _]) }` and `Foo { first: false, second: Some([2_usize.., _, _, _]) }` not covered
   |
note: `Foo` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:1:8
   |
LL | struct Foo {
   |        ^^^
   = note: the matched value is of type `Foo`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
   |
LL ~         Foo { first: false, second: Some([1, 2, 3, 4]) } => (),
LL ~         Foo { first: false, second: Some([0_usize, _, _, _]) } | Foo { first: false, second: Some([2_usize.., _, _, _]) } => todo!(),
   |

error[E0004]: non-exhaustive patterns: `Color::Red` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:23:11
   |
LL |     match Color::Red {
   |           ^^^^^^^^^^ pattern `Color::Red` not covered
   |
note: `Color` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:16:6
   |
LL | enum Color {
   |      ^^^^^
LL |     Red,
   |     --- not covered
   = note: the matched value is of type `Color`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Color::Green => (),
LL ~         Color::Red => todo!(),
   |

error[E0004]: non-exhaustive patterns: `Direction::East`, `Direction::South` and `Direction::West` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:38:11
   |
LL |     match Direction::North {
   |           ^^^^^^^^^^^^^^^^ patterns `Direction::East`, `Direction::South` and `Direction::West` not covered
   |
note: `Direction` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:30:6
   |
LL | enum Direction {
   |      ^^^^^^^^^
LL |     North,
LL |     East,
   |     ---- not covered
LL |     South,
   |     ----- not covered
LL |     West,
   |     ---- not covered
   = note: the matched value is of type `Direction`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern, a match arm with multiple or-patterns as shown, or multiple match arms
   |
LL ~         Direction::North => (),
LL ~         Direction::East | Direction::South | Direction::West => todo!(),
   |

error[E0004]: non-exhaustive patterns: `ExcessiveEnum::Second`, `ExcessiveEnum::Third`, `ExcessiveEnum::Fourth` and 8 more not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:60:11
   |
LL |     match ExcessiveEnum::First {
   |           ^^^^^^^^^^^^^^^^^^^^ patterns `ExcessiveEnum::Second`, `ExcessiveEnum::Third`, `ExcessiveEnum::Fourth` and 8 more not covered
   |
note: `ExcessiveEnum` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:44:6
   |
LL | enum ExcessiveEnum {
   |      ^^^^^^^^^^^^^
LL |     First,
LL |     Second,
   |     ------ not covered
LL |     Third,
   |     ----- not covered
LL |     Fourth,
   |     ------ not covered
LL |     Fifth,
   |     ----- not covered
LL |     Sixth,
   |     ----- not covered
   = note: the matched value is of type `ExcessiveEnum`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown, or multiple match arms
   |
LL ~         ExcessiveEnum::First => (),
LL ~         _ => todo!(),
   |

error[E0004]: non-exhaustive patterns: `Color::CustomRGBA { a: true, .. }` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:67:11
   |
LL |     match Color::Red {
   |           ^^^^^^^^^^ pattern `Color::CustomRGBA { a: true, .. }` not covered
   |
note: `Color` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:16:6
   |
LL | enum Color {
   |      ^^^^^
...
LL |     CustomRGBA { a: bool, r: u8, g: u8, b: u8 },
   |     ---------- not covered
   = note: the matched value is of type `Color`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Color::CustomRGBA { a: false, r: _, g: _, b: _ } => (),
LL ~         Color::CustomRGBA { a: true, .. } => todo!(),
   |

error[E0004]: non-exhaustive patterns: `[Enum::Second(true), Enum::Second(false)]` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:83:11
   |
LL |     match *x {
   |           ^^ pattern `[Enum::Second(true), Enum::Second(false)]` not covered
   |
   = note: the matched value is of type `[Enum]`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         [_, _, ref tail @ .., _] => (),
LL ~         [Enum::Second(true), Enum::Second(false)] => todo!(),
   |

error[E0004]: non-exhaustive patterns: `((), false)` not covered
  --> $DIR/non-exhaustive-pattern-witness.rs:96:11
   |
LL |     match ((), false) {
   |           ^^^^^^^^^^^ pattern `((), false)` not covered
   |
   = note: the matched value is of type `((), bool)`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         ((), true) => (),
LL ~         ((), false) => todo!(),
   |

error: aborting due to 7 previous errors

For more information about this error, try `rustc --explain E0004`.
