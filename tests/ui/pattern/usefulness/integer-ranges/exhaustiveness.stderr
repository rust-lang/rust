error[E0004]: non-exhaustive patterns: `u8::MAX` not covered
  --> $DIR/exhaustiveness.rs:47:8
   |
LL |     m!(0u8, 0..255);
   |        ^^^ pattern `u8::MAX` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u8::MAX` not covered
  --> $DIR/exhaustiveness.rs:48:8
   |
LL |     m!(0u8, 0..=254);
   |        ^^^ pattern `u8::MAX` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_u8` not covered
  --> $DIR/exhaustiveness.rs:49:8
   |
LL |     m!(0u8, 1..=255);
   |        ^^^ pattern `0_u8` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 0_u8 => todo!() }
   |                                +++++++++++++++++

error[E0004]: non-exhaustive patterns: `42_u8` not covered
  --> $DIR/exhaustiveness.rs:50:8
   |
LL |     m!(0u8, 0..42 | 43..=255);
   |        ^^^ pattern `42_u8` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 42_u8 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i8::MAX` not covered
  --> $DIR/exhaustiveness.rs:51:8
   |
LL |     m!(0i8, -128..127);
   |        ^^^ pattern `i8::MAX` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i8::MAX` not covered
  --> $DIR/exhaustiveness.rs:52:8
   |
LL |     m!(0i8, -128..=126);
   |        ^^^ pattern `i8::MAX` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i8::MIN` not covered
  --> $DIR/exhaustiveness.rs:53:8
   |
LL |     m!(0i8, -127..=127);
   |        ^^^ pattern `i8::MIN` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i8::MIN => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_i8` not covered
  --> $DIR/exhaustiveness.rs:54:11
   |
LL |     match 0i8 {
   |           ^^^ pattern `0_i8` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         1 ..= i8::MAX => {},
LL +         0_i8 => todo!()
   |

error[E0004]: non-exhaustive patterns: `u128::MAX` not covered
  --> $DIR/exhaustiveness.rs:59:8
   |
LL |     m!(0u128, 0..=ALMOST_MAX);
   |        ^^^^^ pattern `u128::MAX` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }
   |                                ++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `5_u128..` not covered
  --> $DIR/exhaustiveness.rs:60:8
   |
LL |     m!(0u128, 0..=4);
   |        ^^^^^ pattern `5_u128..` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 5_u128.. => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_u128` not covered
  --> $DIR/exhaustiveness.rs:61:8
   |
LL |     m!(0u128, 1..=u128::MAX);
   |        ^^^^^ pattern `0_u128` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 0_u128 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered
  --> $DIR/exhaustiveness.rs:69:11
   |
LL |     match (0u8, true) {
   |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered
   |
   = note: the matched value is of type `(u8, bool)`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         (0 ..= 255, true) => {},
LL +         (126_u8..=127_u8, false) => todo!()
   |

error: aborting due to 12 previous errors

For more information about this error, try `rustc --explain E0004`.
