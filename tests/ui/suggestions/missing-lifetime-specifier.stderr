error[E0106]: missing lifetime specifiers
  --> $DIR/missing-lifetime-specifier.rs:27:44
   |
LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());
   |                                            ^^^ expected 2 lifetime parameters
   |
   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`, or if you will only have owned values
   |
LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());
   |                                               ++++++++++++++++++

error[E0106]: missing lifetime specifiers
  --> $DIR/missing-lifetime-specifier.rs:31:44
   |
LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());
   |                                            ^^^^ expected 2 lifetime parameters
   |                                            |
   |                                            expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`
   |
LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());
   |                                             +++++++    ++++++++++++++++++

error[E0106]: missing lifetime specifiers
  --> $DIR/missing-lifetime-specifier.rs:35:47
   |
LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());
   |                                               ^ expected 2 lifetime parameters
   |
   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`, or if you will only have owned values
   |
LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                                +++++++++++++++++

error[E0106]: missing lifetime specifiers
  --> $DIR/missing-lifetime-specifier.rs:39:44
   |
LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());
   |                                            ^   ^ expected 2 lifetime parameters
   |                                            |
   |                                            expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`
   |
LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                             +++++++     +++++++++++++++++

error[E0106]: missing lifetime specifier
  --> $DIR/missing-lifetime-specifier.rs:48:44
   |
LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                            ^ expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`
   |
LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                             +++++++

error[E0107]: union takes 2 lifetime arguments but 1 lifetime argument was supplied
  --> $DIR/missing-lifetime-specifier.rs:44:44
   |
LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                            ^^^ ------- supplied 1 lifetime argument
   |                                            |
   |                                            expected 2 lifetime arguments
   |
note: union defined here, with 2 lifetime parameters: `'t`, `'k`
  --> $DIR/missing-lifetime-specifier.rs:20:11
   |
LL | pub union Qux<'t, 'k, I> {
   |           ^^^ --  --
help: add missing lifetime argument
   |
LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                                       +++++++++

error[E0107]: trait takes 2 lifetime arguments but 1 lifetime argument was supplied
  --> $DIR/missing-lifetime-specifier.rs:48:45
   |
LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                             ^^^ ------- supplied 1 lifetime argument
   |                                             |
   |                                             expected 2 lifetime arguments
   |
note: trait defined here, with 2 lifetime parameters: `'t`, `'k`
  --> $DIR/missing-lifetime-specifier.rs:24:7
   |
LL | trait Tar<'t, 'k, I> {}
   |       ^^^ --  --
help: add missing lifetime argument
   |
LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());
   |                                                        +++++++++

error: aborting due to 7 previous errors

Some errors have detailed explanations: E0106, E0107.
For more information about an error, try `rustc --explain E0106`.
