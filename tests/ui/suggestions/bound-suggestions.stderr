error[E0277]: the trait bound `T: MyTrait` is not satisfied
  --> $DIR/bound-suggestions.rs:72:30
   |
LL |     fn method<T: MyTrait, W: super::Wrapper<T>>() {}
   |                              ^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `T`
   |
note: required by a bound in `Wrapper`
  --> $DIR/bound-suggestions.rs:66:18
   |
LL | trait Wrapper<T: MyTrait> {}
   |                  ^^^^^^^ required by this bound in `Wrapper`
help: consider further restricting type parameter `T` with trait `MyTrait`
   |
LL |     fn method<T: MyTrait + crate::MyTrait, W: super::Wrapper<T>>() {}
   |                          ++++++++++++++++

error[E0277]: `impl Sized` doesn't implement `Debug`
  --> $DIR/bound-suggestions.rs:10:22
   |
LL |     println!("{:?}", t);
   |               ----   ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `Debug`
   |               |
   |               required by this formatting parameter
   |
   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider restricting opaque type `impl Sized` with trait `Debug`
   |
LL | fn test_impl(t: impl Sized + std::fmt::Debug) {
   |                            +++++++++++++++++

error[E0277]: `T` doesn't implement `Debug`
  --> $DIR/bound-suggestions.rs:15:22
   |
LL |     println!("{:?}", t);
   |               ----   ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`
   |               |
   |               required by this formatting parameter
   |
   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider restricting type parameter `T` with trait `Debug`
   |
LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {
   |                    +++++++++++++++++

error[E0277]: `T` doesn't implement `Debug`
  --> $DIR/bound-suggestions.rs:20:22
   |
LL |     println!("{:?}", t);
   |               ----   ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`
   |               |
   |               required by this formatting parameter
   |
   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting type parameter `T` with trait `Debug`
   |
LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {
   |                            +++++++++++++++++

error[E0277]: `Y` doesn't implement `Debug`
  --> $DIR/bound-suggestions.rs:25:30
   |
LL |     println!("{:?} {:?}", x, y);
   |                    ----      ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `Debug`
   |                    |
   |                    required by this formatting parameter
   |
   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting type parameter `Y` with trait `Debug`
   |
LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {
   |                                                                     ++++++++++++++++++

error[E0277]: `X` doesn't implement `Debug`
  --> $DIR/bound-suggestions.rs:30:22
   |
LL |     println!("{:?}", x);
   |               ----   ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`
   |               |
   |               required by this formatting parameter
   |
   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting type parameter `X` with trait `Debug`
   |
LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {
   |                                                 +++++++++++++++++

error[E0277]: `X` doesn't implement `Debug`
  --> $DIR/bound-suggestions.rs:35:22
   |
LL |     println!("{:?}", x);
   |               ----   ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`
   |               |
   |               required by this formatting parameter
   |
   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting type parameter `X` with trait `Debug`
   |
LL | fn test_many_bounds_where<X>(x: X) where X: Sized + std::fmt::Debug, X: Sized {
   |                                                   +++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/bound-suggestions.rs:40:46
   |
LL |     const SIZE: usize = core::mem::size_of::<Self>();
   |                                              ^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `std::mem::size_of`
  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL
help: consider further restricting `Self`
   |
LL | trait Foo<T>: std::marker::Sized {
   |             ++++++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/bound-suggestions.rs:45:46
   |
LL |     const SIZE: usize = core::mem::size_of::<Self>();
   |                                              ^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `std::mem::size_of`
  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL
help: consider further restricting `Self`
   |
LL | trait Bar: std::fmt::Display + std::marker::Sized {
   |                              ++++++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/bound-suggestions.rs:50:46
   |
LL |     const SIZE: usize = core::mem::size_of::<Self>();
   |                                              ^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `std::mem::size_of`
  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL
help: consider further restricting `Self`
   |
LL | trait Baz: std::marker::Sized where Self: std::fmt::Display {
   |          ++++++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/bound-suggestions.rs:55:46
   |
LL |     const SIZE: usize = core::mem::size_of::<Self>();
   |                                              ^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `std::mem::size_of`
  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL
help: consider further restricting `Self`
   |
LL | trait Qux<T>: std::marker::Sized where Self: std::fmt::Display {
   |             ++++++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/bound-suggestions.rs:60:46
   |
LL |     const SIZE: usize = core::mem::size_of::<Self>();
   |                                              ^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `std::mem::size_of`
  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL
help: consider further restricting `Self`
   |
LL | trait Bat<T>: std::fmt::Display + std::marker::Sized {
   |                                 ++++++++++++++++++++

error: aborting due to 12 previous errors

For more information about this error, try `rustc --explain E0277`.
