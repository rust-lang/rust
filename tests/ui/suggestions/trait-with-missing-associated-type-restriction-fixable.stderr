error[E0308]: mismatched types
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:13:13
   |
LL |         qux(x.func())
   |         --- ^^^^^^^^ expected `usize`, found associated type
   |         |
   |         arguments to this function are incorrect
   |
   = note:         expected type `usize`
           found associated type `<impl Trait as Trait>::A`
note: function defined here
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4
   |
LL | fn qux(_: usize) {}
   |    ^^^ --------
help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`
   |
LL |     fn foo<'a, T: Trait + 'a>(&self, _: impl Trait, x: impl Trait<A = usize>, _: T) {
   |                                                                  +++++++++++

error[E0308]: mismatched types
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:17:13
   |
LL |         qux(x.func())
   |         --- ^^^^^^^^ expected `usize`, found associated type
   |         |
   |         arguments to this function are incorrect
   |
   = note:         expected type `usize`
           found associated type `<T as Trait>::A`
note: function defined here
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4
   |
LL | fn qux(_: usize) {}
   |    ^^^ --------
help: consider constraining the associated type `<T as Trait>::A` to `usize`
   |
LL |     fn ban<T>(x: T) where T: Trait<A = usize> {
   |                                   +++++++++++

error[E0308]: mismatched types
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:22:9
   |
LL |     qux(x.func())
   |     --- ^^^^^^^^ expected `usize`, found associated type
   |     |
   |     arguments to this function are incorrect
   |
   = note:         expected type `usize`
           found associated type `<impl Trait as Trait>::A`
note: function defined here
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4
   |
LL | fn qux(_: usize) {}
   |    ^^^ --------
help: consider constraining the associated type `<impl Trait as Trait>::A` to `usize`
   |
LL | fn foo<'a, T: Trait + 'a>(_: impl Trait, x: impl Trait<A = usize>, _: T) {
   |                                                       +++++++++++

error[E0308]: mismatched types
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:26:9
   |
LL |     qux(x.func())
   |     --- ^^^^^^^^ expected `usize`, found associated type
   |     |
   |     arguments to this function are incorrect
   |
   = note:         expected type `usize`
           found associated type `<T as Trait>::A`
note: function defined here
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4
   |
LL | fn qux(_: usize) {}
   |    ^^^ --------
help: consider constraining the associated type `<T as Trait>::A` to `usize`
   |
LL | fn bar<T: Trait<A = usize>>(x: T) {
   |                +++++++++++

error[E0308]: mismatched types
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:30:9
   |
LL |     qux(x.func())
   |     --- ^^^^^^^^ expected `usize`, found associated type
   |     |
   |     arguments to this function are incorrect
   |
   = note:         expected type `usize`
           found associated type `<impl Trait<i32> as Trait<i32>>::A`
note: function defined here
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4
   |
LL | fn qux(_: usize) {}
   |    ^^^ --------
help: consider constraining the associated type `<impl Trait<i32> as Trait<i32>>::A` to `usize`
   |
LL | fn foo2(x: impl Trait<i32, A = usize>) {
   |                          +++++++++++

error[E0308]: mismatched types
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:34:9
   |
LL |     qux(x.func())
   |     --- ^^^^^^^^ expected `usize`, found associated type
   |     |
   |     arguments to this function are incorrect
   |
   = note:         expected type `usize`
           found associated type `<T as Trait<i32>>::A`
note: function defined here
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4
   |
LL | fn qux(_: usize) {}
   |    ^^^ --------
help: consider constraining the associated type `<T as Trait<i32>>::A` to `usize`
   |
LL | fn bar2<T: Trait<i32, A = usize>>(x: T) {
   |                     +++++++++++

error[E0308]: mismatched types
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:38:9
   |
LL |     qux(x.func())
   |     --- ^^^^^^^^ expected `usize`, found associated type
   |     |
   |     arguments to this function are incorrect
   |
   = note:         expected type `usize`
           found associated type `<T as Trait>::A`
note: function defined here
  --> $DIR/trait-with-missing-associated-type-restriction-fixable.rs:41:4
   |
LL | fn qux(_: usize) {}
   |    ^^^ --------
help: consider constraining the associated type `<T as Trait>::A` to `usize`
   |
LL | fn ban<T>(x: T) where T: Trait<A = usize> {
   |                               +++++++++++

error: aborting due to 7 previous errors

For more information about this error, try `rustc --explain E0308`.
