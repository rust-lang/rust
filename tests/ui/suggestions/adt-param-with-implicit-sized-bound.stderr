error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9
   |
LL | struct Struct5<T: ?Sized>{
   |                - this type parameter needs to be `Sized`
LL |     _t: X<T>,
   |         ^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `X`
  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10
   |
LL | struct X<T>(T);
   |          ^ required by the implicit `Sized` requirement on this type parameter in `X`
help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`
  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10
   |
LL | struct X<T>(T);
   |          ^  - ...if indirection were used here: `Box<T>`
   |          |
   |          this could be changed to `T: ?Sized`...
help: consider removing the `?Sized` bound to make the type parameter `Sized`
   |
LL - struct Struct5<T: ?Sized>{
LL + struct Struct5<T>{
   |

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/adt-param-with-implicit-sized-bound.rs:2:19
   |
LL |     fn func1() -> Struct1<Self>;
   |                   ^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `Struct1`
  --> $DIR/adt-param-with-implicit-sized-bound.rs:8:16
   |
LL | struct Struct1<T>{
   |                ^ required by the implicit `Sized` requirement on this type parameter in `Struct1`
help: consider further restricting `Self`
   |
LL |     fn func1() -> Struct1<Self> where Self: Sized;
   |                                 +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
   |
LL | struct Struct1<T: ?Sized>{
   |                 ++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/adt-param-with-implicit-sized-bound.rs:3:23
   |
LL |     fn func2<'a>() -> Struct2<'a, Self>;
   |                       ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `Struct2`
  --> $DIR/adt-param-with-implicit-sized-bound.rs:11:20
   |
LL | struct Struct2<'a, T>{
   |                    ^ required by the implicit `Sized` requirement on this type parameter in `Struct2`
help: consider further restricting `Self`
   |
LL |     fn func2<'a>() -> Struct2<'a, Self> where Self: Sized;
   |                                         +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
   |
LL | struct Struct2<'a, T: ?Sized>{
   |                     ++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/adt-param-with-implicit-sized-bound.rs:4:19
   |
LL |     fn func3() -> Struct3<Self>;
   |                   ^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `Struct3`
  --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16
   |
LL | struct Struct3<T>{
   |                ^ required by the implicit `Sized` requirement on this type parameter in `Struct3`
help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`
  --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16
   |
LL | struct Struct3<T>{
   |                ^ this could be changed to `T: ?Sized`...
LL |     _t: T,
   |         - ...if indirection were used here: `Box<T>`
help: consider further restricting `Self`
   |
LL |     fn func3() -> Struct3<Self> where Self: Sized;
   |                                 +++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/adt-param-with-implicit-sized-bound.rs:5:19
   |
LL |     fn func4() -> Struct4<Self>;
   |                   ^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `Struct4`
  --> $DIR/adt-param-with-implicit-sized-bound.rs:20:16
   |
LL | struct Struct4<T>{
   |                ^ required by the implicit `Sized` requirement on this type parameter in `Struct4`
help: consider further restricting `Self`
   |
LL |     fn func4() -> Struct4<Self> where Self: Sized;
   |                                 +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
   |
LL | struct Struct4<T: ?Sized>{
   |                 ++++++++

error: aborting due to 5 previous errors

For more information about this error, try `rustc --explain E0277`.
