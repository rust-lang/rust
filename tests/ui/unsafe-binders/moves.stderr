error[E0423]: expected value, found type alias `NotCopy`
  --> $DIR/moves.rs:14:20
   |
LL |         let base = NotCopy;
   |                    ^^^^^^^
   |
   = note: can't use a type alias as a constructor

error[E0423]: expected value, found type alias `NotCopy`
  --> $DIR/moves.rs:23:53
   |
LL |         let binder: unsafe<> NotCopy = wrap_binder!(NotCopy);
   |                                                     ^^^^^^^
   |
   = note: can't use a type alias as a constructor

error[E0423]: expected value, found type alias `NotCopy`
  --> $DIR/moves.rs:32:65
   |
LL |         let binder: unsafe<> (NotCopy, NotCopy) = wrap_binder!((NotCopy, NotCopy));
   |                                                                 ^^^^^^^
   |
   = note: can't use a type alias as a constructor

error[E0423]: expected value, found type alias `NotCopy`
  --> $DIR/moves.rs:32:74
   |
LL |         let binder: unsafe<> (NotCopy, NotCopy) = wrap_binder!((NotCopy, NotCopy));
   |                                                                          ^^^^^^^
   |
   = note: can't use a type alias as a constructor

warning: the feature `unsafe_binders` is incomplete and may not be safe to use and/or cause compiler crashes
  --> $DIR/moves.rs:3:12
   |
LL | #![feature(unsafe_binders)]
   |            ^^^^^^^^^^^^^^
   |
   = note: see issue #130516 <https://github.com/rust-lang/rust/issues/130516> for more information
   = note: `#[warn(incomplete_features)]` on by default

error[E0277]: the trait bound `NotCopyInner: Copy` is not satisfied
  --> $DIR/moves.rs:15:21
   |
LL |         let binder: unsafe<> NotCopy = wrap_binder!(base);
   |                     ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `NotCopyInner`
   |
   = note: required for `ManuallyDrop<NotCopyInner>` to implement `Copy`
help: consider annotating `NotCopyInner` with `#[derive(Copy)]`
   |
LL + #[derive(Copy)]
LL | struct NotCopyInner;
   |

error[E0277]: the trait bound `NotCopyInner: Copy` is not satisfied
  --> $DIR/moves.rs:23:21
   |
LL |         let binder: unsafe<> NotCopy = wrap_binder!(NotCopy);
   |                     ^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `NotCopyInner`
   |
   = note: required for `ManuallyDrop<NotCopyInner>` to implement `Copy`
help: consider annotating `NotCopyInner` with `#[derive(Copy)]`
   |
LL + #[derive(Copy)]
LL | struct NotCopyInner;
   |

error[E0277]: the trait bound `NotCopyInner: Copy` is not satisfied
  --> $DIR/moves.rs:32:21
   |
LL |         let binder: unsafe<> (NotCopy, NotCopy) = wrap_binder!((NotCopy, NotCopy));
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `NotCopyInner`
   |
   = note: required for `ManuallyDrop<NotCopyInner>` to implement `Copy`
   = note: required because it appears within the type `(ManuallyDrop<NotCopyInner>, ManuallyDrop<NotCopyInner>)`
help: consider annotating `NotCopyInner` with `#[derive(Copy)]`
   |
LL + #[derive(Copy)]
LL | struct NotCopyInner;
   |

error: aborting due to 7 previous errors; 1 warning emitted

Some errors have detailed explanations: E0277, E0423.
For more information about an error, try `rustc --explain E0277`.
