error: future cannot be sent between threads safely
  --> $DIR/missing-send-bound.rs:13:20
   |
LL |     assert_is_send(test::<T>());
   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`
   |
   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()> { <T as Foo>::bar(..) }`
note: future is not `Send` as it awaits another future which is not `Send`
  --> $DIR/missing-send-bound.rs:9:5
   |
LL |     T::bar().await;
   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()> { <T as Foo>::bar(..) }`, which is not `Send`
note: required by a bound in `assert_is_send`
  --> $DIR/missing-send-bound.rs:17:27
   |
LL | fn assert_is_send(_: impl Send) {}
   |                           ^^^^ required by this bound in `assert_is_send`
help: consider further restricting the associated type
   |
LL | fn test2<T: Foo>() where <T as Foo>::bar(..): Send {
   |                    +++++++++++++++++++++++++++++++

error: aborting due to 1 previous error

