error[E0782]: expected a type, found a trait
  --> $DIR/ice-return-unsized-can-impl.rs:11:15
   |
LL |     fn g(new: B) -> B;
   |               ^
   |
   = note: `B` it is dyn-incompatible, so it can't be `dyn`
help: use a new generic type parameter, constrained by `B`
   |
LL |     fn g<T: B>(new: T) -> B;
   |         ++++++      ~
help: you can also use an opaque type, but users won't be able to specify the type parameter when calling the `fn`, having to rely exclusively on type inference
   |
LL |     fn g(new: impl B) -> B;
   |               ++++

error[E0782]: expected a type, found a trait
  --> $DIR/ice-return-unsized-can-impl.rs:11:21
   |
LL |     fn g(new: B) -> B;
   |                     ^
   |
help: `B` is dyn-incompatible, use `impl B` to return an opaque type, as long as you return a single underlying type
   |
LL |     fn g(new: B) -> impl B;
   |                     ++++

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0782`.
