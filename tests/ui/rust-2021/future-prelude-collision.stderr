warning: trait method `try_into` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:56:18
   |
LL |     let _: u32 = 3u8.try_into().unwrap();
   |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(3u8)`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>
note: the lint level is defined here
  --> $DIR/future-prelude-collision.rs:4:9
   |
LL | #![warn(rust_2021_prelude_collisions)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: trait-associated function `try_from` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:61:13
   |
LL |     let _ = u32::try_from(3u8).unwrap();
   |             ^^^^^^^^^^^^^ help: disambiguate the associated function: `<u32 as TryFromU8>::try_from`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>

warning: trait-associated function `from_iter` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:66:13
   |
LL |     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());
   |             ^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<u8> as FromByteIterator>::from_iter`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>

warning: trait-associated function `try_from` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:74:18
   |
LL |     let _: u32 = <_>::try_from(3u8).unwrap();
   |                  ^^^^^^^^^^^^^ help: disambiguate the associated function: `<_ as TryFromU8>::try_from`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>

warning: trait method `try_into` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:79:18
   |
LL |     let _: u32 = (&3u8).try_into().unwrap();
   |                  ^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(*(&3u8))`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>

warning: trait method `try_into` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:84:18
   |
LL |     let _: u32 = 3.0.try_into().unwrap();
   |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(&3.0)`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>

warning: trait method `try_into` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:90:18
   |
LL |     let _: u32 = mut_ptr.try_into().unwrap();
   |                  ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(mut_ptr as *const _)`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>

warning: trait-associated function `try_from` will become ambiguous in Rust 2021
  --> $DIR/future-prelude-collision.rs:95:13
   |
LL |     let _ = U32Alias::try_from(3u8).unwrap();
   |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<U32Alias as TryFromU8>::try_from`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>

warning: 8 warnings emitted

