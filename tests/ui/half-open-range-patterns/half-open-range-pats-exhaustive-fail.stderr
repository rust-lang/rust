error[E0004]: non-exhaustive patterns: `_` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:14:8
   |
LL |     m!(0f32, f32::NEG_INFINITY..);
   |        ^^^^ pattern `_` not covered
   |
   = note: the matched value is of type `f32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, _ => todo!() }
   |                                ++++++++++++++

error[E0004]: non-exhaustive patterns: `_` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:15:8
   |
LL |     m!(0f32, ..f32::INFINITY);
   |        ^^^^ pattern `_` not covered
   |
   = note: the matched value is of type `f32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, _ => todo!() }
   |                                ++++++++++++++

error[E0004]: non-exhaustive patterns: `'\u{10ffff}'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:24:8
   |
LL |     m!('a', ..core::char::MAX);
   |        ^^^ pattern `'\u{10ffff}'` not covered
   |
   = note: the matched value is of type `char`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, '\u{10ffff}' => todo!() }
   |                                +++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `'\u{10fffe}'..='\u{10ffff}'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:25:8
   |
LL |     m!('a', ..ALMOST_MAX);
   |        ^^^ pattern `'\u{10fffe}'..='\u{10ffff}'` not covered
   |
   = note: the matched value is of type `char`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, '\u{10fffe}'..='\u{10ffff}' => todo!() }
   |                                ++++++++++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `'\0'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:26:8
   |
LL |     m!('a', ALMOST_MIN..);
   |        ^^^ pattern `'\0'` not covered
   |
   = note: the matched value is of type `char`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, '\0' => todo!() }
   |                                +++++++++++++++++

error[E0004]: non-exhaustive patterns: `'\u{10ffff}'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:27:8
   |
LL |     m!('a', ..=ALMOST_MAX);
   |        ^^^ pattern `'\u{10ffff}'` not covered
   |
   = note: the matched value is of type `char`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, '\u{10ffff}' => todo!() }
   |                                +++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `'b'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:28:8
   |
LL |     m!('a', ..=VAL | VAL_2..);
   |        ^^^ pattern `'b'` not covered
   |
   = note: the matched value is of type `char`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 'b' => todo!() }
   |                                ++++++++++++++++

error[E0004]: non-exhaustive patterns: `'b'` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:29:8
   |
LL |     m!('a', ..VAL_1 | VAL_2..);
   |        ^^^ pattern `'b'` not covered
   |
   = note: the matched value is of type `char`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 'b' => todo!() }
   |                                ++++++++++++++++

error[E0004]: non-exhaustive patterns: `u8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:39:12
   |
LL |         m!(0, ..u8::MAX);
   |            ^ pattern `u8::MAX` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `254_u8..=u8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:40:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `254_u8..=u8::MAX` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 254_u8..=u8::MAX => todo!() }
   |                                +++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_u8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:41:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0_u8` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 0_u8 => todo!() }
   |                                +++++++++++++++++

error[E0004]: non-exhaustive patterns: `u8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:42:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `u8::MAX` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:43:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_u8` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u8 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:44:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_u8` not covered
   |
   = note: the matched value is of type `u8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u8 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:52:12
   |
LL |         m!(0, ..u16::MAX);
   |            ^ pattern `u16::MAX` not covered
   |
   = note: the matched value is of type `u16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u16::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `65534_u16..=u16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:53:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `65534_u16..=u16::MAX` not covered
   |
   = note: the matched value is of type `u16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 65534_u16..=u16::MAX => todo!() }
   |                                +++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_u16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:54:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0_u16` not covered
   |
   = note: the matched value is of type `u16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 0_u16 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:55:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `u16::MAX` not covered
   |
   = note: the matched value is of type `u16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u16::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:56:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_u16` not covered
   |
   = note: the matched value is of type `u16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u16 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:57:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_u16` not covered
   |
   = note: the matched value is of type `u16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u16 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:65:12
   |
LL |         m!(0, ..u32::MAX);
   |            ^ pattern `u32::MAX` not covered
   |
   = note: the matched value is of type `u32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u32::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `4294967294_u32..=u32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:66:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `4294967294_u32..=u32::MAX` not covered
   |
   = note: the matched value is of type `u32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 4294967294_u32..=u32::MAX => todo!() }
   |                                ++++++++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_u32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:67:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0_u32` not covered
   |
   = note: the matched value is of type `u32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 0_u32 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:68:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `u32::MAX` not covered
   |
   = note: the matched value is of type `u32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u32::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:69:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_u32` not covered
   |
   = note: the matched value is of type `u32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u32 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:70:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_u32` not covered
   |
   = note: the matched value is of type `u32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u32 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:78:12
   |
LL |         m!(0, ..u64::MAX);
   |            ^ pattern `u64::MAX` not covered
   |
   = note: the matched value is of type `u64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u64::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `18446744073709551614_u64..=u64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:79:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `18446744073709551614_u64..=u64::MAX` not covered
   |
   = note: the matched value is of type `u64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 18446744073709551614_u64..=u64::MAX => todo!() }
   |                                ++++++++++++++++++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_u64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:80:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0_u64` not covered
   |
   = note: the matched value is of type `u64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 0_u64 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:81:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `u64::MAX` not covered
   |
   = note: the matched value is of type `u64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u64::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:82:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_u64` not covered
   |
   = note: the matched value is of type `u64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u64 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:83:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_u64` not covered
   |
   = note: the matched value is of type `u64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u64 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:91:12
   |
LL |         m!(0, ..u128::MAX);
   |            ^ pattern `u128::MAX` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }
   |                                ++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211454_u128..` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:92:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `340282366920938463463374607431768211454_u128..` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 340282366920938463463374607431768211454_u128.. => todo!() }
   |                                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `0_u128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:93:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `0_u128` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 0_u128 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `u128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:94:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `u128::MAX` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, u128::MAX => todo!() }
   |                                ++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:95:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_u128` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u128 => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_u128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:96:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_u128` not covered
   |
   = note: the matched value is of type `u128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_u128 => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:107:12
   |
LL |         m!(0, ..i8::MAX);
   |            ^ pattern `i8::MAX` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `126_i8..=i8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:108:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `126_i8..=i8::MAX` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 126_i8..=i8::MAX => todo!() }
   |                                +++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i8::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:109:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `i8::MIN` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i8::MIN => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i8::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:110:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `i8::MAX` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i8::MAX => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:111:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_i8` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i8 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i8` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:112:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_i8` not covered
   |
   = note: the matched value is of type `i8`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i8 => todo!() }
   |                                ++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:120:12
   |
LL |         m!(0, ..i16::MAX);
   |            ^ pattern `i16::MAX` not covered
   |
   = note: the matched value is of type `i16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i16::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `32766_i16..=i16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:121:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `32766_i16..=i16::MAX` not covered
   |
   = note: the matched value is of type `i16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 32766_i16..=i16::MAX => todo!() }
   |                                +++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i16::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:122:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `i16::MIN` not covered
   |
   = note: the matched value is of type `i16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i16::MIN => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i16::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:123:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `i16::MAX` not covered
   |
   = note: the matched value is of type `i16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i16::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:124:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_i16` not covered
   |
   = note: the matched value is of type `i16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i16 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i16` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:125:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_i16` not covered
   |
   = note: the matched value is of type `i16`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i16 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:133:12
   |
LL |         m!(0, ..i32::MAX);
   |            ^ pattern `i32::MAX` not covered
   |
   = note: the matched value is of type `i32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i32::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `2147483646_i32..=i32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:134:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `2147483646_i32..=i32::MAX` not covered
   |
   = note: the matched value is of type `i32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 2147483646_i32..=i32::MAX => todo!() }
   |                                ++++++++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i32::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:135:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `i32::MIN` not covered
   |
   = note: the matched value is of type `i32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i32::MIN => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i32::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:136:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `i32::MAX` not covered
   |
   = note: the matched value is of type `i32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i32::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:137:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_i32` not covered
   |
   = note: the matched value is of type `i32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i32 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i32` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:138:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_i32` not covered
   |
   = note: the matched value is of type `i32`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i32 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:146:12
   |
LL |         m!(0, ..i64::MAX);
   |            ^ pattern `i64::MAX` not covered
   |
   = note: the matched value is of type `i64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i64::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `9223372036854775806_i64..=i64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:147:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `9223372036854775806_i64..=i64::MAX` not covered
   |
   = note: the matched value is of type `i64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 9223372036854775806_i64..=i64::MAX => todo!() }
   |                                +++++++++++++++++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i64::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:148:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `i64::MIN` not covered
   |
   = note: the matched value is of type `i64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i64::MIN => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i64::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:149:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `i64::MAX` not covered
   |
   = note: the matched value is of type `i64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i64::MAX => todo!() }
   |                                +++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:150:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_i64` not covered
   |
   = note: the matched value is of type `i64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i64 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i64` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:151:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_i64` not covered
   |
   = note: the matched value is of type `i64`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i64 => todo!() }
   |                                +++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:159:12
   |
LL |         m!(0, ..i128::MAX);
   |            ^ pattern `i128::MAX` not covered
   |
   = note: the matched value is of type `i128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i128::MAX => todo!() }
   |                                ++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `170141183460469231731687303715884105726_i128..` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:160:12
   |
LL |         m!(0, ..ALMOST_MAX);
   |            ^ pattern `170141183460469231731687303715884105726_i128..` not covered
   |
   = note: the matched value is of type `i128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 170141183460469231731687303715884105726_i128.. => todo!() }
   |                                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i128::MIN` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:161:12
   |
LL |         m!(0, ALMOST_MIN..);
   |            ^ pattern `i128::MIN` not covered
   |
   = note: the matched value is of type `i128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i128::MIN => todo!() }
   |                                ++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `i128::MAX` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:162:12
   |
LL |         m!(0, ..=ALMOST_MAX);
   |            ^ pattern `i128::MAX` not covered
   |
   = note: the matched value is of type `i128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, i128::MAX => todo!() }
   |                                ++++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:163:12
   |
LL |         m!(0, ..=VAL | VAL_2..);
   |            ^ pattern `43_i128` not covered
   |
   = note: the matched value is of type `i128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i128 => todo!() }
   |                                ++++++++++++++++++++

error[E0004]: non-exhaustive patterns: `43_i128` not covered
  --> $DIR/half-open-range-pats-exhaustive-fail.rs:164:12
   |
LL |         m!(0, ..VAL_1 | VAL_2..);
   |            ^ pattern `43_i128` not covered
   |
   = note: the matched value is of type `i128`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |         match $s { $($t)+ => {}, 43_i128 => todo!() }
   |                                ++++++++++++++++++++

error: aborting due to 68 previous errors

For more information about this error, try `rustc --explain E0004`.
