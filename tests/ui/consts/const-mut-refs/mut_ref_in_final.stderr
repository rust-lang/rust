error[E0764]: mutable borrows of temporaries that have their lifetime extended until the end of the program are not allowed
  --> $DIR/mut_ref_in_final.rs:15:21
   |
LL | const B: *mut i32 = &mut 4;
   |                     ^^^^^^ this mutable borrow refers to such a temporary
   |
   = note: Temporaries in constants and statics can have their lifetime extended until the end of the program
   = note: To avoid accidentally creating global mutable state, such temporaries must be immutable
   = help: If you really want global mutable state, try replacing the temporary by an interior mutable `static` or a `static mut`

error[E0764]: mutable borrows of temporaries that have their lifetime extended until the end of the program are not allowed
  --> $DIR/mut_ref_in_final.rs:21:35
   |
LL | const B3: Option<&mut i32> = Some(&mut 42);
   |                                   ^^^^^^^ this mutable borrow refers to such a temporary
   |
   = note: Temporaries in constants and statics can have their lifetime extended until the end of the program
   = note: To avoid accidentally creating global mutable state, such temporaries must be immutable
   = help: If you really want global mutable state, try replacing the temporary by an interior mutable `static` or a `static mut`

error[E0716]: temporary value dropped while borrowed
  --> $DIR/mut_ref_in_final.rs:24:42
   |
LL | const B4: Option<&mut i32> = helper(&mut 42);
   |                              ------------^^-
   |                              |           | |
   |                              |           | temporary value is freed at the end of this statement
   |                              |           creates a temporary value which is freed while still in use
   |                              using this value as a constant requires that borrow lasts for `'static`

error[E0080]: constructing invalid value: encountered mutable reference or box pointing to read-only memory
  --> $DIR/mut_ref_in_final.rs:27:1
   |
LL | const IMMUT_MUT_REF: &mut u16 = unsafe { mem::transmute(&13) };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ it is undefined behavior to use this value
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0080]: constructing invalid value: encountered mutable reference or box pointing to read-only memory
  --> $DIR/mut_ref_in_final.rs:29:1
   |
LL | static IMMUT_MUT_REF_STATIC: &mut u16 = unsafe { mem::transmute(&13) };
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ it is undefined behavior to use this value
   |
   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.
   = note: the raw bytes of the constant (size: $SIZE, align: $ALIGN) {
               HEX_DUMP
           }

error[E0716]: temporary value dropped while borrowed
  --> $DIR/mut_ref_in_final.rs:52:65
   |
LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));
   |                                  -------------------------------^^--
   |                                  |                              |  |
   |                                  |                              |  temporary value is freed at the end of this statement
   |                                  |                              creates a temporary value which is freed while still in use
   |                                  using this value as a constant requires that borrow lasts for `'static`

error[E0716]: temporary value dropped while borrowed
  --> $DIR/mut_ref_in_final.rs:55:67
   |
LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));
   |                                    -------------------------------^^--
   |                                    |                              |  |
   |                                    |                              |  temporary value is freed at the end of this statement
   |                                    |                              creates a temporary value which is freed while still in use
   |                                    using this value as a static requires that borrow lasts for `'static`

error[E0716]: temporary value dropped while borrowed
  --> $DIR/mut_ref_in_final.rs:58:71
   |
LL | static mut FOO3: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));
   |                                        -------------------------------^^--
   |                                        |                              |  |
   |                                        |                              |  temporary value is freed at the end of this statement
   |                                        |                              creates a temporary value which is freed while still in use
   |                                        using this value as a static requires that borrow lasts for `'static`

error[E0764]: mutable borrows of temporaries that have their lifetime extended until the end of the program are not allowed
  --> $DIR/mut_ref_in_final.rs:71:53
   |
LL | static RAW_MUT_CAST_S: SyncPtr<i32> = SyncPtr { x : &mut 42 as *mut _ as *const _ };
   |                                                     ^^^^^^^ this mutable borrow refers to such a temporary
   |
   = note: Temporaries in constants and statics can have their lifetime extended until the end of the program
   = note: To avoid accidentally creating global mutable state, such temporaries must be immutable
   = help: If you really want global mutable state, try replacing the temporary by an interior mutable `static` or a `static mut`

error[E0764]: mutable borrows of temporaries that have their lifetime extended until the end of the program are not allowed
  --> $DIR/mut_ref_in_final.rs:73:54
   |
LL | static RAW_MUT_COERCE_S: SyncPtr<i32> = SyncPtr { x: &mut 0 };
   |                                                      ^^^^^^ this mutable borrow refers to such a temporary
   |
   = note: Temporaries in constants and statics can have their lifetime extended until the end of the program
   = note: To avoid accidentally creating global mutable state, such temporaries must be immutable
   = help: If you really want global mutable state, try replacing the temporary by an interior mutable `static` or a `static mut`

error[E0764]: mutable borrows of temporaries that have their lifetime extended until the end of the program are not allowed
  --> $DIR/mut_ref_in_final.rs:75:52
   |
LL | const RAW_MUT_CAST_C: SyncPtr<i32> = SyncPtr { x : &mut 42 as *mut _ as *const _ };
   |                                                    ^^^^^^^ this mutable borrow refers to such a temporary
   |
   = note: Temporaries in constants and statics can have their lifetime extended until the end of the program
   = note: To avoid accidentally creating global mutable state, such temporaries must be immutable
   = help: If you really want global mutable state, try replacing the temporary by an interior mutable `static` or a `static mut`

error[E0764]: mutable borrows of temporaries that have their lifetime extended until the end of the program are not allowed
  --> $DIR/mut_ref_in_final.rs:77:53
   |
LL | const RAW_MUT_COERCE_C: SyncPtr<i32> = SyncPtr { x: &mut 0 };
   |                                                     ^^^^^^ this mutable borrow refers to such a temporary
   |
   = note: Temporaries in constants and statics can have their lifetime extended until the end of the program
   = note: To avoid accidentally creating global mutable state, such temporaries must be immutable
   = help: If you really want global mutable state, try replacing the temporary by an interior mutable `static` or a `static mut`

error: aborting due to 12 previous errors

Some errors have detailed explanations: E0080, E0716, E0764.
For more information about an error, try `rustc --explain E0080`.
