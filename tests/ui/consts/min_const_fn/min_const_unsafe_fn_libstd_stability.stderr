error: const function that might be (indirectly) exposed to stable cannot use `#[feature(foo)]`
  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:16:41
   |
LL | const unsafe fn bar() -> u32 { unsafe { foo() } }
   |                                         ^^^^^
   |
   = help: mark the callee as `#[rustc_const_stable_indirect]` if it does not itself require any unsafe features
help: if the caller is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const unsafe fn bar() -> u32 { unsafe { foo() } }
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(foo)]
LL | const unsafe fn bar() -> u32 { unsafe { foo() } }
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(foo2)]`
  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:25:42
   |
LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }
   |                                          ^^^^^^
   |
   = help: mark the callee as `#[rustc_const_stable_indirect]` if it does not itself require any unsafe features
help: if the caller is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(foo2)]
LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }
   |

error: const function that might be (indirectly) exposed to stable cannot use `#[feature(foo2)]`
  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:35:48
   |
LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }
   |                                                ^^^^^^^^^^^^
   |
   = help: mark the callee as `#[rustc_const_stable_indirect]` if it does not itself require any unsafe features
help: if the caller is not (yet) meant to be exposed to stable, add `#[rustc_const_unstable]` (this is what you probably want to do)
   |
LL + #[rustc_const_unstable(feature = "...", issue = "...")]
LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }
   |
help: otherwise, as a last resort `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks (this requires team approval)
   |
LL + #[rustc_allow_const_fn_unstable(foo2)]
LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }
   |

error: aborting due to 3 previous errors

