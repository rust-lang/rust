warning: redefinition of the runtime `memcpy` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:9:1
   |
LL | / pub extern "C" fn memcpy(
LL | |     dest: *mut c_void,
LL | |     src: *const c_void,
LL | |     n: i64,
LL | | ) -> *mut c_void { std::ptr::null_mut() }
   | |_________________________________________^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "memcpy")]`
   = note: `#[warn(redefining_runtime_symbols)]` on by default

warning: redefinition of the runtime `memmove` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:17:1
   |
LL | pub fn memmove() {}
   | ^^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "memmove")]`

warning: redefinition of the runtime `memset` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:21:1
   |
LL | pub fn memset() {}
   | ^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "memset")]`

warning: redefinition of the runtime `memcmp` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:25:1
   |
LL | pub fn memcmp() {}
   | ^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "memcmp")]`

warning: redefinition of the runtime `bcmp` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:29:1
   |
LL | pub fn bcmp_() {}
   | ^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "bcmp")]`

warning: redefinition of the runtime `strlen` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:33:1
   |
LL | pub static strlen: () = ();
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "strlen")]`

warning: redefinition of the runtime `open` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:39:1
   |
LL | pub fn open() {}
   | ^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "open")]`

warning: redefinition of the runtime `open64` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:43:1
   |
LL | pub fn open64() {}
   | ^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "open64")]`

warning: redefinition of the runtime `read` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:47:1
   |
LL | pub async fn read1() {}
   | ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "read")]`

warning: redefinition of the runtime `write` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:51:1
   |
LL | pub fn write1() {}
   | ^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "write")]`

warning: redefinition of the runtime `close` symbol used by the standard library
  --> $DIR/redefining-runtime-symbols.rs:55:1
   |
LL | pub fn close_() {}
   | ^^^^^^^^^^^^^^^^^^
   |
   = note: extra care must be taken when redefining those symbols, they must match exactly (ABI, function arguments, function return type, behavior, ...)
   = note: see <https://doc.rust-lang.org/core/index.html#how-to-use-the-core-library> for the more details
   = help: either allow this lint or remove any `#[unsafe(no_mangle)]` or `#[unsafe(export_name = "close")]`

warning: 11 warnings emitted

