error: `extern` callback uses type `(i32, i32)`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:39:20
   |
LL | type UnsafeFnPtr = extern "C" fn((i32, i32))->i32;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn((i32, i32)) -> i32` is FFI-unsafe due to `(i32, i32)`
   = help: consider using a struct instead
   = note: tuples have unspecified layout
note: the lint level is defined here
  --> $DIR/allow_improper_ctypes.rs:2:9
   |
LL | #![deny(improper_c_callbacks)]
   |         ^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `&str`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:75:35
   |
LL | extern "C" fn fn1u(e: &String) -> &str {&*e}
   |                                   ^^^^ not FFI-safe
   |
   = help: consider using `*const u8` and a length instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer
note: the lint level is defined here
  --> $DIR/allow_improper_ctypes.rs:1:26
   |
LL | #![deny(improper_ctypes, improper_c_fn_definitions)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `UnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:81:23
   |
LL | extern "C" fn fn2u(e: UnsafeStruct) {}
   |                       ^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`UnsafeStruct`) is FFI-unsafe due to a `String` field
note: the type is defined here
  --> $DIR/allow_improper_ctypes.rs:18:1
   |
LL | struct UnsafeStruct (String);
   | ^^^^^^^^^^^^^^^^^^^
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` fn uses type `ext_crate::UnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:85:24
   |
LL | extern "C" fn fn2ou(e: ext_crate::UnsafeStruct) {}
   |                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`ext_crate::UnsafeStruct`) is FFI-unsafe due to a `String` field
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` fn uses type `AllowedUnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:90:23
   |
LL | extern "C" fn fn3u(e: AllowedUnsafeStruct) {}
   |                       ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`AllowedUnsafeStruct`) is FFI-unsafe due to a `String` field
note: the type is defined here
  --> $DIR/allow_improper_ctypes.rs:22:1
   |
LL | struct AllowedUnsafeStruct (String);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` fn uses type `ext_crate::AllowedUnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:95:24
   |
LL | extern "C" fn fn3ou(e: ext_crate::AllowedUnsafeStruct) {}
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`ext_crate::AllowedUnsafeStruct`) is FFI-unsafe due to a `String` field
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` callback uses type `&[A]`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:139:14
   |
LL |     combine: extern "C" fn(&[A]) -> A,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `for<'a> extern "C" fn(&'a [A]) -> A` is FFI-unsafe due to `&[A]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` callback uses type `FakeVTable<u32>`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:145:24
   |
LL | type FakeVTableMaker = extern "C" fn() -> FakeVTable<u32>;
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn() -> FakeVTable<u32>` is FFI-unsafe due to `FakeVTable<u32>`
   = note: this struct/enum/union (`FakeVTable<u32>`) is FFI-unsafe due to a `(u32, usize)` field
note: the type is defined here
  --> $DIR/allow_improper_ctypes.rs:137:1
   |
LL | struct FakeVTable<A>{
   | ^^^^^^^^^^^^^^^^^^^^
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: aborting due to 8 previous errors

