warning: unused `Result` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:16:5
   |
LL |     Ok::<_, std::convert::Infallible>(());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
note: the lint level is defined here
  --> $DIR/must-use-uninhabited-result-e.rs:10:9
   |
LL | #![warn(unused)]
   |         ^^^^^^
   = note: `#[warn(unused_must_use)]` implied by `#[warn(unused)]`
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = Ok::<_, std::convert::Infallible>(());
   |     +++++++

warning: unused `Result` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:17:5
   |
LL |     Ok::<_, empty::EmptyForeignEnum>(());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = Ok::<_, empty::EmptyForeignEnum>(());
   |     +++++++

warning: unused `Result` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:18:5
   |
LL |     Ok::<_, empty::VisiblyUninhabitedForeignStruct>(());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = Ok::<_, empty::VisiblyUninhabitedForeignStruct>(());
   |     +++++++

warning: unused `Result` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:19:5
   |
LL |     Ok::<_, empty::SecretlyUninhabitedForeignStruct>(());
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = Ok::<_, empty::SecretlyUninhabitedForeignStruct>(());
   |     +++++++

warning: unused `Result` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:20:5
   |
LL |     Ok::<_, !>(());
   |     ^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = Ok::<_, !>(());
   |     +++++++

warning: unused `Result` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:22:5
   |
LL |     Ok::<_, !>(Important);
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = Ok::<_, !>(Important);
   |     +++++++

warning: unused `Result` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:24:5
   |
LL |     very_important();
   |     ^^^^^^^^^^^^^^^^
   |
   = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = very_important();
   |     +++++++

warning: unused return value of `very_important` that must be used
  --> $DIR/must-use-uninhabited-result-e.rs:24:5
   |
LL |     very_important();
   |     ^^^^^^^^^^^^^^^^
   |
help: use `let _ = ...` to ignore the resulting value
   |
LL |     let _ = very_important();
   |     +++++++

warning: 8 warnings emitted

