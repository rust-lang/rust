error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:4:29
   |
LL | pub fn bad(f: extern "C" fn([u8])) {}
   |                             ^^^^ not FFI-safe
   |
   = help: consider using a raw pointer instead
   = note: slices have no C equivalent
note: the lint level is defined here
  --> $DIR/lint-94223.rs:2:38
   |
LL | #![deny(improper_ctypes_definitions, improper_ctypes)]
   |                                      ^^^^^^^^^^^^^^^

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:7:42
   |
LL | pub fn bad_twice(f: Result<extern "C" fn([u8]), extern "C" fn([u8])>) {}
   |                                          ^^^^ not FFI-safe
   |
   = help: consider using a raw pointer instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:7:63
   |
LL | pub fn bad_twice(f: Result<extern "C" fn([u8]), extern "C" fn([u8])>) {}
   |                                                               ^^^^ not FFI-safe
   |
   = help: consider using a raw pointer instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:11:32
   |
LL | struct BadStruct(extern "C" fn([u8]));
   |                                ^^^^ not FFI-safe
   |
   = help: consider using a raw pointer instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:15:21
   |
LL |     A(extern "C" fn([u8])),
   |                     ^^^^ not FFI-safe
   |
   = help: consider using a raw pointer instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:20:21
   |
LL |     A(extern "C" fn([u8])),
   |                     ^^^^ not FFI-safe
   |
   = help: consider using a raw pointer instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:24:26
   |
LL | type Foo = extern "C" fn([u8]);
   |                          ^^^^ not FFI-safe
   |
   = help: consider using a raw pointer instead
   = note: slices have no C equivalent

error: `extern` callback uses type `Option<&<T as FooTrait>::FooType>`, which is not FFI-safe
  --> $DIR/lint-94223.rs:31:34
   |
LL | pub type Foo2<T> = extern "C" fn(Option<&<T as FooTrait>::FooType>);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum
   = note: enum has no representation hint

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:41:31
   |
LL | pub static BAD: extern "C" fn(FfiUnsafe) = f;
   |                               ^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:34:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:44:44
   |
LL | pub static BAD_TWICE: Result<extern "C" fn(FfiUnsafe), extern "C" fn(FfiUnsafe)> = Ok(f);
   |                                            ^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:34:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:44:70
   |
LL | pub static BAD_TWICE: Result<extern "C" fn(FfiUnsafe), extern "C" fn(FfiUnsafe)> = Ok(f);
   |                                                                      ^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:34:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:48:36
   |
LL | pub const BAD_CONST: extern "C" fn(FfiUnsafe) = f;
   |                                    ^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:34:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: aborting due to 12 previous errors

