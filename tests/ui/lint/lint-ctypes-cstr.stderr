error: `extern` block uses type `CStr`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:7:21
   |
LL |     fn take_cstr(s: CStr);
   |                     ^^^^ not FFI-safe
   |
   = help: consider passing a `*const std::ffi::c_char` instead, and use `CStr::as_ptr()`
   = note: `CStr`/`CString` do not have a guaranteed layout
note: the lint level is defined here
  --> $DIR/lint-ctypes-cstr.rs:2:9
   |
LL | #![deny(improper_ctypes, improper_ctypes_definitions)]
   |         ^^^^^^^^^^^^^^^

error: `extern` block uses type `CStr`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:10:25
   |
LL |     fn take_cstr_ref(s: &CStr);
   |                         ^^^^^ not FFI-safe
   |
   = help: consider passing a `*const std::ffi::c_char` instead, and use `CStr::as_ptr()`
   = note: `CStr`/`CString` do not have a guaranteed layout

error: `extern` block uses type `CString`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:13:24
   |
LL |     fn take_cstring(s: CString);
   |                        ^^^^^^^ not FFI-safe
   |
   = help: consider passing a `*const std::ffi::c_char` instead, and use `CStr::as_ptr()`
   = note: `CStr`/`CString` do not have a guaranteed layout

error: `extern` block uses type `CString`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:16:28
   |
LL |     fn take_cstring_ref(s: &CString);
   |                            ^^^^^^^^ not FFI-safe
   |
   = help: consider passing a `*const std::ffi::c_char` instead, and use `CStr::as_ptr()`
   = note: `CStr`/`CString` do not have a guaranteed layout

error: `extern` block uses type `CString`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:20:43
   |
LL |     fn no_special_help_for_mut_cstring(s: *mut CString);
   |                                           ^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct
   = note: this struct has unspecified layout

error: `extern` block uses type `CString`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:24:47
   |
LL |     fn no_special_help_for_mut_cstring_ref(s: &mut CString);
   |                                               ^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct
   = note: this struct has unspecified layout

error: `extern` fn uses type `CStr`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:29:37
   |
LL | extern "C" fn rust_take_cstr_ref(s: &CStr) {}
   |                                     ^^^^^ not FFI-safe
   |
   = help: consider passing a `*const std::ffi::c_char` instead, and use `CStr::as_ptr()`
   = note: `CStr`/`CString` do not have a guaranteed layout
note: the lint level is defined here
  --> $DIR/lint-ctypes-cstr.rs:2:26
   |
LL | #![deny(improper_ctypes, improper_ctypes_definitions)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `CString`, which is not FFI-safe
  --> $DIR/lint-ctypes-cstr.rs:32:36
   |
LL | extern "C" fn rust_take_cstring(s: CString) {}
   |                                    ^^^^^^^ not FFI-safe
   |
   = help: consider passing a `*const std::ffi::c_char` instead, and use `CStr::as_ptr()`
   = note: `CStr`/`CString` do not have a guaranteed layout

error: aborting due to 8 previous errors

