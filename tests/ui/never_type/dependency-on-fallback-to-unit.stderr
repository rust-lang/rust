error: this function depends on never type fallback being `()`
  --> $DIR/dependency-on-fallback-to-unit.rs:6:1
   |
LL | fn def() {
   | ^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/dependency-on-fallback-to-unit.rs:10:19
   |
LL |         false => <_>::default(),
   |                   ^
   = note: `#[deny(dependency_on_unit_never_type_fallback)]` (part of `#[deny(rust_2024_compatibility)]`) on by default
help: use `()` annotations to avoid fallback changes
   |
LL -         false => <_>::default(),
LL +         false => <()>::default(),
   |

error: this function depends on never type fallback being `()`
  --> $DIR/dependency-on-fallback-to-unit.rs:17:1
   |
LL | fn question_mark() -> Result<(), ()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/dependency-on-fallback-to-unit.rs:20:5
   |
LL |     deserialize()?;
   |     ^^^^^^^^^^^^^
help: use `()` annotations to avoid fallback changes
   |
LL |     deserialize::<()>()?;
   |                ++++++

error: aborting due to 2 previous errors

Future incompatibility report: Future breakage diagnostic:
error: this function depends on never type fallback being `()`
  --> $DIR/dependency-on-fallback-to-unit.rs:6:1
   |
LL | fn def() {
   | ^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/dependency-on-fallback-to-unit.rs:10:19
   |
LL |         false => <_>::default(),
   |                   ^
   = note: `#[deny(dependency_on_unit_never_type_fallback)]` (part of `#[deny(rust_2024_compatibility)]`) on by default
help: use `()` annotations to avoid fallback changes
   |
LL -         false => <_>::default(),
LL +         false => <()>::default(),
   |

Future breakage diagnostic:
error: this function depends on never type fallback being `()`
  --> $DIR/dependency-on-fallback-to-unit.rs:17:1
   |
LL | fn question_mark() -> Result<(), ()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Default` will fail
  --> $DIR/dependency-on-fallback-to-unit.rs:20:5
   |
LL |     deserialize()?;
   |     ^^^^^^^^^^^^^
   = note: `#[deny(dependency_on_unit_never_type_fallback)]` (part of `#[deny(rust_2024_compatibility)]`) on by default
help: use `()` annotations to avoid fallback changes
   |
LL |     deserialize::<()>()?;
   |                ++++++

