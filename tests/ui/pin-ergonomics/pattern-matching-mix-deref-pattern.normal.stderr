error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:33:9
   |
LL |     let Foo { x, y } = foo.as_mut();
   |         ^^^^^^^^^^^^   ------------ this expression has type `Pin<&mut Foo<T, U>>`
   |         |
   |         expected `Pin<&mut Foo<T, U>>`, found `Foo<_, _>`
   |
   = note: expected struct `Pin<&mut Foo<T, U>>`
              found struct `Foo<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let Foo { x, y } = *foo.as_mut();
   |                        +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:37:9
   |
LL |     match foo.as_mut() {
   |           ------------ this expression has type `Pin<&mut Foo<T, U>>`
LL |         Foo { x, y } => {}
   |         ^^^^^^^^^^^^ expected `Pin<&mut Foo<T, U>>`, found `Foo<_, _>`
   |
   = note: expected struct `Pin<&mut Foo<T, U>>`
              found struct `Foo<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     match *foo.as_mut() {
   |           +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:45:9
   |
LL |     let _ = || match foo.as_mut() {
   |                      ------------ this expression has type `Pin<&mut Foo<T, U>>`
LL |         Foo { x, y } => {}
   |         ^^^^^^^^^^^^ expected `Pin<&mut Foo<T, U>>`, found `Foo<_, _>`
   |
   = note: expected struct `Pin<&mut Foo<T, U>>`
              found struct `Foo<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let _ = || match *foo.as_mut() {
   |                      +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:55:9
   |
LL |     let Foo { x, y } = foo;
   |         ^^^^^^^^^^^^   --- this expression has type `Pin<&Foo<T, U>>`
   |         |
   |         expected `Pin<&Foo<T, U>>`, found `Foo<_, _>`
   |
   = note: expected struct `Pin<&Foo<T, U>>`
              found struct `Foo<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let Foo { x, y } = *foo;
   |                        +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:59:9
   |
LL |     match foo {
   |           --- this expression has type `Pin<&Foo<T, U>>`
LL |         Foo { x, y } => {}
   |         ^^^^^^^^^^^^ expected `Pin<&Foo<T, U>>`, found `Foo<_, _>`
   |
   = note: expected struct `Pin<&Foo<T, U>>`
              found struct `Foo<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     match *foo {
   |           +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:67:9
   |
LL |     let _ = || match foo {
   |                      --- this expression has type `Pin<&Foo<T, U>>`
LL |         Foo { x, y } => {}
   |         ^^^^^^^^^^^^ expected `Pin<&Foo<T, U>>`, found `Foo<_, _>`
   |
   = note: expected struct `Pin<&Foo<T, U>>`
              found struct `Foo<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let _ = || match *foo {
   |                      +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:77:9
   |
LL |     let Bar(x, y) = bar.as_mut();
   |         ^^^^^^^^^   ------------ this expression has type `Pin<&mut Bar<T, U>>`
   |         |
   |         expected `Pin<&mut Bar<T, U>>`, found `Bar<_, _>`
   |
   = note: expected struct `Pin<&mut Bar<T, U>>`
              found struct `Bar<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let Bar(x, y) = *bar.as_mut();
   |                     +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:81:9
   |
LL |     match bar.as_mut() {
   |           ------------ this expression has type `Pin<&mut Bar<T, U>>`
LL |         Bar(x, y) => {}
   |         ^^^^^^^^^ expected `Pin<&mut Bar<T, U>>`, found `Bar<_, _>`
   |
   = note: expected struct `Pin<&mut Bar<T, U>>`
              found struct `Bar<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     match *bar.as_mut() {
   |           +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:89:9
   |
LL |     let _ = || match bar.as_mut() {
   |                      ------------ this expression has type `Pin<&mut Bar<T, U>>`
LL |         Bar(x, y) => {}
   |         ^^^^^^^^^ expected `Pin<&mut Bar<T, U>>`, found `Bar<_, _>`
   |
   = note: expected struct `Pin<&mut Bar<T, U>>`
              found struct `Bar<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let _ = || match *bar.as_mut() {
   |                      +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:99:9
   |
LL |     let Bar(x, y) = bar;
   |         ^^^^^^^^^   --- this expression has type `Pin<&Bar<T, U>>`
   |         |
   |         expected `Pin<&Bar<T, U>>`, found `Bar<_, _>`
   |
   = note: expected struct `Pin<&Bar<T, U>>`
              found struct `Bar<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let Bar(x, y) = *bar;
   |                     +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:103:9
   |
LL |     match bar {
   |           --- this expression has type `Pin<&Bar<T, U>>`
LL |         Bar(x, y) => {}
   |         ^^^^^^^^^ expected `Pin<&Bar<T, U>>`, found `Bar<_, _>`
   |
   = note: expected struct `Pin<&Bar<T, U>>`
              found struct `Bar<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     match *bar {
   |           +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:111:9
   |
LL |     let _ = || match bar {
   |                      --- this expression has type `Pin<&Bar<T, U>>`
LL |         Bar(x, y) => {}
   |         ^^^^^^^^^ expected `Pin<&Bar<T, U>>`, found `Bar<_, _>`
   |
   = note: expected struct `Pin<&Bar<T, U>>`
              found struct `Bar<_, _>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let _ = || match *bar {
   |                      +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:121:9
   |
LL |     let NonPinProject { x } = foo;
   |         ^^^^^^^^^^^^^^^^^^^   --- this expression has type `Pin<&mut NonPinProject<T>>`
   |         |
   |         expected `Pin<&mut NonPinProject<T>>`, found `NonPinProject<_>`
   |
   = note: expected struct `Pin<&mut NonPinProject<T>>`
              found struct `NonPinProject<_>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let NonPinProject { x } = *foo;
   |                               +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:125:9
   |
LL |     let NonPinProject { x } = bar;
   |         ^^^^^^^^^^^^^^^^^^^   --- this expression has type `Pin<&NonPinProject<U>>`
   |         |
   |         expected `Pin<&NonPinProject<U>>`, found `NonPinProject<_>`
   |
   = note: expected struct `Pin<&NonPinProject<U>>`
              found struct `NonPinProject<_>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     let NonPinProject { x } = *bar;
   |                               +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:131:9
   |
LL |     match foo {
   |           --- this expression has type `Pin<&mut NonPinProject<T>>`
LL |         NonPinProject { x } => {}
   |         ^^^^^^^^^^^^^^^^^^^ expected `Pin<&mut NonPinProject<T>>`, found `NonPinProject<_>`
   |
   = note: expected struct `Pin<&mut NonPinProject<T>>`
              found struct `NonPinProject<_>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     match *foo {
   |           +

error[E0308]: mismatched types
  --> $DIR/pattern-matching-mix-deref-pattern.rs:139:9
   |
LL |     match bar {
   |           --- this expression has type `Pin<&NonPinProject<U>>`
LL |         NonPinProject { x } => {}
   |         ^^^^^^^^^^^^^^^^^^^ expected `Pin<&NonPinProject<U>>`, found `NonPinProject<_>`
   |
   = note: expected struct `Pin<&NonPinProject<U>>`
              found struct `NonPinProject<_>`
help: consider dereferencing to access the inner value using the Deref trait
   |
LL |     match *bar {
   |           +

error: aborting due to 16 previous errors

For more information about this error, try `rustc --explain E0308`.
