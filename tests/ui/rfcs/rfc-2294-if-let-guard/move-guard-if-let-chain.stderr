error[E0382]: use of moved value: `x`
  --> $DIR/move-guard-if-let-chain.rs:12:23
   |
LL |     let x: Box<_> = Box::new(1);
   |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait
...
LL |         (1, 2) if let y = x && c => (),
   |                       - value moved here
LL |         (1, 2) if let z = x => (),
   |                       ^ value used here after move
   |
help: borrow this binding in the pattern to avoid moving the value
   |
LL |         (1, 2) if let ref y = x && c => (),
   |                       +++

error[E0382]: use of moved value: `x`
  --> $DIR/move-guard-if-let-chain.rs:36:23
   |
LL |     let x: Box<_> = Box::new(1);
   |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait
...
LL |         (1, _) if let y = x && c => (),
   |                       - value moved here
LL |         (_, 2) if let z = x => (),
   |                       ^ value used here after move
   |
help: borrow this binding in the pattern to avoid moving the value
   |
LL |         (1, _) if let ref y = x && c => (),
   |                       +++

error[E0382]: use of moved value: `x`
  --> $DIR/move-guard-if-let-chain.rs:59:32
   |
LL |     let x: Box<_> = Box::new(1);
   |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait
...
LL |         (1, _) | (_, 2) if let y = x && c => (),
   |                                ^ value used here after move
   |
help: borrow this binding in the pattern to avoid moving the value
   |
LL |         (1, _) | (_, 2) if let ref y = x && c => (),
   |                                +++

error[E0382]: use of moved value: `x`
  --> $DIR/move-guard-if-let-chain.rs:82:16
   |
LL |     let x: Box<_> = Box::new(1);
   |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait
...
LL |         (1, 2) if let y = x && c => false,
   |                       - value moved here
LL |         _ => { *x == 1 },
   |                ^^ value used here after move
   |
help: borrow this binding in the pattern to avoid moving the value
   |
LL |         (1, 2) if let ref y = x && c => false,
   |                       +++

error[E0382]: use of moved value: `x`
  --> $DIR/move-guard-if-let-chain.rs:103:41
   |
LL |     let x: Box<_> = Box::new(1);
   |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait
...
LL |         (1, 2) if let y = x && c && let z = x => false,
   |                       -                 ^ value used here after move
   |                       |
   |                       value moved here
   |
help: borrow this binding in the pattern to avoid moving the value
   |
LL |         (1, 2) if let ref y = x && c && let z = x => false,
   |                       +++

error: aborting due to 5 previous errors

For more information about this error, try `rustc --explain E0382`.
