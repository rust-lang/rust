//! Test desugaring of `is` expressions to `let` and `if`.
//@ check-pass
//@ compile-flags: -Z unpretty=hir
//@ edition: 2024
#![feature(builtin_syntax)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[attr = MacroUse {arguments: UseAll}]
extern crate std;

fn main() {
    // At the top level of an `if` or `while` condition, `is` desugars directly to `let`.
    if true && let 0 = 0 && true { }
    loop { if true && let 0 = 0 && true { } else { break; } }

    // Otherwise, an `&&`-chain with `is` in it is wrapped in an `if` expression.
    if let 0 = 0 { true } else { false };
    if true && let 0 = 0 && true { true } else { false };

    // `let` isn't allowed under parentheses or other operators.
    // `is` anywhere other than the top level `&&`-chain of a condition is wrapped in an `if`.
    if if let 0 = 0 { true } else { false } { }
    if if true && let 0 = 0 && true { true } else { false } { }
    if if let 0 = 0 { true } else { false } ||
            if true && let 0 = 0 && true { true } else { false } {
    }
}
