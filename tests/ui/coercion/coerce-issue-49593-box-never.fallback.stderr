error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
  --> $DIR/coerce-issue-49593-box-never.rs:26:27
   |
LL |     Box::<_ /* ! */>::new(x)
   |     --------------------- ^ doesn't have a size known at compile-time
   |     |
   |     required by a bound introduced by this call
   |
   = help: the trait `Sized` is not implemented for `dyn std::error::Error`
note: required by a bound in `Box::<T>::new`
  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL

error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
  --> $DIR/coerce-issue-49593-box-never.rs:32:19
   |
LL |     raw_ptr_box::<_ /* ! */>(x)
   |                   ^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
note: required by an implicit `Sized` bound in `raw_ptr_box`
  --> $DIR/coerce-issue-49593-box-never.rs:19:16
   |
LL | fn raw_ptr_box<T>(t: T) -> *mut T {
   |                ^ required by the implicit `Sized` requirement on this type parameter in `raw_ptr_box`
help: consider relaxing the implicit `Sized` restriction
   |
LL | fn raw_ptr_box<T: ?Sized>(t: T) -> *mut T {
   |                 ++++++++

error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
  --> $DIR/coerce-issue-49593-box-never.rs:32:30
   |
LL |     raw_ptr_box::<_ /* ! */>(x)
   |                              ^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
   = note: all function arguments must have a statically known size
   = help: unsized fn params are gated as an unstable feature

error[E0277]: the size for values of type `dyn Xyz` cannot be known at compilation time
  --> $DIR/coerce-issue-49593-box-never.rs:57:70
   |
LL |                 = /* Box<$0> is coerced to Box<Xyz> here */ Box::new(x.unwrap());
   |                                                             -------- ^^^^^^^^^^ doesn't have a size known at compile-time
   |                                                             |
   |                                                             required by a bound introduced by this call
   |
   = help: the trait `Sized` is not implemented for `dyn Xyz`
note: required by a bound in `Box::<T>::new`
  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL
help: consider removing this method call, as the receiver has type `Option<_>` and `Option<_>: Sized` trivially holds
   |
LL -                 = /* Box<$0> is coerced to Box<Xyz> here */ Box::new(x.unwrap());
LL +                 = /* Box<$0> is coerced to Box<Xyz> here */ Box::new(x);
   |

error[E0277]: the size for values of type `dyn Xyz` cannot be known at compilation time
  --> $DIR/coerce-issue-49593-box-never.rs:57:72
   |
LL |                 = /* Box<$0> is coerced to Box<Xyz> here */ Box::new(x.unwrap());
   |                                                                        ^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `dyn Xyz`
note: required by a bound in `Option::<T>::unwrap`
  --> $SRC_DIR/core/src/option.rs:LL:COL

error[E0277]: the size for values of type `dyn Xyz` cannot be known at compilation time
  --> $DIR/coerce-issue-49593-box-never.rs:50:35
   |
LL |     let mut x /* : Option<S> */ = None;
   |                                   ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `dyn Xyz`
note: required by a bound in `None`
  --> $SRC_DIR/core/src/option.rs:LL:COL

error[E0308]: mismatched types
  --> $DIR/coerce-issue-49593-box-never.rs:62:13
   |
LL |     let mut x /* : Option<S> */ = None;
   |                                   ---- expected due to this value
...
LL |         x = Some(S);
   |             ^^^^^^^ expected `Option<dyn Xyz>`, found `Option<S>`
   |
   = note: expected enum `Option<dyn Xyz>`
              found enum `Option<S>`
   = help: `S` implements `Xyz` so you could box the found value and coerce it to the trait object `Box<dyn Xyz>`, you will have to change the expected type as well

error[E0277]: the size for values of type `dyn Xyz` cannot be known at compilation time
  --> $DIR/coerce-issue-49593-box-never.rs:69:5
   |
LL |     mem::swap(&mut x, &mut y);
   |     ^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `dyn Xyz`
note: required by an implicit `Sized` bound in `Option`
  --> $SRC_DIR/core/src/option.rs:LL:COL

error[E0308]: mismatched types
  --> $DIR/coerce-issue-49593-box-never.rs:69:23
   |
LL |     mem::swap(&mut x, &mut y);
   |     ---------         ^^^^^^ expected `&mut Option<dyn Xyz>`, found `&mut Option<S>`
   |     |
   |     arguments to this function are incorrect
   |
   = note: expected mutable reference `&mut Option<dyn Xyz>`
              found mutable reference `&mut Option<S>`
   = help: `S` implements `Xyz` so you could box the found value and coerce it to the trait object `Box<dyn Xyz>`, you will have to change the expected type as well
note: function defined here
  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL

error: aborting due to 9 previous errors

Some errors have detailed explanations: E0277, E0308.
For more information about an error, try `rustc --explain E0277`.
