error[E0425]: cannot find value `unknown_item` in this scope
  --> $DIR/ambiguous-panic-re-emit.rs:22:13
   |
LL |     let _ = unknown_item;
   |             ^^^^^^^^^^^^ not found in this scope

warning: `panic` is ambiguous
  --> $DIR/ambiguous-panic-re-emit.rs:16:5
   |
LL |     panic!();
   |     ^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #147319 <https://github.com/rust-lang/rust/issues/147319>
   = note: ambiguous because of a conflict between a name from a glob import and an outer scope during import or macro resolution
note: `panic` could refer to the macro imported here
  --> $DIR/ambiguous-panic-re-emit.rs:11:9
   |
LL |     use std::prelude::v1::*;
   |         ^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `panic` to disambiguate
   = help: or use `crate::panic` to refer to this macro unambiguously
note: `panic` could also refer to a macro from prelude
  --> $SRC_DIR/core/src/prelude/mod.rs:LL:COL
   = note: `#[warn(ambiguous_panic_imports)]` (part of `#[warn(future_incompatible)]`) on by default

error: aborting due to 1 previous error; 1 warning emitted

For more information about this error, try `rustc --explain E0425`.
Future incompatibility report: Future breakage diagnostic:
warning: `panic` is ambiguous
  --> $DIR/ambiguous-panic-re-emit.rs:16:5
   |
LL |     panic!();
   |     ^^^^^ ambiguous name
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #147319 <https://github.com/rust-lang/rust/issues/147319>
   = note: ambiguous because of a conflict between a name from a glob import and an outer scope during import or macro resolution
note: `panic` could refer to the macro imported here
  --> $DIR/ambiguous-panic-re-emit.rs:11:9
   |
LL |     use std::prelude::v1::*;
   |         ^^^^^^^^^^^^^^^^^^^
   = help: consider adding an explicit import of `panic` to disambiguate
   = help: or use `crate::panic` to refer to this macro unambiguously
note: `panic` could also refer to a macro from prelude
  --> $SRC_DIR/core/src/prelude/mod.rs:LL:COL
   = note: `#[warn(ambiguous_panic_imports)]` (part of `#[warn(future_incompatible)]`) on by default

