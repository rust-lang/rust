error[E0659]: `exported` is ambiguous
  --> $DIR/local-modularized-tricky-fail-1.rs:29:1
   |
LL | exported!();
   | ^^^^^^^^ ambiguous name
   |
   = note: ambiguous because of a conflict between a name from a glob import and a macro-expanded name in the same module during import or macro resolution
note: `exported` could refer to the macro defined here
  --> $DIR/local-modularized-tricky-fail-1.rs:6:5
   |
LL | /     macro_rules! exported {
LL | |         () => ()
LL | |     }
   | |_____^
...
LL |       define_exported!();
   |       ------------------ in this macro invocation
note: `exported` could also refer to the macro imported here
  --> $DIR/local-modularized-tricky-fail-1.rs:23:5
   |
LL | use inner1::*;
   |     ^^^^^^^^^
   = help: consider adding an explicit import of `exported` to disambiguate
   = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0659]: `panic` is ambiguous
  --> $DIR/local-modularized-tricky-fail-1.rs:36:5
   |
LL |     panic!();
   |     ^^^^^ ambiguous name
   |
   = note: ambiguous because of a conflict between a macro-expanded name and a less macro-expanded name from outer scope during import or macro resolution
   = note: `panic` could refer to a macro from prelude
note: `panic` could also refer to the macro defined here
  --> $DIR/local-modularized-tricky-fail-1.rs:12:5
   |
LL | /     macro_rules! panic {
LL | |         () => ()
LL | |     }
   | |_____^
...
LL |       define_panic!();
   |       --------------- in this macro invocation
   = help: use `crate::panic` to refer to this macro unambiguously
   = note: this error originates in the macro `define_panic` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0659]: `include` is ambiguous
  --> $DIR/local-modularized-tricky-fail-1.rs:47:1
   |
LL | include!();
   | ^^^^^^^ ambiguous name
   |
   = note: ambiguous because of a conflict between a macro-expanded name and a less macro-expanded name from outer scope during import or macro resolution
   = note: `include` could refer to a macro from prelude
note: `include` could also refer to the macro defined here
  --> $DIR/local-modularized-tricky-fail-1.rs:18:5
   |
LL | /     macro_rules! include {
LL | |         () => ()
LL | |     }
   | |_____^
...
LL |       define_include!();
   |       ----------------- in this macro invocation
   = help: use `crate::include` to refer to this macro unambiguously
   = note: this error originates in the macro `define_include` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0659`.
