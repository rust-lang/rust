error[E0635]: unknown feature `const_cmp`
  --> $DIR/derive-const-use.rs:3:30
   |
LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]
   |                              ^^^^^^^^^

error[E0635]: unknown feature `const_default_impls`
  --> $DIR/derive-const-use.rs:3:41
   |
LL | #![feature(const_trait_impl, const_cmp, const_default_impls, derive_const)]
   |                                         ^^^^^^^^^^^^^^^^^^^

error: const `impl` for trait `Default` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:7:12
   |
LL | impl const Default for A {
   |            ^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: const `impl` for trait `Default` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:15:16
   |
LL | #[derive_const(Default, PartialEq)]
   |                ^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change
   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:11:12
   |
LL | impl const PartialEq for A {
   |            ^^^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change

error: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`
  --> $DIR/derive-const-use.rs:15:25
   |
LL | #[derive_const(Default, PartialEq)]
   |                         ^^^^^^^^^
   |
   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`
   = note: adding a non-const method body in the future would be a breaking change
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const fn `<S as Default>::default` in constants
  --> $DIR/derive-const-use.rs:18:35
   |
LL | const _: () = assert!(S((), A) == S::default());
   |                                   ^^^^^^^^^^^^
   |
   = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const operator in constants
  --> $DIR/derive-const-use.rs:18:23
   |
LL | const _: () = assert!(S((), A) == S::default());
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: calls in constants are limited to constant functions, tuple structs and tuple variants

error[E0015]: cannot call non-const fn `<() as Default>::default` in constant functions
  --> $DIR/derive-const-use.rs:16:14
   |
LL | #[derive_const(Default, PartialEq)]
   |                ------- in this derive macro expansion
LL | pub struct S((), A);
   |              ^^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const fn `<A as Default>::default` in constant functions
  --> $DIR/derive-const-use.rs:16:18
   |
LL | #[derive_const(Default, PartialEq)]
   |                ------- in this derive macro expansion
LL | pub struct S((), A);
   |                  ^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
  --> $DIR/derive-const-use.rs:16:14
   |
LL | #[derive_const(Default, PartialEq)]
   |                         --------- in this derive macro expansion
LL | pub struct S((), A);
   |              ^^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0015]: cannot call non-const operator in constant functions
  --> $DIR/derive-const-use.rs:16:18
   |
LL | #[derive_const(Default, PartialEq)]
   |                         --------- in this derive macro expansion
LL | pub struct S((), A);
   |                  ^
   |
   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants
   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 12 previous errors

Some errors have detailed explanations: E0015, E0635.
For more information about an error, try `rustc --explain E0015`.
