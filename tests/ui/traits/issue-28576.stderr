error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/issue-28576.rs:5:16
   |
LL | pub trait Bar: Foo<Assoc=()> {
   |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `Foo`
  --> $DIR/issue-28576.rs:1:15
   |
LL | pub trait Foo<RHS=Self> {
   |               ^^^^^^^^ required by the implicit `Sized` requirement on this type parameter in `Foo`
help: consider further restricting `Self`
   |
LL | pub trait Bar: Foo<Assoc=()> + Sized {
   |                              +++++++
help: consider relaxing the implicit `Sized` restriction
   |
LL | pub trait Foo<RHS: ?Sized=Self> {
   |                  ++++++++

error[E0038]: the trait `Bar` cannot be made into an object
  --> $DIR/issue-28576.rs:9:12
   |
LL | /            dyn Bar
LL | |               <Assoc=()>
   | |________________________^ `Bar` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-28576.rs:5:16
   |
LL | pub trait Bar: Foo<Assoc=()> {
   |           ---  ^^^^^^^^^^^^^
   |           |    |   |
   |           |    |   ...because it uses `Self` as a type parameter
   |           |    ...because it uses `Self` as a type parameter
   |           this trait cannot be made into an object...
help: consider using an opaque type instead
   |
LL |            impl Bar
   |            ~~~~

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> $DIR/issue-28576.rs:5:16
   |
LL | pub trait Bar: Foo<Assoc=()> {
   |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by an implicit `Sized` bound in `Foo`
  --> $DIR/issue-28576.rs:1:15
   |
LL | pub trait Foo<RHS=Self> {
   |               ^^^^^^^^ required by the implicit `Sized` requirement on this type parameter in `Foo`
help: consider further restricting `Self`
   |
LL |     ) where Self: Sized;
   |       +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
   |
LL | pub trait Foo<RHS: ?Sized=Self> {
   |                  ++++++++

error: aborting due to 3 previous errors

Some errors have detailed explanations: E0038, E0277.
For more information about an error, try `rustc --explain E0038`.
