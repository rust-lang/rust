error: coroutine cannot be sent between threads safely
  --> $DIR/ref-upvar-not-send.rs:19:5
   |
LL | /     assert_send(
LL | |
LL | |
LL | |         #[coroutine]
...  |
LL | |         },
LL | |     );
   | |_____^ coroutine is not `Send`
   |
   = help: the trait `Sync` is not implemented for `*mut ()`
note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`
  --> $DIR/ref-upvar-not-send.rs:13:9
   |
LL |     let x: &*mut () = &std::ptr::null_mut();
   |         ^ has type `&*mut ()` which is not `Send`, because `*mut ()` is not `Sync`
note: required by a bound in `assert_send`
  --> $DIR/ref-upvar-not-send.rs:6:19
   |
LL | fn assert_send<T: Send>(_: T) {}
   |                   ^^^^ required by this bound in `assert_send`

error: coroutine cannot be sent between threads safely
  --> $DIR/ref-upvar-not-send.rs:28:5
   |
LL | /     assert_send(
LL | |
LL | |
LL | |         #[coroutine]
...  |
LL | |         },
LL | |     );
   | |_____^ coroutine is not `Send`
   |
   = help: within `{coroutine@$DIR/ref-upvar-not-send.rs:32:9: 32:16}`, the trait `Send` is not implemented for `*mut ()`
note: captured value is not `Send` because `&mut` references cannot be sent unless their referent is `Send`
  --> $DIR/ref-upvar-not-send.rs:16:9
   |
LL |     let y: &mut *mut () = &mut std::ptr::null_mut();
   |         ^ has type `&mut *mut ()` which is not `Send`, because `*mut ()` is not `Send`
note: required by a bound in `assert_send`
  --> $DIR/ref-upvar-not-send.rs:6:19
   |
LL | fn assert_send<T: Send>(_: T) {}
   |                   ^^^^ required by this bound in `assert_send`

error: aborting due to 2 previous errors

