error[E0505]: cannot move out of `x` because it is borrowed
  --> $DIR/associated-types-outlives.rs:22:14
   |
LL |                     F: for<'a> FnOnce(<T as Foo<'a>>::Bar)>(x: T, f: F) {
   |                                                             - binding `x` declared here
...
LL |         's: loop { y = denormalise(&x); break }
   |                                    -- borrow of `x` occurs here
LL |         drop(x);
   |              ^ move out of `x` occurs here
LL |         return f(y);
   |                  - borrow later used here
   |
help: if `T` implemented `Clone`, you could clone the value
  --> $DIR/associated-types-outlives.rs:17:21
   |
LL | pub fn free_and_use<T: for<'a> Foo<'a>,
   |                     ^ consider constraining this type parameter with `Clone`
...
LL |         's: loop { y = denormalise(&x); break }
   |                                     - you could clone this value

error: aborting due to 1 previous error

For more information about this error, try `rustc --explain E0505`.
