error[E0038]: the trait `Bar` cannot be made into an object
  --> $DIR/issue-18959.rs:11:12
   |
LL | fn foo(b: &dyn Bar) {
   |            ^^^^^^^ `Bar` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-18959.rs:1:20
   |
LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }
   |                    ^^^ ...because method `foo` has generic type parameters
LL | pub trait Bar: Foo { }
   |           --- this trait cannot be made into an object...
   = help: consider moving `foo` to another trait

error[E0038]: the trait `Bar` cannot be made into an object
  --> $DIR/issue-18959.rs:13:5
   |
LL |     b.foo(&0)
   |     ^^^^^^^^^ `Bar` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-18959.rs:1:20
   |
LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }
   |                    ^^^ ...because method `foo` has generic type parameters
LL | pub trait Bar: Foo { }
   |           --- this trait cannot be made into an object...
   = help: consider moving `foo` to another trait

error[E0038]: the trait `Bar` cannot be made into an object
  --> $DIR/issue-18959.rs:19:15
   |
LL |     let test: &dyn Bar = &mut thing;
   |               ^^^^^^^^ `Bar` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-18959.rs:1:20
   |
LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }
   |                    ^^^ ...because method `foo` has generic type parameters
LL | pub trait Bar: Foo { }
   |           --- this trait cannot be made into an object...
   = help: consider moving `foo` to another trait

error[E0038]: the trait `Bar` cannot be made into an object
  --> $DIR/issue-18959.rs:19:26
   |
LL |     let test: &dyn Bar = &mut thing;
   |                          ^^^^^^^^^^ `Bar` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-18959.rs:1:20
   |
LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }
   |                    ^^^ ...because method `foo` has generic type parameters
LL | pub trait Bar: Foo { }
   |           --- this trait cannot be made into an object...
   = help: consider moving `foo` to another trait
   = note: required for the cast from `&mut Thing` to `&dyn Bar`

error[E0038]: the trait `Bar` cannot be made into an object
  --> $DIR/issue-18959.rs:22:9
   |
LL |     foo(test);
   |         ^^^^ `Bar` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/issue-18959.rs:1:20
   |
LL | pub trait Foo { fn foo<T>(&self, ext_thing: &T); }
   |                    ^^^ ...because method `foo` has generic type parameters
LL | pub trait Bar: Foo { }
   |           --- this trait cannot be made into an object...
   = help: consider moving `foo` to another trait

error: aborting due to 5 previous errors

For more information about this error, try `rustc --explain E0038`.
