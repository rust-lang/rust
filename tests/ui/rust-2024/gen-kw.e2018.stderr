error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:6:4
   |
LL | fn gen() {}
   |    ^^^ help: you can use a raw identifier to stay compatible: `r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>
note: the lint level is defined here
  --> $DIR/gen-kw.rs:4:9
   |
LL | #![deny(rust_2024_compatibility)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^
   = note: `#[deny(keyword_idents_2024)]` implied by `#[deny(rust_2024_compatibility)]`

error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:12:9
   |
LL |     let gen = r#gen;
   |         ^^^ help: you can use a raw identifier to stay compatible: `r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>

error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:19:27
   |
LL |     () => { mod test { fn gen() {} } }
   |                           ^^^ help: you can use a raw identifier to stay compatible: `r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>

error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:25:9
   |
LL | fn test<'gen>(_: &'gen i32) {}
   |         ^^^^ help: you can use a raw identifier to stay compatible: `'r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>

error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:25:19
   |
LL | fn test<'gen>(_: &'gen i32) {}
   |                   ^^^^ help: you can use a raw identifier to stay compatible: `'r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>

error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:33:13
   |
LL | struct Test<'gen>(Box<Test<'gen>>, &'gen ());
   |             ^^^^ help: you can use a raw identifier to stay compatible: `'r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>

error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:33:28
   |
LL | struct Test<'gen>(Box<Test<'gen>>, &'gen ());
   |                            ^^^^ help: you can use a raw identifier to stay compatible: `'r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>

error: `gen` is a keyword in the 2024 edition
  --> $DIR/gen-kw.rs:33:37
   |
LL | struct Test<'gen>(Box<Test<'gen>>, &'gen ());
   |                                     ^^^^ help: you can use a raw identifier to stay compatible: `'r#gen`
   |
   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2024!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/gen-keyword.html>

error: aborting due to 8 previous errors

