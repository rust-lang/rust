warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-3.rs:4:19
   |
LL | trait B { fn f(a: A) -> A; }
   |                   ^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: `#[warn(bare_trait_objects)]` on by default
help: if this is a dyn-compatible trait, use `dyn`
   |
LL | trait B { fn f(a: dyn A) -> A; }
   |                   +++

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-3.rs:4:25
   |
LL | trait B { fn f(a: A) -> A; }
   |                         ^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
   |
LL | trait B { fn f(a: A) -> dyn A; }
   |                         +++

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-3.rs:14:19
   |
LL | trait A { fn g(b: B) -> B; }
   |                   ^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
   |
LL | trait A { fn g(b: dyn B) -> B; }
   |                   +++

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-3.rs:14:25
   |
LL | trait A { fn g(b: B) -> B; }
   |                         ^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
help: if this is a dyn-compatible trait, use `dyn`
   |
LL | trait A { fn g(b: B) -> dyn B; }
   |                         +++

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-3.rs:4:19
   |
LL | trait B { fn f(a: A) -> A; }
   |                   ^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
help: if this is a dyn-compatible trait, use `dyn`
   |
LL | trait B { fn f(a: dyn A) -> A; }
   |                   +++

error[E0038]: the trait `A` cannot be made into an object
  --> $DIR/avoid-ice-on-warning-3.rs:4:19
   |
LL | trait B { fn f(a: A) -> A; }
   |                   ^ `A` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/avoid-ice-on-warning-3.rs:14:14
   |
LL | trait A { fn g(b: B) -> B; }
   |       -      ^ ...because associated function `g` has no `self` parameter
   |       |
   |       this trait cannot be made into an object...
help: consider turning `g` into a method by giving it a `&self` argument
   |
LL | trait A { fn g(&self, b: B) -> B; }
   |                ++++++
help: alternatively, consider constraining `g` so it does not apply to trait objects
   |
LL | trait A { fn g(b: B) -> B where Self: Sized; }
   |                           +++++++++++++++++

warning: trait objects without an explicit `dyn` are deprecated
  --> $DIR/avoid-ice-on-warning-3.rs:14:19
   |
LL | trait A { fn g(b: B) -> B; }
   |                   ^
   |
   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>
   = note: duplicate diagnostic emitted due to `-Z deduplicate-diagnostics=no`
help: if this is a dyn-compatible trait, use `dyn`
   |
LL | trait A { fn g(b: dyn B) -> B; }
   |                   +++

error[E0038]: the trait `B` cannot be made into an object
  --> $DIR/avoid-ice-on-warning-3.rs:14:19
   |
LL | trait A { fn g(b: B) -> B; }
   |                   ^ `B` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/avoid-ice-on-warning-3.rs:4:14
   |
LL | trait B { fn f(a: A) -> A; }
   |       -      ^ ...because associated function `f` has no `self` parameter
   |       |
   |       this trait cannot be made into an object...
help: consider turning `f` into a method by giving it a `&self` argument
   |
LL | trait B { fn f(&self, a: A) -> A; }
   |                ++++++
help: alternatively, consider constraining `f` so it does not apply to trait objects
   |
LL | trait B { fn f(a: A) -> A where Self: Sized; }
   |                           +++++++++++++++++

error: aborting due to 2 previous errors; 6 warnings emitted

For more information about this error, try `rustc --explain E0038`.
