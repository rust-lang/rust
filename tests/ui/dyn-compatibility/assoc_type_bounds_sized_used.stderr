error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> $DIR/assoc_type_bounds_sized_used.rs:11:14
   |
LL | fn bop<T: Bop + ?Sized>() {
   |        - this type parameter needs to be `Sized`
LL |     let _ = <T as Bop>::Bar::default();
   |              ^ doesn't have a size known at compile-time
   |
note: required by a bound in `Bop::Bar`
  --> $DIR/assoc_type_bounds_sized_used.rs:7:15
   |
LL |     type Bar: Default
   |          --- required by a bound in this associated type
LL |     where
LL |         Self: Sized;
   |               ^^^^^ required by this bound in `Bop::Bar`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
   |
LL - fn bop<T: Bop + ?Sized>() {
LL + fn bop<T: Bop>() {
   |
help: consider relaxing the implicit `Sized` restriction
   |
LL |     type Bar: Default + ?Sized
   |                       ++++++++

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> $DIR/assoc_type_bounds_sized_used.rs:11:13
   |
LL | fn bop<T: Bop + ?Sized>() {
   |        - this type parameter needs to be `Sized`
LL |     let _ = <T as Bop>::Bar::default();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by a bound in `Bop::Bar`
  --> $DIR/assoc_type_bounds_sized_used.rs:7:15
   |
LL |     type Bar: Default
   |          --- required by a bound in this associated type
LL |     where
LL |         Self: Sized;
   |               ^^^^^ required by this bound in `Bop::Bar`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
   |
LL - fn bop<T: Bop + ?Sized>() {
LL + fn bop<T: Bop>() {
   |
help: consider relaxing the implicit `Sized` restriction
   |
LL |     type Bar: Default + ?Sized
   |                       ++++++++

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> $DIR/assoc_type_bounds_sized_used.rs:11:13
   |
LL | fn bop<T: Bop + ?Sized>() {
   |        - this type parameter needs to be `Sized`
LL |     let _ = <T as Bop>::Bar::default();
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by a bound in `Bop::Bar`
  --> $DIR/assoc_type_bounds_sized_used.rs:7:15
   |
LL |     type Bar: Default
   |          --- required by a bound in this associated type
LL |     where
LL |         Self: Sized;
   |               ^^^^^ required by this bound in `Bop::Bar`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
   |
LL - fn bop<T: Bop + ?Sized>() {
LL + fn bop<T: Bop>() {
   |
help: consider relaxing the implicit `Sized` restriction
   |
LL |     type Bar: Default + ?Sized
   |                       ++++++++

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0277`.
