error[E0038]: the trait `Foo` cannot be made into an object
  --> $DIR/almost-supertrait-associated-type.rs:22:20
   |
LL | impl<T, U> Dyn for dyn Foo<T, U> + '_ {
   |                    ^^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/almost-supertrait-associated-type.rs:34:34
   |
LL | trait Foo<T, U>: Super<ActuallySuper, Assoc = T>
   |       --- this trait cannot be made into an object...
...
LL |     fn transmute(&self, t: T) -> <Self as Super<NotActuallySuper>>::Assoc;
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `transmute` references the `Self` type in its return type
   = help: consider moving `transmute` to another trait
   = help: only type `std::marker::PhantomData<T>` implements the trait, consider using it directly instead

error[E0277]: the trait bound `dyn Foo<T, U>: Super<ActuallySuper>` is not satisfied
  --> $DIR/almost-supertrait-associated-type.rs:7:43
   |
LL |     (&PhantomData::<T> as &dyn Foo<T, U>).transmute(t)
   |                                           ^^^^^^^^^ the trait `Super<ActuallySuper>` is not implemented for `dyn Foo<T, U>`
   |
   = help: the following other types implement trait `Super<Q>`:
             `PhantomData<T>` implements `Super<ActuallySuper>`
             `PhantomData<T>` implements `Super<NotActuallySuper>`
note: required by a bound in `Foo::transmute`
  --> $DIR/almost-supertrait-associated-type.rs:30:18
   |
LL | trait Foo<T, U>: Super<ActuallySuper, Assoc = T>
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::transmute`
...
LL |     fn transmute(&self, t: T) -> <Self as Super<NotActuallySuper>>::Assoc;
   |        --------- required by a bound in this associated function

error[E0038]: the trait `Foo` cannot be made into an object
  --> $DIR/almost-supertrait-associated-type.rs:7:27
   |
LL |     (&PhantomData::<T> as &dyn Foo<T, U>).transmute(t)
   |                           ^^^^^^^^^^^^^^ `Foo` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/almost-supertrait-associated-type.rs:34:34
   |
LL | trait Foo<T, U>: Super<ActuallySuper, Assoc = T>
   |       --- this trait cannot be made into an object...
...
LL |     fn transmute(&self, t: T) -> <Self as Super<NotActuallySuper>>::Assoc;
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `transmute` references the `Self` type in its return type
   = help: consider moving `transmute` to another trait
   = help: only type `std::marker::PhantomData<T>` implements the trait, consider using it directly instead

error[E0038]: the trait `Foo` cannot be made into an object
  --> $DIR/almost-supertrait-associated-type.rs:7:6
   |
LL |     (&PhantomData::<T> as &dyn Foo<T, U>).transmute(t)
   |      ^^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object
   |
note: for a trait to be "dyn-compatible" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/almost-supertrait-associated-type.rs:34:34
   |
LL | trait Foo<T, U>: Super<ActuallySuper, Assoc = T>
   |       --- this trait cannot be made into an object...
...
LL |     fn transmute(&self, t: T) -> <Self as Super<NotActuallySuper>>::Assoc;
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `transmute` references the `Self` type in its return type
   = help: consider moving `transmute` to another trait
   = help: only type `std::marker::PhantomData<T>` implements the trait, consider using it directly instead
   = note: required for the cast from `&PhantomData<T>` to `&dyn Foo<T, U>`

error: aborting due to 4 previous errors

Some errors have detailed explanations: E0038, E0277.
For more information about an error, try `rustc --explain E0038`.
