error[E0080]: evaluation of constant value failed
  --> $DIR/uninhabited.rs:41:9
   |
LL |         assert!(false);
   |         ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/uninhabited.rs:41:9
   |
   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0080]: evaluation of constant value failed
  --> $DIR/uninhabited.rs:63:9
   |
LL |         assert!(false);
   |         ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/uninhabited.rs:63:9
   |
   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0080]: evaluation of constant value failed
  --> $DIR/uninhabited.rs:87:9
   |
LL |         assert!(false);
   |         ^^^^^^^^^^^^^^ the evaluated program panicked at 'assertion failed: false', $DIR/uninhabited.rs:87:9
   |
   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `()` cannot be safely transmuted into `void::Void`
  --> $DIR/uninhabited.rs:29:41
   |
LL |     assert::is_maybe_transmutable::<(), Void>();
   |                                         ^^^^ `void::Void` is uninhabited
   |
note: required by a bound in `is_maybe_transmutable`
  --> $DIR/uninhabited.rs:10:14
   |
LL |       pub fn is_maybe_transmutable<Src, Dst>()
   |              --------------------- required by a bound in this function
LL |       where
LL |           Dst: TransmuteFrom<Src, {
   |  ______________^
LL | |             Assume {
LL | |                 alignment: true,
LL | |                 lifetimes: true,
...  |
LL | |         }>
   | |__________^ required by this bound in `is_maybe_transmutable`

error[E0277]: `()` cannot be safely transmuted into `yawning_void_struct::Void`
  --> $DIR/uninhabited.rs:49:41
   |
LL |     assert::is_maybe_transmutable::<(), Void>();
   |                                         ^^^^ `yawning_void_struct::Void` is uninhabited
   |
note: required by a bound in `is_maybe_transmutable`
  --> $DIR/uninhabited.rs:10:14
   |
LL |       pub fn is_maybe_transmutable<Src, Dst>()
   |              --------------------- required by a bound in this function
LL |       where
LL |           Dst: TransmuteFrom<Src, {
   |  ______________^
LL | |             Assume {
LL | |                 alignment: true,
LL | |                 lifetimes: true,
...  |
LL | |         }>
   | |__________^ required by this bound in `is_maybe_transmutable`

error[E0277]: `()` cannot be safely transmuted into `yawning_void_enum::Void`
  --> $DIR/uninhabited.rs:71:41
   |
LL |     assert::is_maybe_transmutable::<(), Void>();
   |                                         ^^^^ `yawning_void_enum::Void` is uninhabited
   |
note: required by a bound in `is_maybe_transmutable`
  --> $DIR/uninhabited.rs:10:14
   |
LL |       pub fn is_maybe_transmutable<Src, Dst>()
   |              --------------------- required by a bound in this function
LL |       where
LL |           Dst: TransmuteFrom<Src, {
   |  ______________^
LL | |             Assume {
LL | |                 alignment: true,
LL | |                 lifetimes: true,
...  |
LL | |         }>
   | |__________^ required by this bound in `is_maybe_transmutable`

error[E0277]: `u128` cannot be safely transmuted into `DistantVoid`
  --> $DIR/uninhabited.rs:92:43
   |
LL |     assert::is_maybe_transmutable::<u128, DistantVoid>();
   |                                           ^^^^^^^^^^^ at least one value of `u128` isn't a bit-valid value of `DistantVoid`
   |
note: required by a bound in `is_maybe_transmutable`
  --> $DIR/uninhabited.rs:10:14
   |
LL |       pub fn is_maybe_transmutable<Src, Dst>()
   |              --------------------- required by a bound in this function
LL |       where
LL |           Dst: TransmuteFrom<Src, {
   |  ______________^
LL | |             Assume {
LL | |                 alignment: true,
LL | |                 lifetimes: true,
...  |
LL | |         }>
   | |__________^ required by this bound in `is_maybe_transmutable`

error[E0277]: `Src` cannot be safely transmuted into `issue_126267::Error`
  --> $DIR/uninhabited.rs:108:42
   |
LL |     assert::is_maybe_transmutable::<Src, Dst>();
   |                                          ^^^ the size of `Src` is smaller than the size of `issue_126267::Error`
   |
note: required by a bound in `is_maybe_transmutable`
  --> $DIR/uninhabited.rs:10:14
   |
LL |       pub fn is_maybe_transmutable<Src, Dst>()
   |              --------------------- required by a bound in this function
LL |       where
LL |           Dst: TransmuteFrom<Src, {
   |  ______________^
LL | |             Assume {
LL | |                 alignment: true,
LL | |                 lifetimes: true,
...  |
LL | |         }>
   | |__________^ required by this bound in `is_maybe_transmutable`

error: aborting due to 8 previous errors

Some errors have detailed explanations: E0080, E0277.
For more information about an error, try `rustc --explain E0080`.
