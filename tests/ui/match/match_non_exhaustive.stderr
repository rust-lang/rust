error[E0004]: non-exhaustive patterns: `L::B` not covered
  --> $DIR/match_non_exhaustive.rs:23:11
   |
LL |     match l { L::A => () };
   |           ^ pattern `L::B` not covered
   |
note: `L` defined here
  --> $DIR/match_non_exhaustive.rs:10:6
   |
LL | enum L { A, B }
   |      ^      - not covered
   = note: the matched value is of type `L`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |     match l { L::A => (), L::B => todo!() };
   |                         +++++++++++++++++

error[E0004]: non-exhaustive patterns: type `E1` is non-empty
  --> $DIR/match_non_exhaustive.rs:28:11
   |
LL |     match e1 {};
   |           ^^
   |
note: `E1` defined here
  --> $DIR/auxiliary/match_non_exhaustive_lib.rs:2:1
   |
LL | pub enum E1 {}
   | ^^^^^^^^^^^
   = note: the matched value is of type `E1`, which is marked as non-exhaustive
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown
   |
LL ~     match e1 {
LL +         _ => todo!(),
LL ~     };
   |

error[E0004]: non-exhaustive patterns: `_` not covered
  --> $DIR/match_non_exhaustive.rs:30:11
   |
LL |     match e2 { E2::A => (), E2::B => () };
   |           ^^ pattern `_` not covered
   |
note: `E2` defined here
  --> $DIR/auxiliary/match_non_exhaustive_lib.rs:5:1
   |
LL | pub enum E2 { A, B }
   | ^^^^^^^^^^^
   = note: the matched value is of type `E2`
   = note: `E2` is marked as non-exhaustive, so a wildcard `_` is necessary to match exhaustively
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL |     match e2 { E2::A => (), E2::B => (), _ => todo!() };
   |                                        ++++++++++++++

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0004`.
