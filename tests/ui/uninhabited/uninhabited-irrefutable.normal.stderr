error[E0005]: refutable pattern in local binding
  --> $DIR/uninhabited-irrefutable.rs:30:9
   |
LL |     let Foo::D(_y, _z) = x;
   |         ^^^^^^^^^^^^^^ pattern `Foo::A(_)` not covered
   |
   = note: `let` bindings require an "irrefutable pattern", like a `struct` or an `enum` with only one variant
   = note: for more information, visit https://doc.rust-lang.org/book/ch19-02-refutability.html
note: `Foo` defined here
  --> $DIR/uninhabited-irrefutable.rs:19:6
   |
LL | enum Foo {
   |      ^^^
LL |
LL |     A(foo::SecretlyEmpty),
   |     - not covered
   = note: pattern `Foo::A(_)` is currently uninhabited, but this variant contains private fields which may become inhabited in the future
   = note: the matched value is of type `Foo`
help: you might want to use `let else` to handle the variant that isn't matched
   |
LL |     let Foo::D(_y, _z) = x else { todo!() };
   |                            ++++++++++++++++

error: aborting due to 1 previous error

For more information about this error, try `rustc --explain E0005`.
