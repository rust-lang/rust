error[E0277]: the trait bound `&T: CoerceUnsized<&dyn Foo>` is not satisfied in `T`
  --> $DIR/dst-object-from-unsized-type.rs:11:23
   |
LL | fn test1<T: ?Sized + Foo>(t: &T) {
   |          - this type parameter needs to be `Sized`
LL |     let u: &dyn Foo = t;
   |                       ^ within `T`, the trait `Sized` is not implemented for `T`
   |
   = note: required because it appears within the type `T`
   = note: required for `&T` to implement `CoerceUnsized<&dyn Foo>`
   = note: required for the cast from `&T` to `&dyn Foo`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
   |
LL - fn test1<T: ?Sized + Foo>(t: &T) {
LL + fn test1<T: Foo>(t: &T) {
   |

error[E0277]: the trait bound `&T: CoerceUnsized<&dyn Foo>` is not satisfied in `T`
  --> $DIR/dst-object-from-unsized-type.rs:17:23
   |
LL | fn test2<T: ?Sized + Foo>(t: &T) {
   |          - this type parameter needs to be `Sized`
LL |     let v: &dyn Foo = t as &dyn Foo;
   |                       ^ within `T`, the trait `Sized` is not implemented for `T`
   |
   = note: required because it appears within the type `T`
   = note: required for `&T` to implement `CoerceUnsized<&dyn Foo>`
   = note: required for the cast from `&T` to `&dyn Foo`
help: consider removing the `?Sized` bound to make the type parameter `Sized`
   |
LL - fn test2<T: ?Sized + Foo>(t: &T) {
LL + fn test2<T: Foo>(t: &T) {
   |

error[E0277]: the trait bound `&str: CoerceUnsized<&dyn Foo>` is not satisfied in `str`
  --> $DIR/dst-object-from-unsized-type.rs:23:28
   |
LL |     let _: &[&dyn Foo] = &["hi"];
   |                            ^^^^ within `str`, the trait `Sized` is not implemented for `str`
   |
   = note: `str` is considered to contain a `[u8]` slice for auto trait purposes
   = note: required for `&str` to implement `CoerceUnsized<&dyn Foo>`
   = note: required for the cast from `&'static str` to `&dyn Foo`

error[E0277]: the trait bound `&[u8]: CoerceUnsized<&dyn Foo>` is not satisfied in `[u8]`
  --> $DIR/dst-object-from-unsized-type.rs:29:23
   |
LL |     let _: &dyn Foo = x as &dyn Foo;
   |                       ^ within `[u8]`, the trait `Sized` is not implemented for `[u8]`
   |
   = note: required because it appears within the type `[u8]`
   = note: required for `&[u8]` to implement `CoerceUnsized<&dyn Foo>`
   = note: required for the cast from `&[u8]` to `&dyn Foo`

error: aborting due to 4 previous errors

For more information about this error, try `rustc --explain E0277`.
