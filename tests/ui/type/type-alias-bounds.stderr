warning: bounds on generic parameters in type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:8:14
   |
LL | type SVec<T: Send + Send> = Vec<T>;
   |            --^^^^---^^^^
   |            |        |
   |            |        will not be checked at usage sites of the type alias
   |            help: remove this bound
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics
   = note: `#[warn(type_alias_bounds)]` on by default

warning: where clauses on type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:10:21
   |
LL | type S2Vec<T> where T: Send = Vec<T>;
   |               ------^^^^^^^
   |               |     |
   |               |     will not be checked at usage sites of the type alias
   |               help: remove this where clause
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics

warning: bounds on generic parameters in type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:12:19
   |
LL | type VVec<'b, 'a: 'b + 'b> = (&'b u32, Vec<&'a i32>);
   |                 --^^---^^
   |                 |      |
   |                 |      will not be checked at usage sites of the type alias
   |                 help: remove this bound
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics

warning: bounds on generic parameters in type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:14:18
   |
LL | type WVec<'b, T: 'b + 'b> = (&'b u32, Vec<T>);
   |                --^^---^^
   |                |      |
   |                |      will not be checked at usage sites of the type alias
   |                help: remove this bound
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics

warning: where clauses on type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:16:25
   |
LL | type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);
   |                   ------^^^^^--^^^^^
   |                   |            |
   |                   |            will not be checked at usage sites of the type alias
   |                   help: remove this where clause
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics

warning: bounds on generic parameters in type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:48:12
   |
LL | type T1<U: Bound> = U::Assoc;
   |            ^^^^^ will not be checked at usage sites of the type alias
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics
help: remove this bound
   |
LL - type T1<U: Bound> = U::Assoc;
LL + type T1<U> = U::Assoc;
   |
help: fully qualify this associated type
   |
LL | type T1<U: Bound> = <U as /* Trait */>::Assoc;
   |                     +  +++++++++++++++

warning: where clauses on type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:49:18
   |
LL | type T2<U> where U: Bound = U::Assoc;
   |                  ^^^^^^^^ will not be checked at usage sites of the type alias
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics
help: remove this where clause
   |
LL - type T2<U> where U: Bound = U::Assoc;
LL + type T2<U>  = U::Assoc;
   |
help: fully qualify this associated type
   |
LL | type T2<U> where U: Bound = <U as /* Trait */>::Assoc;
   |                             +  +++++++++++++++

warning: bounds on generic parameters in type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:57:12
   |
LL | type T5<U: Bound> = <U as Bound>::Assoc;
   |          --^^^^^
   |          | |
   |          | will not be checked at usage sites of the type alias
   |          help: remove this bound
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics

warning: bounds on generic parameters in type aliases are not enforced
  --> $DIR/type-alias-bounds.rs:58:12
   |
LL | type T6<U: Bound> = ::std::vec::Vec<U>;
   |          --^^^^^
   |          | |
   |          | will not be checked at usage sites of the type alias
   |          help: remove this bound
   |
   = note: this is a known limitation of the type checker that may be lifted in a future edition.
           see issue #112792 <https://github.com/rust-lang/rust/issues/112792> for more information
   = help: add `#![feature(lazy_type_alias)]` to the crate attributes to enable the desired semantics

warning: 9 warnings emitted

