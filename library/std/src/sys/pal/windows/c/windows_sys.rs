// Bindings generated by `windows-bindgen` 0.58.0

#![allow(non_snake_case, non_upper_case_globals, non_camel_case_types, dead_code, clippy::all)]
windows_targets::link!("advapi32.dll" "system" fn OpenProcessToken(processhandle : HANDLE, desiredaccess : TOKEN_ACCESS_MASK, tokenhandle : *mut HANDLE) -> BOOL);
windows_targets::link!("advapi32.dll" "system" "SystemFunction036" fn RtlGenRandom(randombuffer : *mut core::ffi::c_void, randombufferlength : u32) -> BOOLEAN);
windows_targets::link!("kernel32.dll" "system" fn AcquireSRWLockExclusive(srwlock : *mut SRWLOCK));
windows_targets::link!("kernel32.dll" "system" fn AcquireSRWLockShared(srwlock : *mut SRWLOCK));
windows_targets::link!("kernel32.dll" "system" fn AddVectoredExceptionHandler(first : u32, handler : PVECTORED_EXCEPTION_HANDLER) -> *mut core::ffi::c_void);
windows_targets::link!("kernel32.dll" "system" fn CancelIo(hfile : HANDLE) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn CloseHandle(hobject : HANDLE) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn CompareStringOrdinal(lpstring1 : PCWSTR, cchcount1 : i32, lpstring2 : PCWSTR, cchcount2 : i32, bignorecase : BOOL) -> COMPARESTRING_RESULT);
windows_targets::link!("kernel32.dll" "system" fn CopyFileExW(lpexistingfilename : PCWSTR, lpnewfilename : PCWSTR, lpprogressroutine : LPPROGRESS_ROUTINE, lpdata : *const core::ffi::c_void, pbcancel : *mut BOOL, dwcopyflags : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn CreateDirectoryW(lppathname : PCWSTR, lpsecurityattributes : *const SECURITY_ATTRIBUTES) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn CreateEventW(lpeventattributes : *const SECURITY_ATTRIBUTES, bmanualreset : BOOL, binitialstate : BOOL, lpname : PCWSTR) -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn CreateFileW(lpfilename : PCWSTR, dwdesiredaccess : u32, dwsharemode : FILE_SHARE_MODE, lpsecurityattributes : *const SECURITY_ATTRIBUTES, dwcreationdisposition : FILE_CREATION_DISPOSITION, dwflagsandattributes : FILE_FLAGS_AND_ATTRIBUTES, htemplatefile : HANDLE) -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn CreateHardLinkW(lpfilename : PCWSTR, lpexistingfilename : PCWSTR, lpsecurityattributes : *const SECURITY_ATTRIBUTES) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn CreateNamedPipeW(lpname : PCWSTR, dwopenmode : FILE_FLAGS_AND_ATTRIBUTES, dwpipemode : NAMED_PIPE_MODE, nmaxinstances : u32, noutbuffersize : u32, ninbuffersize : u32, ndefaulttimeout : u32, lpsecurityattributes : *const SECURITY_ATTRIBUTES) -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn CreatePipe(hreadpipe : *mut HANDLE, hwritepipe : *mut HANDLE, lppipeattributes : *const SECURITY_ATTRIBUTES, nsize : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn CreateProcessW(lpapplicationname : PCWSTR, lpcommandline : PWSTR, lpprocessattributes : *const SECURITY_ATTRIBUTES, lpthreadattributes : *const SECURITY_ATTRIBUTES, binherithandles : BOOL, dwcreationflags : PROCESS_CREATION_FLAGS, lpenvironment : *const core::ffi::c_void, lpcurrentdirectory : PCWSTR, lpstartupinfo : *const STARTUPINFOW, lpprocessinformation : *mut PROCESS_INFORMATION) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn CreateSymbolicLinkW(lpsymlinkfilename : PCWSTR, lptargetfilename : PCWSTR, dwflags : SYMBOLIC_LINK_FLAGS) -> BOOLEAN);
windows_targets::link!("kernel32.dll" "system" fn CreateThread(lpthreadattributes : *const SECURITY_ATTRIBUTES, dwstacksize : usize, lpstartaddress : LPTHREAD_START_ROUTINE, lpparameter : *const core::ffi::c_void, dwcreationflags : THREAD_CREATION_FLAGS, lpthreadid : *mut u32) -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn CreateWaitableTimerExW(lptimerattributes : *const SECURITY_ATTRIBUTES, lptimername : PCWSTR, dwflags : u32, dwdesiredaccess : u32) -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn DeleteFileW(lpfilename : PCWSTR) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn DeleteProcThreadAttributeList(lpattributelist : LPPROC_THREAD_ATTRIBUTE_LIST));
windows_targets::link!("kernel32.dll" "system" fn DeviceIoControl(hdevice : HANDLE, dwiocontrolcode : u32, lpinbuffer : *const core::ffi::c_void, ninbuffersize : u32, lpoutbuffer : *mut core::ffi::c_void, noutbuffersize : u32, lpbytesreturned : *mut u32, lpoverlapped : *mut OVERLAPPED) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn DuplicateHandle(hsourceprocesshandle : HANDLE, hsourcehandle : HANDLE, htargetprocesshandle : HANDLE, lptargethandle : *mut HANDLE, dwdesiredaccess : u32, binherithandle : BOOL, dwoptions : DUPLICATE_HANDLE_OPTIONS) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn ExitProcess(uexitcode : u32) -> !);
windows_targets::link!("kernel32.dll" "system" fn FindClose(hfindfile : HANDLE) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn FindFirstFileExW(lpfilename : PCWSTR, finfolevelid : FINDEX_INFO_LEVELS, lpfindfiledata : *mut core::ffi::c_void, fsearchop : FINDEX_SEARCH_OPS, lpsearchfilter : *const core::ffi::c_void, dwadditionalflags : FIND_FIRST_EX_FLAGS) -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn FindNextFileW(hfindfile : HANDLE, lpfindfiledata : *mut WIN32_FIND_DATAW) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn FlushFileBuffers(hfile : HANDLE) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn FormatMessageW(dwflags : FORMAT_MESSAGE_OPTIONS, lpsource : *const core::ffi::c_void, dwmessageid : u32, dwlanguageid : u32, lpbuffer : PWSTR, nsize : u32, arguments : *const *const i8) -> u32);
windows_targets::link!("kernel32.dll" "system" fn FreeEnvironmentStringsW(penv : PCWSTR) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn GetActiveProcessorCount(groupnumber : u16) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetCommandLineW() -> PCWSTR);
windows_targets::link!("kernel32.dll" "system" fn GetConsoleMode(hconsolehandle : HANDLE, lpmode : *mut CONSOLE_MODE) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn GetCurrentDirectoryW(nbufferlength : u32, lpbuffer : PWSTR) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetCurrentProcess() -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn GetCurrentProcessId() -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetCurrentThread() -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn GetEnvironmentStringsW() -> PWSTR);
windows_targets::link!("kernel32.dll" "system" fn GetEnvironmentVariableW(lpname : PCWSTR, lpbuffer : PWSTR, nsize : u32) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetExitCodeProcess(hprocess : HANDLE, lpexitcode : *mut u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn GetFileAttributesW(lpfilename : PCWSTR) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetFileInformationByHandle(hfile : HANDLE, lpfileinformation : *mut BY_HANDLE_FILE_INFORMATION) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn GetFileInformationByHandleEx(hfile : HANDLE, fileinformationclass : FILE_INFO_BY_HANDLE_CLASS, lpfileinformation : *mut core::ffi::c_void, dwbuffersize : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn GetFileType(hfile : HANDLE) -> FILE_TYPE);
windows_targets::link!("kernel32.dll" "system" fn GetFinalPathNameByHandleW(hfile : HANDLE, lpszfilepath : PWSTR, cchfilepath : u32, dwflags : GETFINALPATHNAMEBYHANDLE_FLAGS) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetFullPathNameW(lpfilename : PCWSTR, nbufferlength : u32, lpbuffer : PWSTR, lpfilepart : *mut PWSTR) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetLastError() -> WIN32_ERROR);
windows_targets::link!("kernel32.dll" "system" fn GetModuleFileNameW(hmodule : HMODULE, lpfilename : PWSTR, nsize : u32) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetModuleHandleA(lpmodulename : PCSTR) -> HMODULE);
windows_targets::link!("kernel32.dll" "system" fn GetModuleHandleW(lpmodulename : PCWSTR) -> HMODULE);
windows_targets::link!("kernel32.dll" "system" fn GetOverlappedResult(hfile : HANDLE, lpoverlapped : *const OVERLAPPED, lpnumberofbytestransferred : *mut u32, bwait : BOOL) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn GetProcAddress(hmodule : HMODULE, lpprocname : PCSTR) -> FARPROC);
windows_targets::link!("kernel32.dll" "system" fn GetProcessId(process : HANDLE) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetStdHandle(nstdhandle : STD_HANDLE) -> HANDLE);
windows_targets::link!("kernel32.dll" "system" fn GetSystemDirectoryW(lpbuffer : PWSTR, usize : u32) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetSystemInfo(lpsysteminfo : *mut SYSTEM_INFO));
windows_targets::link!("kernel32.dll" "system" fn GetSystemTimeAsFileTime(lpsystemtimeasfiletime : *mut FILETIME));
windows_targets::link!("kernel32.dll" "system" fn GetSystemTimePreciseAsFileTime(lpsystemtimeasfiletime : *mut FILETIME));
windows_targets::link!("kernel32.dll" "system" fn GetTempPathW(nbufferlength : u32, lpbuffer : PWSTR) -> u32);
windows_targets::link!("kernel32.dll" "system" fn GetWindowsDirectoryW(lpbuffer : PWSTR, usize : u32) -> u32);
windows_targets::link!("kernel32.dll" "system" fn InitOnceBeginInitialize(lpinitonce : *mut INIT_ONCE, dwflags : u32, fpending : *mut BOOL, lpcontext : *mut *mut core::ffi::c_void) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn InitOnceComplete(lpinitonce : *mut INIT_ONCE, dwflags : u32, lpcontext : *const core::ffi::c_void) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn InitializeProcThreadAttributeList(lpattributelist : LPPROC_THREAD_ATTRIBUTE_LIST, dwattributecount : u32, dwflags : u32, lpsize : *mut usize) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn LocalFree(hmem : HLOCAL) -> HLOCAL);
windows_targets::link!("kernel32.dll" "system" fn LockFileEx(hfile : HANDLE, dwflags : LOCK_FILE_FLAGS, dwreserved : u32, nnumberofbytestolocklow : u32, nnumberofbytestolockhigh : u32, lpoverlapped : *mut OVERLAPPED) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn MoveFileExW(lpexistingfilename : PCWSTR, lpnewfilename : PCWSTR, dwflags : MOVE_FILE_FLAGS) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn MultiByteToWideChar(codepage : u32, dwflags : MULTI_BYTE_TO_WIDE_CHAR_FLAGS, lpmultibytestr : PCSTR, cbmultibyte : i32, lpwidecharstr : PWSTR, cchwidechar : i32) -> i32);
windows_targets::link!("kernel32.dll" "system" fn QueryPerformanceCounter(lpperformancecount : *mut i64) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn QueryPerformanceFrequency(lpfrequency : *mut i64) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn ReadConsoleW(hconsoleinput : HANDLE, lpbuffer : *mut core::ffi::c_void, nnumberofcharstoread : u32, lpnumberofcharsread : *mut u32, pinputcontrol : *const CONSOLE_READCONSOLE_CONTROL) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn ReadFile(hfile : HANDLE, lpbuffer : *mut u8, nnumberofbytestoread : u32, lpnumberofbytesread : *mut u32, lpoverlapped : *mut OVERLAPPED) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn ReadFileEx(hfile : HANDLE, lpbuffer : *mut u8, nnumberofbytestoread : u32, lpoverlapped : *mut OVERLAPPED, lpcompletionroutine : LPOVERLAPPED_COMPLETION_ROUTINE) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn ReleaseSRWLockExclusive(srwlock : *mut SRWLOCK));
windows_targets::link!("kernel32.dll" "system" fn ReleaseSRWLockShared(srwlock : *mut SRWLOCK));
windows_targets::link!("kernel32.dll" "system" fn RemoveDirectoryW(lppathname : PCWSTR) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetCurrentDirectoryW(lppathname : PCWSTR) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetEnvironmentVariableW(lpname : PCWSTR, lpvalue : PCWSTR) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetFileAttributesW(lpfilename : PCWSTR, dwfileattributes : FILE_FLAGS_AND_ATTRIBUTES) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetFileInformationByHandle(hfile : HANDLE, fileinformationclass : FILE_INFO_BY_HANDLE_CLASS, lpfileinformation : *const core::ffi::c_void, dwbuffersize : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetFilePointerEx(hfile : HANDLE, lidistancetomove : i64, lpnewfilepointer : *mut i64, dwmovemethod : SET_FILE_POINTER_MOVE_METHOD) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetFileTime(hfile : HANDLE, lpcreationtime : *const FILETIME, lplastaccesstime : *const FILETIME, lplastwritetime : *const FILETIME) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetHandleInformation(hobject : HANDLE, dwmask : u32, dwflags : HANDLE_FLAGS) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetLastError(dwerrcode : WIN32_ERROR));
windows_targets::link!("kernel32.dll" "system" fn SetThreadStackGuarantee(stacksizeinbytes : *mut u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SetWaitableTimer(htimer : HANDLE, lpduetime : *const i64, lperiod : i32, pfncompletionroutine : PTIMERAPCROUTINE, lpargtocompletionroutine : *const core::ffi::c_void, fresume : BOOL) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn Sleep(dwmilliseconds : u32));
windows_targets::link!("kernel32.dll" "system" fn SleepConditionVariableSRW(conditionvariable : *mut CONDITION_VARIABLE, srwlock : *mut SRWLOCK, dwmilliseconds : u32, flags : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn SleepEx(dwmilliseconds : u32, balertable : BOOL) -> u32);
windows_targets::link!("kernel32.dll" "system" fn SwitchToThread() -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn TerminateProcess(hprocess : HANDLE, uexitcode : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn TlsAlloc() -> u32);
windows_targets::link!("kernel32.dll" "system" fn TlsFree(dwtlsindex : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn TlsGetValue(dwtlsindex : u32) -> *mut core::ffi::c_void);
windows_targets::link!("kernel32.dll" "system" fn TlsSetValue(dwtlsindex : u32, lptlsvalue : *const core::ffi::c_void) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn TryAcquireSRWLockExclusive(srwlock : *mut SRWLOCK) -> BOOLEAN);
windows_targets::link!("kernel32.dll" "system" fn TryAcquireSRWLockShared(srwlock : *mut SRWLOCK) -> BOOLEAN);
windows_targets::link!("kernel32.dll" "system" fn UnlockFile(hfile : HANDLE, dwfileoffsetlow : u32, dwfileoffsethigh : u32, nnumberofbytestounlocklow : u32, nnumberofbytestounlockhigh : u32) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn UpdateProcThreadAttribute(lpattributelist : LPPROC_THREAD_ATTRIBUTE_LIST, dwflags : u32, attribute : usize, lpvalue : *const core::ffi::c_void, cbsize : usize, lppreviousvalue : *mut core::ffi::c_void, lpreturnsize : *const usize) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn WaitForMultipleObjects(ncount : u32, lphandles : *const HANDLE, bwaitall : BOOL, dwmilliseconds : u32) -> WAIT_EVENT);
windows_targets::link!("kernel32.dll" "system" fn WaitForSingleObject(hhandle : HANDLE, dwmilliseconds : u32) -> WAIT_EVENT);
windows_targets::link!("kernel32.dll" "system" fn WakeAllConditionVariable(conditionvariable : *mut CONDITION_VARIABLE));
windows_targets::link!("kernel32.dll" "system" fn WakeConditionVariable(conditionvariable : *mut CONDITION_VARIABLE));
windows_targets::link!("kernel32.dll" "system" fn WideCharToMultiByte(codepage : u32, dwflags : u32, lpwidecharstr : PCWSTR, cchwidechar : i32, lpmultibytestr : PSTR, cbmultibyte : i32, lpdefaultchar : PCSTR, lpuseddefaultchar : *mut BOOL) -> i32);
windows_targets::link!("kernel32.dll" "system" fn WriteConsoleW(hconsoleoutput : HANDLE, lpbuffer : PCWSTR, nnumberofcharstowrite : u32, lpnumberofcharswritten : *mut u32, lpreserved : *const core::ffi::c_void) -> BOOL);
windows_targets::link!("kernel32.dll" "system" fn WriteFileEx(hfile : HANDLE, lpbuffer : *const u8, nnumberofbytestowrite : u32, lpoverlapped : *mut OVERLAPPED, lpcompletionroutine : LPOVERLAPPED_COMPLETION_ROUTINE) -> BOOL);
windows_targets::link!("ntdll.dll" "system" fn NtCreateFile(filehandle : *mut HANDLE, desiredaccess : FILE_ACCESS_RIGHTS, objectattributes : *const OBJECT_ATTRIBUTES, iostatusblock : *mut IO_STATUS_BLOCK, allocationsize : *const i64, fileattributes : FILE_FLAGS_AND_ATTRIBUTES, shareaccess : FILE_SHARE_MODE, createdisposition : NTCREATEFILE_CREATE_DISPOSITION, createoptions : NTCREATEFILE_CREATE_OPTIONS, eabuffer : *const core::ffi::c_void, ealength : u32) -> NTSTATUS);
windows_targets::link!("ntdll.dll" "system" fn NtOpenFile(filehandle : *mut HANDLE, desiredaccess : u32, objectattributes : *const OBJECT_ATTRIBUTES, iostatusblock : *mut IO_STATUS_BLOCK, shareaccess : u32, openoptions : u32) -> NTSTATUS);
windows_targets::link!("ntdll.dll" "system" fn NtReadFile(filehandle : HANDLE, event : HANDLE, apcroutine : PIO_APC_ROUTINE, apccontext : *const core::ffi::c_void, iostatusblock : *mut IO_STATUS_BLOCK, buffer : *mut core::ffi::c_void, length : u32, byteoffset : *const i64, key : *const u32) -> NTSTATUS);
windows_targets::link!("ntdll.dll" "system" fn NtWriteFile(filehandle : HANDLE, event : HANDLE, apcroutine : PIO_APC_ROUTINE, apccontext : *const core::ffi::c_void, iostatusblock : *mut IO_STATUS_BLOCK, buffer : *const core::ffi::c_void, length : u32, byteoffset : *const i64, key : *const u32) -> NTSTATUS);
windows_targets::link!("ntdll.dll" "system" fn RtlNtStatusToDosError(status : NTSTATUS) -> u32);
windows_targets::link!("userenv.dll" "system" fn GetUserProfileDirectoryW(htoken : HANDLE, lpprofiledir : PWSTR, lpcchsize : *mut u32) -> BOOL);
windows_targets::link!("ws2_32.dll" "system" fn WSACleanup() -> i32);
windows_targets::link!("ws2_32.dll" "system" fn WSADuplicateSocketW(s : SOCKET, dwprocessid : u32, lpprotocolinfo : *mut WSAPROTOCOL_INFOW) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn WSAGetLastError() -> WSA_ERROR);
windows_targets::link!("ws2_32.dll" "system" fn WSARecv(s : SOCKET, lpbuffers : *const WSABUF, dwbuffercount : u32, lpnumberofbytesrecvd : *mut u32, lpflags : *mut u32, lpoverlapped : *mut OVERLAPPED, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn WSASend(s : SOCKET, lpbuffers : *const WSABUF, dwbuffercount : u32, lpnumberofbytessent : *mut u32, dwflags : u32, lpoverlapped : *mut OVERLAPPED, lpcompletionroutine : LPWSAOVERLAPPED_COMPLETION_ROUTINE) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn WSASocketW(af : i32, r#type : i32, protocol : i32, lpprotocolinfo : *const WSAPROTOCOL_INFOW, g : u32, dwflags : u32) -> SOCKET);
windows_targets::link!("ws2_32.dll" "system" fn WSAStartup(wversionrequested : u16, lpwsadata : *mut WSADATA) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn accept(s : SOCKET, addr : *mut SOCKADDR, addrlen : *mut i32) -> SOCKET);
windows_targets::link!("ws2_32.dll" "system" fn bind(s : SOCKET, name : *const SOCKADDR, namelen : i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn closesocket(s : SOCKET) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn connect(s : SOCKET, name : *const SOCKADDR, namelen : i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn freeaddrinfo(paddrinfo : *const ADDRINFOA));
windows_targets::link!("ws2_32.dll" "system" fn getaddrinfo(pnodename : PCSTR, pservicename : PCSTR, phints : *const ADDRINFOA, ppresult : *mut *mut ADDRINFOA) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn getpeername(s : SOCKET, name : *mut SOCKADDR, namelen : *mut i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn getsockname(s : SOCKET, name : *mut SOCKADDR, namelen : *mut i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn getsockopt(s : SOCKET, level : i32, optname : i32, optval : PSTR, optlen : *mut i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn ioctlsocket(s : SOCKET, cmd : i32, argp : *mut u32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn listen(s : SOCKET, backlog : i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn recv(s : SOCKET, buf : PSTR, len : i32, flags : SEND_RECV_FLAGS) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn recvfrom(s : SOCKET, buf : PSTR, len : i32, flags : i32, from : *mut SOCKADDR, fromlen : *mut i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn select(nfds : i32, readfds : *mut FD_SET, writefds : *mut FD_SET, exceptfds : *mut FD_SET, timeout : *const TIMEVAL) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn send(s : SOCKET, buf : PCSTR, len : i32, flags : SEND_RECV_FLAGS) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn sendto(s : SOCKET, buf : PCSTR, len : i32, flags : i32, to : *const SOCKADDR, tolen : i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn setsockopt(s : SOCKET, level : i32, optname : i32, optval : PCSTR, optlen : i32) -> i32);
windows_targets::link!("ws2_32.dll" "system" fn shutdown(s : SOCKET, how : WINSOCK_SHUTDOWN_HOW) -> i32);
pub const ABOVE_NORMAL_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 32768u32;
pub type ADDRESS_FAMILY = u16;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct ADDRINFOA {
    pub ai_flags: i32,
    pub ai_family: i32,
    pub ai_socktype: i32,
    pub ai_protocol: i32,
    pub ai_addrlen: usize,
    pub ai_canonname: PSTR,
    pub ai_addr: *mut SOCKADDR,
    pub ai_next: *mut ADDRINFOA,
}
pub const AF_INET: ADDRESS_FAMILY = 2u16;
pub const AF_INET6: ADDRESS_FAMILY = 23u16;
pub const AF_UNIX: u16 = 1u16;
pub const AF_UNSPEC: ADDRESS_FAMILY = 0u16;
pub const ALL_PROCESSOR_GROUPS: u16 = 65535u16;
#[repr(C)]
#[derive(Clone, Copy)]
pub union ARM64_NT_NEON128 {
    pub Anonymous: ARM64_NT_NEON128_0,
    pub D: [f64; 2],
    pub S: [f32; 4],
    pub H: [u16; 8],
    pub B: [u8; 16],
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct ARM64_NT_NEON128_0 {
    pub Low: u64,
    pub High: i64,
}
pub const BELOW_NORMAL_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 16384u32;
pub type BOOL = i32;
pub type BOOLEAN = u8;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct BY_HANDLE_FILE_INFORMATION {
    pub dwFileAttributes: u32,
    pub ftCreationTime: FILETIME,
    pub ftLastAccessTime: FILETIME,
    pub ftLastWriteTime: FILETIME,
    pub dwVolumeSerialNumber: u32,
    pub nFileSizeHigh: u32,
    pub nFileSizeLow: u32,
    pub nNumberOfLinks: u32,
    pub nFileIndexHigh: u32,
    pub nFileIndexLow: u32,
}
pub const CALLBACK_CHUNK_FINISHED: LPPROGRESS_ROUTINE_CALLBACK_REASON = 0u32;
pub const CALLBACK_STREAM_SWITCH: LPPROGRESS_ROUTINE_CALLBACK_REASON = 1u32;
pub type COMPARESTRING_RESULT = i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct CONDITION_VARIABLE {
    pub Ptr: *mut core::ffi::c_void,
}
pub type CONSOLE_MODE = u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct CONSOLE_READCONSOLE_CONTROL {
    pub nLength: u32,
    pub nInitialChars: u32,
    pub dwCtrlWakeupMask: u32,
    pub dwControlKeyState: u32,
}
#[repr(C)]
#[cfg(target_arch = "aarch64")]
#[derive(Clone, Copy)]
pub struct CONTEXT {
    pub ContextFlags: CONTEXT_FLAGS,
    pub Cpsr: u32,
    pub Anonymous: CONTEXT_0,
    pub Sp: u64,
    pub Pc: u64,
    pub V: [ARM64_NT_NEON128; 32],
    pub Fpcr: u32,
    pub Fpsr: u32,
    pub Bcr: [u32; 8],
    pub Bvr: [u64; 8],
    pub Wcr: [u32; 2],
    pub Wvr: [u64; 2],
}
#[repr(C)]
#[cfg(target_arch = "aarch64")]
#[derive(Clone, Copy)]
pub union CONTEXT_0 {
    pub Anonymous: CONTEXT_0_0,
    pub X: [u64; 31],
}
#[repr(C)]
#[cfg(target_arch = "aarch64")]
#[derive(Clone, Copy)]
pub struct CONTEXT_0_0 {
    pub X0: u64,
    pub X1: u64,
    pub X2: u64,
    pub X3: u64,
    pub X4: u64,
    pub X5: u64,
    pub X6: u64,
    pub X7: u64,
    pub X8: u64,
    pub X9: u64,
    pub X10: u64,
    pub X11: u64,
    pub X12: u64,
    pub X13: u64,
    pub X14: u64,
    pub X15: u64,
    pub X16: u64,
    pub X17: u64,
    pub X18: u64,
    pub X19: u64,
    pub X20: u64,
    pub X21: u64,
    pub X22: u64,
    pub X23: u64,
    pub X24: u64,
    pub X25: u64,
    pub X26: u64,
    pub X27: u64,
    pub X28: u64,
    pub Fp: u64,
    pub Lr: u64,
}
#[repr(C)]
#[cfg(any(target_arch = "arm64ec", target_arch = "x86_64"))]
#[derive(Clone, Copy)]
pub struct CONTEXT {
    pub P1Home: u64,
    pub P2Home: u64,
    pub P3Home: u64,
    pub P4Home: u64,
    pub P5Home: u64,
    pub P6Home: u64,
    pub ContextFlags: CONTEXT_FLAGS,
    pub MxCsr: u32,
    pub SegCs: u16,
    pub SegDs: u16,
    pub SegEs: u16,
    pub SegFs: u16,
    pub SegGs: u16,
    pub SegSs: u16,
    pub EFlags: u32,
    pub Dr0: u64,
    pub Dr1: u64,
    pub Dr2: u64,
    pub Dr3: u64,
    pub Dr6: u64,
    pub Dr7: u64,
    pub Rax: u64,
    pub Rcx: u64,
    pub Rdx: u64,
    pub Rbx: u64,
    pub Rsp: u64,
    pub Rbp: u64,
    pub Rsi: u64,
    pub Rdi: u64,
    pub R8: u64,
    pub R9: u64,
    pub R10: u64,
    pub R11: u64,
    pub R12: u64,
    pub R13: u64,
    pub R14: u64,
    pub R15: u64,
    pub Rip: u64,
    pub Anonymous: CONTEXT_0,
    pub VectorRegister: [M128A; 26],
    pub VectorControl: u64,
    pub DebugControl: u64,
    pub LastBranchToRip: u64,
    pub LastBranchFromRip: u64,
    pub LastExceptionToRip: u64,
    pub LastExceptionFromRip: u64,
}
#[repr(C)]
#[cfg(any(target_arch = "arm64ec", target_arch = "x86_64"))]
#[derive(Clone, Copy)]
pub union CONTEXT_0 {
    pub FltSave: XSAVE_FORMAT,
    pub Anonymous: CONTEXT_0_0,
}
#[repr(C)]
#[cfg(any(target_arch = "arm64ec", target_arch = "x86_64"))]
#[derive(Clone, Copy)]
pub struct CONTEXT_0_0 {
    pub Header: [M128A; 2],
    pub Legacy: [M128A; 8],
    pub Xmm0: M128A,
    pub Xmm1: M128A,
    pub Xmm2: M128A,
    pub Xmm3: M128A,
    pub Xmm4: M128A,
    pub Xmm5: M128A,
    pub Xmm6: M128A,
    pub Xmm7: M128A,
    pub Xmm8: M128A,
    pub Xmm9: M128A,
    pub Xmm10: M128A,
    pub Xmm11: M128A,
    pub Xmm12: M128A,
    pub Xmm13: M128A,
    pub Xmm14: M128A,
    pub Xmm15: M128A,
}
#[repr(C)]
#[cfg(target_arch = "x86")]
#[derive(Clone, Copy)]
pub struct CONTEXT {
    pub ContextFlags: CONTEXT_FLAGS,
    pub Dr0: u32,
    pub Dr1: u32,
    pub Dr2: u32,
    pub Dr3: u32,
    pub Dr6: u32,
    pub Dr7: u32,
    pub FloatSave: FLOATING_SAVE_AREA,
    pub SegGs: u32,
    pub SegFs: u32,
    pub SegEs: u32,
    pub SegDs: u32,
    pub Edi: u32,
    pub Esi: u32,
    pub Ebx: u32,
    pub Edx: u32,
    pub Ecx: u32,
    pub Eax: u32,
    pub Ebp: u32,
    pub Eip: u32,
    pub SegCs: u32,
    pub EFlags: u32,
    pub Esp: u32,
    pub SegSs: u32,
    pub ExtendedRegisters: [u8; 512],
}
pub type CONTEXT_FLAGS = u32;
pub const CP_UTF8: u32 = 65001u32;
pub const CREATE_ALWAYS: FILE_CREATION_DISPOSITION = 2u32;
pub const CREATE_BREAKAWAY_FROM_JOB: PROCESS_CREATION_FLAGS = 16777216u32;
pub const CREATE_DEFAULT_ERROR_MODE: PROCESS_CREATION_FLAGS = 67108864u32;
pub const CREATE_FORCEDOS: PROCESS_CREATION_FLAGS = 8192u32;
pub const CREATE_IGNORE_SYSTEM_DEFAULT: PROCESS_CREATION_FLAGS = 2147483648u32;
pub const CREATE_NEW: FILE_CREATION_DISPOSITION = 1u32;
pub const CREATE_NEW_CONSOLE: PROCESS_CREATION_FLAGS = 16u32;
pub const CREATE_NEW_PROCESS_GROUP: PROCESS_CREATION_FLAGS = 512u32;
pub const CREATE_NO_WINDOW: PROCESS_CREATION_FLAGS = 134217728u32;
pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL: PROCESS_CREATION_FLAGS = 33554432u32;
pub const CREATE_PROTECTED_PROCESS: PROCESS_CREATION_FLAGS = 262144u32;
pub const CREATE_SECURE_PROCESS: PROCESS_CREATION_FLAGS = 4194304u32;
pub const CREATE_SEPARATE_WOW_VDM: PROCESS_CREATION_FLAGS = 2048u32;
pub const CREATE_SHARED_WOW_VDM: PROCESS_CREATION_FLAGS = 4096u32;
pub const CREATE_SUSPENDED: PROCESS_CREATION_FLAGS = 4u32;
pub const CREATE_UNICODE_ENVIRONMENT: PROCESS_CREATION_FLAGS = 1024u32;
pub const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION: u32 = 2u32;
pub const CREATE_WAITABLE_TIMER_MANUAL_RESET: u32 = 1u32;
pub const CSTR_EQUAL: COMPARESTRING_RESULT = 2i32;
pub const CSTR_GREATER_THAN: COMPARESTRING_RESULT = 3i32;
pub const CSTR_LESS_THAN: COMPARESTRING_RESULT = 1i32;
pub const DEBUG_ONLY_THIS_PROCESS: PROCESS_CREATION_FLAGS = 2u32;
pub const DEBUG_PROCESS: PROCESS_CREATION_FLAGS = 1u32;
pub const DELETE: FILE_ACCESS_RIGHTS = 65536u32;
pub const DETACHED_PROCESS: PROCESS_CREATION_FLAGS = 8u32;
pub const DISABLE_NEWLINE_AUTO_RETURN: CONSOLE_MODE = 8u32;
pub const DLL_PROCESS_DETACH: u32 = 0u32;
pub const DLL_THREAD_DETACH: u32 = 3u32;
pub const DNS_ERROR_ADDRESS_REQUIRED: WIN32_ERROR = 9573u32;
pub const DNS_ERROR_ALIAS_LOOP: WIN32_ERROR = 9722u32;
pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS: WIN32_ERROR = 9610u32;
pub const DNS_ERROR_AXFR: WIN32_ERROR = 9752u32;
pub const DNS_ERROR_BACKGROUND_LOADING: WIN32_ERROR = 9568u32;
pub const DNS_ERROR_BAD_KEYMASTER: WIN32_ERROR = 9122u32;
pub const DNS_ERROR_BAD_PACKET: WIN32_ERROR = 9502u32;
pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS: WIN32_ERROR = 9564u32;
pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS: WIN32_ERROR = 9977u32;
pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST: WIN32_ERROR = 9976u32;
pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED: WIN32_ERROR = 9975u32;
pub const DNS_ERROR_CNAME_COLLISION: WIN32_ERROR = 9709u32;
pub const DNS_ERROR_CNAME_LOOP: WIN32_ERROR = 9707u32;
pub const DNS_ERROR_DATAFILE_OPEN_FAILURE: WIN32_ERROR = 9653u32;
pub const DNS_ERROR_DATAFILE_PARSING: WIN32_ERROR = 9655u32;
pub const DNS_ERROR_DEFAULT_SCOPE: WIN32_ERROR = 9960u32;
pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE: WIN32_ERROR = 9925u32;
pub const DNS_ERROR_DEFAULT_ZONESCOPE: WIN32_ERROR = 9953u32;
pub const DNS_ERROR_DELEGATION_REQUIRED: WIN32_ERROR = 9571u32;
pub const DNS_ERROR_DNAME_COLLISION: WIN32_ERROR = 9721u32;
pub const DNS_ERROR_DNSSEC_IS_DISABLED: WIN32_ERROR = 9125u32;
pub const DNS_ERROR_DP_ALREADY_ENLISTED: WIN32_ERROR = 9904u32;
pub const DNS_ERROR_DP_ALREADY_EXISTS: WIN32_ERROR = 9902u32;
pub const DNS_ERROR_DP_DOES_NOT_EXIST: WIN32_ERROR = 9901u32;
pub const DNS_ERROR_DP_FSMO_ERROR: WIN32_ERROR = 9906u32;
pub const DNS_ERROR_DP_NOT_AVAILABLE: WIN32_ERROR = 9905u32;
pub const DNS_ERROR_DP_NOT_ENLISTED: WIN32_ERROR = 9903u32;
pub const DNS_ERROR_DS_UNAVAILABLE: WIN32_ERROR = 9717u32;
pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS: WIN32_ERROR = 9718u32;
pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE: WIN32_ERROR = 9567u32;
pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL: WIN32_ERROR = 9566u32;
pub const DNS_ERROR_FILE_WRITEBACK_FAILED: WIN32_ERROR = 9654u32;
pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS: WIN32_ERROR = 9619u32;
pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS: WIN32_ERROR = 9565u32;
pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME: WIN32_ERROR = 9924u32;
pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME: WIN32_ERROR = 9984u32;
pub const DNS_ERROR_INVALID_DATA: WIN32_ERROR = 13u32;
pub const DNS_ERROR_INVALID_DATAFILE_NAME: WIN32_ERROR = 9652u32;
pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET: WIN32_ERROR = 9115u32;
pub const DNS_ERROR_INVALID_IP_ADDRESS: WIN32_ERROR = 9552u32;
pub const DNS_ERROR_INVALID_KEY_SIZE: WIN32_ERROR = 9106u32;
pub const DNS_ERROR_INVALID_NAME: WIN32_ERROR = 123u32;
pub const DNS_ERROR_INVALID_NAME_CHAR: WIN32_ERROR = 9560u32;
pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT: WIN32_ERROR = 9124u32;
pub const DNS_ERROR_INVALID_POLICY_TABLE: WIN32_ERROR = 9572u32;
pub const DNS_ERROR_INVALID_PROPERTY: WIN32_ERROR = 9553u32;
pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD: WIN32_ERROR = 9114u32;
pub const DNS_ERROR_INVALID_SCOPE_NAME: WIN32_ERROR = 9958u32;
pub const DNS_ERROR_INVALID_SCOPE_OPERATION: WIN32_ERROR = 9961u32;
pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD: WIN32_ERROR = 9123u32;
pub const DNS_ERROR_INVALID_TYPE: WIN32_ERROR = 9551u32;
pub const DNS_ERROR_INVALID_XML: WIN32_ERROR = 9126u32;
pub const DNS_ERROR_INVALID_ZONESCOPE_NAME: WIN32_ERROR = 9954u32;
pub const DNS_ERROR_INVALID_ZONE_OPERATION: WIN32_ERROR = 9603u32;
pub const DNS_ERROR_INVALID_ZONE_TYPE: WIN32_ERROR = 9611u32;
pub const DNS_ERROR_KEYMASTER_REQUIRED: WIN32_ERROR = 9101u32;
pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION: WIN32_ERROR = 9108u32;
pub const DNS_ERROR_KSP_NOT_ACCESSIBLE: WIN32_ERROR = 9112u32;
pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED: WIN32_ERROR = 9956u32;
pub const DNS_ERROR_NAME_DOES_NOT_EXIST: WIN32_ERROR = 9714u32;
pub const DNS_ERROR_NAME_NOT_IN_ZONE: WIN32_ERROR = 9706u32;
pub const DNS_ERROR_NBSTAT_INIT_FAILED: WIN32_ERROR = 9617u32;
pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES: WIN32_ERROR = 9614u32;
pub const DNS_ERROR_NEED_WINS_SERVERS: WIN32_ERROR = 9616u32;
pub const DNS_ERROR_NODE_CREATION_FAILED: WIN32_ERROR = 9703u32;
pub const DNS_ERROR_NODE_IS_CNAME: WIN32_ERROR = 9708u32;
pub const DNS_ERROR_NODE_IS_DNAME: WIN32_ERROR = 9720u32;
pub const DNS_ERROR_NON_RFC_NAME: WIN32_ERROR = 9556u32;
pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD: WIN32_ERROR = 9119u32;
pub const DNS_ERROR_NOT_ALLOWED_ON_RODC: WIN32_ERROR = 9569u32;
pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER: WIN32_ERROR = 9562u32;
pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE: WIN32_ERROR = 9102u32;
pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE: WIN32_ERROR = 9121u32;
pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK: WIN32_ERROR = 9118u32;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION: WIN32_ERROR = 9563u32;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME: WIN32_ERROR = 9570u32;
pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES: WIN32_ERROR = 9955u32;
pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS: WIN32_ERROR = 9104u32;
pub const DNS_ERROR_NOT_UNIQUE: WIN32_ERROR = 9555u32;
pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE: WIN32_ERROR = 9719u32;
pub const DNS_ERROR_NO_CREATE_CACHE_DATA: WIN32_ERROR = 9713u32;
pub const DNS_ERROR_NO_DNS_SERVERS: WIN32_ERROR = 9852u32;
pub const DNS_ERROR_NO_MEMORY: WIN32_ERROR = 14u32;
pub const DNS_ERROR_NO_PACKET: WIN32_ERROR = 9503u32;
pub const DNS_ERROR_NO_TCPIP: WIN32_ERROR = 9851u32;
pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS: WIN32_ERROR = 9127u32;
pub const DNS_ERROR_NO_ZONE_INFO: WIN32_ERROR = 9602u32;
pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1: WIN32_ERROR = 9103u32;
pub const DNS_ERROR_NSEC3_NAME_COLLISION: WIN32_ERROR = 9129u32;
pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1: WIN32_ERROR = 9130u32;
pub const DNS_ERROR_NUMERIC_NAME: WIN32_ERROR = 9561u32;
pub const DNS_ERROR_POLICY_ALREADY_EXISTS: WIN32_ERROR = 9971u32;
pub const DNS_ERROR_POLICY_DOES_NOT_EXIST: WIN32_ERROR = 9972u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA: WIN32_ERROR = 9973u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET: WIN32_ERROR = 9990u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN: WIN32_ERROR = 9994u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE: WIN32_ERROR = 9993u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL: WIN32_ERROR = 9992u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE: WIN32_ERROR = 9995u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY: WIN32_ERROR = 9996u32;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL: WIN32_ERROR = 9991u32;
pub const DNS_ERROR_POLICY_INVALID_NAME: WIN32_ERROR = 9982u32;
pub const DNS_ERROR_POLICY_INVALID_SETTINGS: WIN32_ERROR = 9974u32;
pub const DNS_ERROR_POLICY_INVALID_WEIGHT: WIN32_ERROR = 9981u32;
pub const DNS_ERROR_POLICY_LOCKED: WIN32_ERROR = 9980u32;
pub const DNS_ERROR_POLICY_MISSING_CRITERIA: WIN32_ERROR = 9983u32;
pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID: WIN32_ERROR = 9985u32;
pub const DNS_ERROR_POLICY_SCOPE_MISSING: WIN32_ERROR = 9986u32;
pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED: WIN32_ERROR = 9987u32;
pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE: WIN32_ERROR = 9651u32;
pub const DNS_ERROR_RCODE: WIN32_ERROR = 9504u32;
pub const DNS_ERROR_RCODE_BADKEY: WIN32_ERROR = 9017u32;
pub const DNS_ERROR_RCODE_BADSIG: WIN32_ERROR = 9016u32;
pub const DNS_ERROR_RCODE_BADTIME: WIN32_ERROR = 9018u32;
pub const DNS_ERROR_RCODE_FORMAT_ERROR: WIN32_ERROR = 9001u32;
pub const DNS_ERROR_RCODE_NAME_ERROR: WIN32_ERROR = 9003u32;
pub const DNS_ERROR_RCODE_NOTAUTH: WIN32_ERROR = 9009u32;
pub const DNS_ERROR_RCODE_NOTZONE: WIN32_ERROR = 9010u32;
pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED: WIN32_ERROR = 9004u32;
pub const DNS_ERROR_RCODE_NXRRSET: WIN32_ERROR = 9008u32;
pub const DNS_ERROR_RCODE_REFUSED: WIN32_ERROR = 9005u32;
pub const DNS_ERROR_RCODE_SERVER_FAILURE: WIN32_ERROR = 9002u32;
pub const DNS_ERROR_RCODE_YXDOMAIN: WIN32_ERROR = 9006u32;
pub const DNS_ERROR_RCODE_YXRRSET: WIN32_ERROR = 9007u32;
pub const DNS_ERROR_RECORD_ALREADY_EXISTS: WIN32_ERROR = 9711u32;
pub const DNS_ERROR_RECORD_DOES_NOT_EXIST: WIN32_ERROR = 9701u32;
pub const DNS_ERROR_RECORD_FORMAT: WIN32_ERROR = 9702u32;
pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT: WIN32_ERROR = 9710u32;
pub const DNS_ERROR_RECORD_TIMED_OUT: WIN32_ERROR = 9705u32;
pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED: WIN32_ERROR = 9120u32;
pub const DNS_ERROR_ROLLOVER_IN_PROGRESS: WIN32_ERROR = 9116u32;
pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE: WIN32_ERROR = 9128u32;
pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX: WIN32_ERROR = 9913u32;
pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX: WIN32_ERROR = 9914u32;
pub const DNS_ERROR_RRL_INVALID_LEAK_RATE: WIN32_ERROR = 9916u32;
pub const DNS_ERROR_RRL_INVALID_TC_RATE: WIN32_ERROR = 9915u32;
pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE: WIN32_ERROR = 9912u32;
pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE: WIN32_ERROR = 9917u32;
pub const DNS_ERROR_RRL_NOT_ENABLED: WIN32_ERROR = 9911u32;
pub const DNS_ERROR_SCOPE_ALREADY_EXISTS: WIN32_ERROR = 9963u32;
pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST: WIN32_ERROR = 9959u32;
pub const DNS_ERROR_SCOPE_LOCKED: WIN32_ERROR = 9962u32;
pub const DNS_ERROR_SECONDARY_DATA: WIN32_ERROR = 9712u32;
pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP: WIN32_ERROR = 9612u32;
pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED: WIN32_ERROR = 9988u32;
pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE: WIN32_ERROR = 9107u32;
pub const DNS_ERROR_SOA_DELETE_INVALID: WIN32_ERROR = 9618u32;
pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT: WIN32_ERROR = 9117u32;
pub const DNS_ERROR_SUBNET_ALREADY_EXISTS: WIN32_ERROR = 9979u32;
pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST: WIN32_ERROR = 9978u32;
pub const DNS_ERROR_TOO_MANY_SKDS: WIN32_ERROR = 9113u32;
pub const DNS_ERROR_TRY_AGAIN_LATER: WIN32_ERROR = 9554u32;
pub const DNS_ERROR_UNEXPECTED_CNG_ERROR: WIN32_ERROR = 9110u32;
pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR: WIN32_ERROR = 9109u32;
pub const DNS_ERROR_UNKNOWN_RECORD_TYPE: WIN32_ERROR = 9704u32;
pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION: WIN32_ERROR = 9111u32;
pub const DNS_ERROR_UNSECURE_PACKET: WIN32_ERROR = 9505u32;
pub const DNS_ERROR_UNSUPPORTED_ALGORITHM: WIN32_ERROR = 9105u32;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS: WIN32_ERROR = 9921u32;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST: WIN32_ERROR = 9922u32;
pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED: WIN32_ERROR = 9923u32;
pub const DNS_ERROR_WINS_INIT_FAILED: WIN32_ERROR = 9615u32;
pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS: WIN32_ERROR = 9951u32;
pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST: WIN32_ERROR = 9952u32;
pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED: WIN32_ERROR = 9957u32;
pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED: WIN32_ERROR = 9989u32;
pub const DNS_ERROR_ZONE_ALREADY_EXISTS: WIN32_ERROR = 9609u32;
pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR: WIN32_ERROR = 9604u32;
pub const DNS_ERROR_ZONE_CREATION_FAILED: WIN32_ERROR = 9608u32;
pub const DNS_ERROR_ZONE_DOES_NOT_EXIST: WIN32_ERROR = 9601u32;
pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS: WIN32_ERROR = 9606u32;
pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD: WIN32_ERROR = 9605u32;
pub const DNS_ERROR_ZONE_IS_SHUTDOWN: WIN32_ERROR = 9621u32;
pub const DNS_ERROR_ZONE_LOCKED: WIN32_ERROR = 9607u32;
pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING: WIN32_ERROR = 9622u32;
pub const DNS_ERROR_ZONE_NOT_SECONDARY: WIN32_ERROR = 9613u32;
pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP: WIN32_ERROR = 9620u32;
pub const DUPLICATE_CLOSE_SOURCE: DUPLICATE_HANDLE_OPTIONS = 1u32;
pub type DUPLICATE_HANDLE_OPTIONS = u32;
pub const DUPLICATE_SAME_ACCESS: DUPLICATE_HANDLE_OPTIONS = 2u32;
pub const ENABLE_AUTO_POSITION: CONSOLE_MODE = 256u32;
pub const ENABLE_ECHO_INPUT: CONSOLE_MODE = 4u32;
pub const ENABLE_EXTENDED_FLAGS: CONSOLE_MODE = 128u32;
pub const ENABLE_INSERT_MODE: CONSOLE_MODE = 32u32;
pub const ENABLE_LINE_INPUT: CONSOLE_MODE = 2u32;
pub const ENABLE_LVB_GRID_WORLDWIDE: CONSOLE_MODE = 16u32;
pub const ENABLE_MOUSE_INPUT: CONSOLE_MODE = 16u32;
pub const ENABLE_PROCESSED_INPUT: CONSOLE_MODE = 1u32;
pub const ENABLE_PROCESSED_OUTPUT: CONSOLE_MODE = 1u32;
pub const ENABLE_QUICK_EDIT_MODE: CONSOLE_MODE = 64u32;
pub const ENABLE_VIRTUAL_TERMINAL_INPUT: CONSOLE_MODE = 512u32;
pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING: CONSOLE_MODE = 4u32;
pub const ENABLE_WINDOW_INPUT: CONSOLE_MODE = 8u32;
pub const ENABLE_WRAP_AT_EOL_OUTPUT: CONSOLE_MODE = 2u32;
pub const ERROR_ABANDONED_WAIT_0: WIN32_ERROR = 735u32;
pub const ERROR_ABANDONED_WAIT_63: WIN32_ERROR = 736u32;
pub const ERROR_ABANDON_HIBERFILE: WIN32_ERROR = 787u32;
pub const ERROR_ABIOS_ERROR: WIN32_ERROR = 538u32;
pub const ERROR_ACCESS_AUDIT_BY_POLICY: WIN32_ERROR = 785u32;
pub const ERROR_ACCESS_DENIED: WIN32_ERROR = 5u32;
pub const ERROR_ACCESS_DENIED_APPDATA: WIN32_ERROR = 502u32;
pub const ERROR_ACCESS_DISABLED_BY_POLICY: WIN32_ERROR = 1260u32;
pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY: WIN32_ERROR = 786u32;
pub const ERROR_ACCESS_DISABLED_WEBBLADE: WIN32_ERROR = 1277u32;
pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER: WIN32_ERROR = 1278u32;
pub const ERROR_ACCOUNT_DISABLED: WIN32_ERROR = 1331u32;
pub const ERROR_ACCOUNT_EXPIRED: WIN32_ERROR = 1793u32;
pub const ERROR_ACCOUNT_LOCKED_OUT: WIN32_ERROR = 1909u32;
pub const ERROR_ACCOUNT_RESTRICTION: WIN32_ERROR = 1327u32;
pub const ERROR_ACPI_ERROR: WIN32_ERROR = 669u32;
pub const ERROR_ACTIVE_CONNECTIONS: WIN32_ERROR = 2402u32;
pub const ERROR_ADAP_HDW_ERR: WIN32_ERROR = 57u32;
pub const ERROR_ADDRESS_ALREADY_ASSOCIATED: WIN32_ERROR = 1227u32;
pub const ERROR_ADDRESS_NOT_ASSOCIATED: WIN32_ERROR = 1228u32;
pub const ERROR_ALERTED: WIN32_ERROR = 739u32;
pub const ERROR_ALIAS_EXISTS: WIN32_ERROR = 1379u32;
pub const ERROR_ALLOCATE_BUCKET: WIN32_ERROR = 602u32;
pub const ERROR_ALLOTTED_SPACE_EXCEEDED: WIN32_ERROR = 1344u32;
pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED: WIN32_ERROR = 1933u32;
pub const ERROR_ALREADY_ASSIGNED: WIN32_ERROR = 85u32;
pub const ERROR_ALREADY_EXISTS: WIN32_ERROR = 183u32;
pub const ERROR_ALREADY_FIBER: WIN32_ERROR = 1280u32;
pub const ERROR_ALREADY_HAS_STREAM_ID: WIN32_ERROR = 4444u32;
pub const ERROR_ALREADY_INITIALIZED: WIN32_ERROR = 1247u32;
pub const ERROR_ALREADY_REGISTERED: WIN32_ERROR = 1242u32;
pub const ERROR_ALREADY_RUNNING_LKG: WIN32_ERROR = 1074u32;
pub const ERROR_ALREADY_THREAD: WIN32_ERROR = 1281u32;
pub const ERROR_ALREADY_WAITING: WIN32_ERROR = 1904u32;
pub const ERROR_ALREADY_WIN32: WIN32_ERROR = 719u32;
pub const ERROR_API_UNAVAILABLE: WIN32_ERROR = 15841u32;
pub const ERROR_APPCONTAINER_REQUIRED: WIN32_ERROR = 4251u32;
pub const ERROR_APPEXEC_APP_COMPAT_BLOCK: WIN32_ERROR = 3068u32;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT: WIN32_ERROR = 3069u32;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING: WIN32_ERROR = 3071u32;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES: WIN32_ERROR = 3072u32;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION: WIN32_ERROR = 3070u32;
pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED: WIN32_ERROR = 3060u32;
pub const ERROR_APPEXEC_HANDLE_INVALIDATED: WIN32_ERROR = 3061u32;
pub const ERROR_APPEXEC_HOST_ID_MISMATCH: WIN32_ERROR = 3066u32;
pub const ERROR_APPEXEC_INVALID_HOST_GENERATION: WIN32_ERROR = 3062u32;
pub const ERROR_APPEXEC_INVALID_HOST_STATE: WIN32_ERROR = 3064u32;
pub const ERROR_APPEXEC_NO_DONOR: WIN32_ERROR = 3065u32;
pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION: WIN32_ERROR = 3063u32;
pub const ERROR_APPEXEC_UNKNOWN_USER: WIN32_ERROR = 3067u32;
pub const ERROR_APPHELP_BLOCK: WIN32_ERROR = 1259u32;
pub const ERROR_APPX_FILE_NOT_ENCRYPTED: WIN32_ERROR = 409u32;
pub const ERROR_APP_HANG: WIN32_ERROR = 1298u32;
pub const ERROR_APP_INIT_FAILURE: WIN32_ERROR = 575u32;
pub const ERROR_APP_WRONG_OS: WIN32_ERROR = 1151u32;
pub const ERROR_ARBITRATION_UNHANDLED: WIN32_ERROR = 723u32;
pub const ERROR_ARENA_TRASHED: WIN32_ERROR = 7u32;
pub const ERROR_ARITHMETIC_OVERFLOW: WIN32_ERROR = 534u32;
pub const ERROR_ASSERTION_FAILURE: WIN32_ERROR = 668u32;
pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED: WIN32_ERROR = 174u32;
pub const ERROR_AUDIT_FAILED: WIN32_ERROR = 606u32;
pub const ERROR_AUTHENTICATION_FIREWALL_FAILED: WIN32_ERROR = 1935u32;
pub const ERROR_AUTHIP_FAILURE: WIN32_ERROR = 1469u32;
pub const ERROR_AUTODATASEG_EXCEEDS_64k: WIN32_ERROR = 199u32;
pub const ERROR_BACKUP_CONTROLLER: WIN32_ERROR = 586u32;
pub const ERROR_BADDB: WIN32_ERROR = 1009u32;
pub const ERROR_BADKEY: WIN32_ERROR = 1010u32;
pub const ERROR_BADSTARTPOSITION: WIN32_ERROR = 778u32;
pub const ERROR_BAD_ACCESSOR_FLAGS: WIN32_ERROR = 773u32;
pub const ERROR_BAD_ARGUMENTS: WIN32_ERROR = 160u32;
pub const ERROR_BAD_COMMAND: WIN32_ERROR = 22u32;
pub const ERROR_BAD_COMPRESSION_BUFFER: WIN32_ERROR = 605u32;
pub const ERROR_BAD_CONFIGURATION: WIN32_ERROR = 1610u32;
pub const ERROR_BAD_CURRENT_DIRECTORY: WIN32_ERROR = 703u32;
pub const ERROR_BAD_DESCRIPTOR_FORMAT: WIN32_ERROR = 1361u32;
pub const ERROR_BAD_DEVICE: WIN32_ERROR = 1200u32;
pub const ERROR_BAD_DEVICE_PATH: WIN32_ERROR = 330u32;
pub const ERROR_BAD_DEV_TYPE: WIN32_ERROR = 66u32;
pub const ERROR_BAD_DLL_ENTRYPOINT: WIN32_ERROR = 609u32;
pub const ERROR_BAD_DRIVER_LEVEL: WIN32_ERROR = 119u32;
pub const ERROR_BAD_ENVIRONMENT: WIN32_ERROR = 10u32;
pub const ERROR_BAD_EXE_FORMAT: WIN32_ERROR = 193u32;
pub const ERROR_BAD_FILE_TYPE: WIN32_ERROR = 222u32;
pub const ERROR_BAD_FORMAT: WIN32_ERROR = 11u32;
pub const ERROR_BAD_FUNCTION_TABLE: WIN32_ERROR = 559u32;
pub const ERROR_BAD_IMPERSONATION_LEVEL: WIN32_ERROR = 1346u32;
pub const ERROR_BAD_INHERITANCE_ACL: WIN32_ERROR = 1340u32;
pub const ERROR_BAD_LENGTH: WIN32_ERROR = 24u32;
pub const ERROR_BAD_LOGON_SESSION_STATE: WIN32_ERROR = 1365u32;
pub const ERROR_BAD_MCFG_TABLE: WIN32_ERROR = 791u32;
pub const ERROR_BAD_NETPATH: WIN32_ERROR = 53u32;
pub const ERROR_BAD_NET_NAME: WIN32_ERROR = 67u32;
pub const ERROR_BAD_NET_RESP: WIN32_ERROR = 58u32;
pub const ERROR_BAD_PATHNAME: WIN32_ERROR = 161u32;
pub const ERROR_BAD_PIPE: WIN32_ERROR = 230u32;
pub const ERROR_BAD_PROFILE: WIN32_ERROR = 1206u32;
pub const ERROR_BAD_PROVIDER: WIN32_ERROR = 1204u32;
pub const ERROR_BAD_QUERY_SYNTAX: WIN32_ERROR = 1615u32;
pub const ERROR_BAD_RECOVERY_POLICY: WIN32_ERROR = 6012u32;
pub const ERROR_BAD_REM_ADAP: WIN32_ERROR = 60u32;
pub const ERROR_BAD_SERVICE_ENTRYPOINT: WIN32_ERROR = 610u32;
pub const ERROR_BAD_STACK: WIN32_ERROR = 543u32;
pub const ERROR_BAD_THREADID_ADDR: WIN32_ERROR = 159u32;
pub const ERROR_BAD_TOKEN_TYPE: WIN32_ERROR = 1349u32;
pub const ERROR_BAD_UNIT: WIN32_ERROR = 20u32;
pub const ERROR_BAD_USERNAME: WIN32_ERROR = 2202u32;
pub const ERROR_BAD_USER_PROFILE: WIN32_ERROR = 1253u32;
pub const ERROR_BAD_VALIDATION_CLASS: WIN32_ERROR = 1348u32;
pub const ERROR_BEGINNING_OF_MEDIA: WIN32_ERROR = 1102u32;
pub const ERROR_BEYOND_VDL: WIN32_ERROR = 1289u32;
pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT: WIN32_ERROR = 585u32;
pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS: WIN32_ERROR = 346u32;
pub const ERROR_BLOCK_SHARED: WIN32_ERROR = 514u32;
pub const ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID: WIN32_ERROR = 512u32;
pub const ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID: WIN32_ERROR = 513u32;
pub const ERROR_BLOCK_TOO_MANY_REFERENCES: WIN32_ERROR = 347u32;
pub const ERROR_BLOCK_WEAK_REFERENCE_INVALID: WIN32_ERROR = 511u32;
pub const ERROR_BOOT_ALREADY_ACCEPTED: WIN32_ERROR = 1076u32;
pub const ERROR_BROKEN_PIPE: WIN32_ERROR = 109u32;
pub const ERROR_BUFFER_ALL_ZEROS: WIN32_ERROR = 754u32;
pub const ERROR_BUFFER_OVERFLOW: WIN32_ERROR = 111u32;
pub const ERROR_BUSY: WIN32_ERROR = 170u32;
pub const ERROR_BUSY_DRIVE: WIN32_ERROR = 142u32;
pub const ERROR_BUS_RESET: WIN32_ERROR = 1111u32;
pub const ERROR_BYPASSIO_FLT_NOT_SUPPORTED: WIN32_ERROR = 506u32;
pub const ERROR_CACHE_PAGE_LOCKED: WIN32_ERROR = 752u32;
pub const ERROR_CALLBACK_INVOKE_INLINE: WIN32_ERROR = 812u32;
pub const ERROR_CALLBACK_POP_STACK: WIN32_ERROR = 768u32;
pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA: WIN32_ERROR = 1273u32;
pub const ERROR_CALL_NOT_IMPLEMENTED: WIN32_ERROR = 120u32;
pub const ERROR_CANCELLED: WIN32_ERROR = 1223u32;
pub const ERROR_CANCEL_VIOLATION: WIN32_ERROR = 173u32;
pub const ERROR_CANNOT_BREAK_OPLOCK: WIN32_ERROR = 802u32;
pub const ERROR_CANNOT_COPY: WIN32_ERROR = 266u32;
pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE: WIN32_ERROR = 1080u32;
pub const ERROR_CANNOT_DETECT_PROCESS_ABORT: WIN32_ERROR = 1081u32;
pub const ERROR_CANNOT_FIND_WND_CLASS: WIN32_ERROR = 1407u32;
pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK: WIN32_ERROR = 801u32;
pub const ERROR_CANNOT_IMPERSONATE: WIN32_ERROR = 1368u32;
pub const ERROR_CANNOT_LOAD_REGISTRY_FILE: WIN32_ERROR = 589u32;
pub const ERROR_CANNOT_MAKE: WIN32_ERROR = 82u32;
pub const ERROR_CANNOT_OPEN_PROFILE: WIN32_ERROR = 1205u32;
pub const ERROR_CANTFETCHBACKWARDS: WIN32_ERROR = 770u32;
pub const ERROR_CANTOPEN: WIN32_ERROR = 1011u32;
pub const ERROR_CANTREAD: WIN32_ERROR = 1012u32;
pub const ERROR_CANTSCROLLBACKWARDS: WIN32_ERROR = 771u32;
pub const ERROR_CANTWRITE: WIN32_ERROR = 1013u32;
pub const ERROR_CANT_ACCESS_DOMAIN_INFO: WIN32_ERROR = 1351u32;
pub const ERROR_CANT_ACCESS_FILE: WIN32_ERROR = 1920u32;
pub const ERROR_CANT_CLEAR_ENCRYPTION_FLAG: WIN32_ERROR = 432u32;
pub const ERROR_CANT_DISABLE_MANDATORY: WIN32_ERROR = 1310u32;
pub const ERROR_CANT_ENABLE_DENY_ONLY: WIN32_ERROR = 629u32;
pub const ERROR_CANT_OPEN_ANONYMOUS: WIN32_ERROR = 1347u32;
pub const ERROR_CANT_RESOLVE_FILENAME: WIN32_ERROR = 1921u32;
pub const ERROR_CANT_TERMINATE_SELF: WIN32_ERROR = 555u32;
pub const ERROR_CANT_WAIT: WIN32_ERROR = 554u32;
pub const ERROR_CAN_NOT_COMPLETE: WIN32_ERROR = 1003u32;
pub const ERROR_CAPAUTHZ_CHANGE_TYPE: WIN32_ERROR = 451u32;
pub const ERROR_CAPAUTHZ_DB_CORRUPTED: WIN32_ERROR = 455u32;
pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED: WIN32_ERROR = 453u32;
pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED: WIN32_ERROR = 450u32;
pub const ERROR_CAPAUTHZ_NOT_PROVISIONED: WIN32_ERROR = 452u32;
pub const ERROR_CAPAUTHZ_NO_POLICY: WIN32_ERROR = 454u32;
pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED: WIN32_ERROR = 459u32;
pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG: WIN32_ERROR = 456u32;
pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY: WIN32_ERROR = 457u32;
pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH: WIN32_ERROR = 460u32;
pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR: WIN32_ERROR = 458u32;
pub const ERROR_CARDBUS_NOT_SUPPORTED: WIN32_ERROR = 724u32;
pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR: WIN32_ERROR = 424u32;
pub const ERROR_CASE_SENSITIVE_PATH: WIN32_ERROR = 442u32;
pub const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT: WIN32_ERROR = 817u32;
pub const ERROR_CHECKING_FILE_SYSTEM: WIN32_ERROR = 712u32;
pub const ERROR_CHECKOUT_REQUIRED: WIN32_ERROR = 221u32;
pub const ERROR_CHILD_MUST_BE_VOLATILE: WIN32_ERROR = 1021u32;
pub const ERROR_CHILD_NOT_COMPLETE: WIN32_ERROR = 129u32;
pub const ERROR_CHILD_PROCESS_BLOCKED: WIN32_ERROR = 367u32;
pub const ERROR_CHILD_WINDOW_MENU: WIN32_ERROR = 1436u32;
pub const ERROR_CIMFS_IMAGE_CORRUPT: WIN32_ERROR = 470u32;
pub const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED: WIN32_ERROR = 471u32;
pub const ERROR_CIRCULAR_DEPENDENCY: WIN32_ERROR = 1059u32;
pub const ERROR_CLASS_ALREADY_EXISTS: WIN32_ERROR = 1410u32;
pub const ERROR_CLASS_DOES_NOT_EXIST: WIN32_ERROR = 1411u32;
pub const ERROR_CLASS_HAS_WINDOWS: WIN32_ERROR = 1412u32;
pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID: WIN32_ERROR = 597u32;
pub const ERROR_CLIPBOARD_NOT_OPEN: WIN32_ERROR = 1418u32;
pub const ERROR_CLOUD_FILE_ACCESS_DENIED: WIN32_ERROR = 395u32;
pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED: WIN32_ERROR = 378u32;
pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED: WIN32_ERROR = 386u32;
pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY: WIN32_ERROR = 382u32;
pub const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED: WIN32_ERROR = 434u32;
pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS: WIN32_ERROR = 396u32;
pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES: WIN32_ERROR = 387u32;
pub const ERROR_CLOUD_FILE_INVALID_REQUEST: WIN32_ERROR = 380u32;
pub const ERROR_CLOUD_FILE_IN_USE: WIN32_ERROR = 391u32;
pub const ERROR_CLOUD_FILE_METADATA_CORRUPT: WIN32_ERROR = 363u32;
pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE: WIN32_ERROR = 364u32;
pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE: WIN32_ERROR = 388u32;
pub const ERROR_CLOUD_FILE_NOT_IN_SYNC: WIN32_ERROR = 377u32;
pub const ERROR_CLOUD_FILE_NOT_SUPPORTED: WIN32_ERROR = 379u32;
pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT: WIN32_ERROR = 390u32;
pub const ERROR_CLOUD_FILE_PINNED: WIN32_ERROR = 392u32;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH: WIN32_ERROR = 366u32;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE: WIN32_ERROR = 365u32;
pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT: WIN32_ERROR = 394u32;
pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT: WIN32_ERROR = 397u32;
pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED: WIN32_ERROR = 375u32;
pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING: WIN32_ERROR = 362u32;
pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED: WIN32_ERROR = 404u32;
pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME: WIN32_ERROR = 381u32;
pub const ERROR_CLOUD_FILE_REQUEST_ABORTED: WIN32_ERROR = 393u32;
pub const ERROR_CLOUD_FILE_REQUEST_CANCELED: WIN32_ERROR = 398u32;
pub const ERROR_CLOUD_FILE_REQUEST_TIMEOUT: WIN32_ERROR = 426u32;
pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT: WIN32_ERROR = 358u32;
pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS: WIN32_ERROR = 374u32;
pub const ERROR_CLOUD_FILE_UNSUCCESSFUL: WIN32_ERROR = 389u32;
pub const ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT: WIN32_ERROR = 475u32;
pub const ERROR_CLOUD_FILE_VALIDATION_FAILED: WIN32_ERROR = 383u32;
pub const ERROR_COMMITMENT_LIMIT: WIN32_ERROR = 1455u32;
pub const ERROR_COMMITMENT_MINIMUM: WIN32_ERROR = 635u32;
pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED: WIN32_ERROR = 335u32;
pub const ERROR_COMPRESSION_DISABLED: WIN32_ERROR = 769u32;
pub const ERROR_COMPRESSION_NOT_BENEFICIAL: WIN32_ERROR = 344u32;
pub const ERROR_CONNECTED_OTHER_PASSWORD: WIN32_ERROR = 2108u32;
pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT: WIN32_ERROR = 2109u32;
pub const ERROR_CONNECTION_ABORTED: WIN32_ERROR = 1236u32;
pub const ERROR_CONNECTION_ACTIVE: WIN32_ERROR = 1230u32;
pub const ERROR_CONNECTION_COUNT_LIMIT: WIN32_ERROR = 1238u32;
pub const ERROR_CONNECTION_INVALID: WIN32_ERROR = 1229u32;
pub const ERROR_CONNECTION_REFUSED: WIN32_ERROR = 1225u32;
pub const ERROR_CONNECTION_UNAVAIL: WIN32_ERROR = 1201u32;
pub const ERROR_CONTAINER_ASSIGNED: WIN32_ERROR = 1504u32;
pub const ERROR_CONTENT_BLOCKED: WIN32_ERROR = 1296u32;
pub const ERROR_CONTEXT_EXPIRED: WIN32_ERROR = 1931u32;
pub const ERROR_CONTINUE: WIN32_ERROR = 1246u32;
pub const ERROR_CONTROL_C_EXIT: WIN32_ERROR = 572u32;
pub const ERROR_CONTROL_ID_NOT_FOUND: WIN32_ERROR = 1421u32;
pub const ERROR_CONVERT_TO_LARGE: WIN32_ERROR = 600u32;
pub const ERROR_CORRUPT_LOG_CLEARED: WIN32_ERROR = 798u32;
pub const ERROR_CORRUPT_LOG_CORRUPTED: WIN32_ERROR = 795u32;
pub const ERROR_CORRUPT_LOG_DELETED_FULL: WIN32_ERROR = 797u32;
pub const ERROR_CORRUPT_LOG_OVERFULL: WIN32_ERROR = 794u32;
pub const ERROR_CORRUPT_LOG_UNAVAILABLE: WIN32_ERROR = 796u32;
pub const ERROR_CORRUPT_SYSTEM_FILE: WIN32_ERROR = 634u32;
pub const ERROR_COULD_NOT_INTERPRET: WIN32_ERROR = 552u32;
pub const ERROR_COUNTER_TIMEOUT: WIN32_ERROR = 1121u32;
pub const ERROR_CPU_SET_INVALID: WIN32_ERROR = 813u32;
pub const ERROR_CRASH_DUMP: WIN32_ERROR = 753u32;
pub const ERROR_CRC: WIN32_ERROR = 23u32;
pub const ERROR_CREATE_FAILED: WIN32_ERROR = 1631u32;
pub const ERROR_CROSS_PARTITION_VIOLATION: WIN32_ERROR = 1661u32;
pub const ERROR_CSCSHARE_OFFLINE: WIN32_ERROR = 1262u32;
pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE: WIN32_ERROR = 6019u32;
pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE: WIN32_ERROR = 6021u32;
pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE: WIN32_ERROR = 6017u32;
pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE: WIN32_ERROR = 6020u32;
pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER: WIN32_ERROR = 6018u32;
pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT: WIN32_ERROR = 7040u32;
pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT: WIN32_ERROR = 7012u32;
pub const ERROR_CURRENT_DIRECTORY: WIN32_ERROR = 16u32;
pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED: WIN32_ERROR = 1399u32;
pub const ERROR_DATABASE_DOES_NOT_EXIST: WIN32_ERROR = 1065u32;
pub const ERROR_DATATYPE_MISMATCH: WIN32_ERROR = 1629u32;
pub const ERROR_DATA_CHECKSUM_ERROR: WIN32_ERROR = 323u32;
pub const ERROR_DATA_NOT_ACCEPTED: WIN32_ERROR = 592u32;
pub const ERROR_DAX_MAPPING_EXISTS: WIN32_ERROR = 361u32;
pub const ERROR_DBG_COMMAND_EXCEPTION: WIN32_ERROR = 697u32;
pub const ERROR_DBG_CONTINUE: WIN32_ERROR = 767u32;
pub const ERROR_DBG_CONTROL_BREAK: WIN32_ERROR = 696u32;
pub const ERROR_DBG_CONTROL_C: WIN32_ERROR = 693u32;
pub const ERROR_DBG_EXCEPTION_HANDLED: WIN32_ERROR = 766u32;
pub const ERROR_DBG_EXCEPTION_NOT_HANDLED: WIN32_ERROR = 688u32;
pub const ERROR_DBG_PRINTEXCEPTION_C: WIN32_ERROR = 694u32;
pub const ERROR_DBG_REPLY_LATER: WIN32_ERROR = 689u32;
pub const ERROR_DBG_RIPEXCEPTION: WIN32_ERROR = 695u32;
pub const ERROR_DBG_TERMINATE_PROCESS: WIN32_ERROR = 692u32;
pub const ERROR_DBG_TERMINATE_THREAD: WIN32_ERROR = 691u32;
pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE: WIN32_ERROR = 690u32;
pub const ERROR_DC_NOT_FOUND: WIN32_ERROR = 1425u32;
pub const ERROR_DDE_FAIL: WIN32_ERROR = 1156u32;
pub const ERROR_DEBUGGER_INACTIVE: WIN32_ERROR = 1284u32;
pub const ERROR_DEBUG_ATTACH_FAILED: WIN32_ERROR = 590u32;
pub const ERROR_DECRYPTION_FAILED: WIN32_ERROR = 6001u32;
pub const ERROR_DELAY_LOAD_FAILED: WIN32_ERROR = 1285u32;
pub const ERROR_DELETE_PENDING: WIN32_ERROR = 303u32;
pub const ERROR_DEPENDENT_SERVICES_RUNNING: WIN32_ERROR = 1051u32;
pub const ERROR_DESTINATION_ELEMENT_FULL: WIN32_ERROR = 1161u32;
pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD: WIN32_ERROR = 1435u32;
pub const ERROR_DEVICE_ALREADY_ATTACHED: WIN32_ERROR = 548u32;
pub const ERROR_DEVICE_ALREADY_REMEMBERED: WIN32_ERROR = 1202u32;
pub const ERROR_DEVICE_DOOR_OPEN: WIN32_ERROR = 1166u32;
pub const ERROR_DEVICE_ENUMERATION_ERROR: WIN32_ERROR = 648u32;
pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED: WIN32_ERROR = 316u32;
pub const ERROR_DEVICE_HARDWARE_ERROR: WIN32_ERROR = 483u32;
pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL: WIN32_ERROR = 355u32;
pub const ERROR_DEVICE_IN_MAINTENANCE: WIN32_ERROR = 359u32;
pub const ERROR_DEVICE_IN_USE: WIN32_ERROR = 2404u32;
pub const ERROR_DEVICE_NOT_CONNECTED: WIN32_ERROR = 1167u32;
pub const ERROR_DEVICE_NOT_PARTITIONED: WIN32_ERROR = 1107u32;
pub const ERROR_DEVICE_NO_RESOURCES: WIN32_ERROR = 322u32;
pub const ERROR_DEVICE_REINITIALIZATION_NEEDED: WIN32_ERROR = 1164u32;
pub const ERROR_DEVICE_REMOVED: WIN32_ERROR = 1617u32;
pub const ERROR_DEVICE_REQUIRES_CLEANING: WIN32_ERROR = 1165u32;
pub const ERROR_DEVICE_RESET_REQUIRED: WIN32_ERROR = 507u32;
pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS: WIN32_ERROR = 171u32;
pub const ERROR_DEVICE_UNREACHABLE: WIN32_ERROR = 321u32;
pub const ERROR_DEV_NOT_EXIST: WIN32_ERROR = 55u32;
pub const ERROR_DHCP_ADDRESS_CONFLICT: WIN32_ERROR = 4100u32;
pub const ERROR_DIFFERENT_SERVICE_ACCOUNT: WIN32_ERROR = 1079u32;
pub const ERROR_DIRECTORY: WIN32_ERROR = 267u32;
pub const ERROR_DIRECTORY_NOT_SUPPORTED: WIN32_ERROR = 336u32;
pub const ERROR_DIRECT_ACCESS_HANDLE: WIN32_ERROR = 130u32;
pub const ERROR_DIR_EFS_DISALLOWED: WIN32_ERROR = 6010u32;
pub const ERROR_DIR_NOT_EMPTY: WIN32_ERROR = 145u32;
pub const ERROR_DIR_NOT_ROOT: WIN32_ERROR = 144u32;
pub const ERROR_DISCARDED: WIN32_ERROR = 157u32;
pub const ERROR_DISK_CHANGE: WIN32_ERROR = 107u32;
pub const ERROR_DISK_CORRUPT: WIN32_ERROR = 1393u32;
pub const ERROR_DISK_FULL: WIN32_ERROR = 112u32;
pub const ERROR_DISK_OPERATION_FAILED: WIN32_ERROR = 1127u32;
pub const ERROR_DISK_QUOTA_EXCEEDED: WIN32_ERROR = 1295u32;
pub const ERROR_DISK_RECALIBRATE_FAILED: WIN32_ERROR = 1126u32;
pub const ERROR_DISK_REPAIR_DISABLED: WIN32_ERROR = 780u32;
pub const ERROR_DISK_REPAIR_REDIRECTED: WIN32_ERROR = 792u32;
pub const ERROR_DISK_REPAIR_UNSUCCESSFUL: WIN32_ERROR = 793u32;
pub const ERROR_DISK_RESET_FAILED: WIN32_ERROR = 1128u32;
pub const ERROR_DISK_RESOURCES_EXHAUSTED: WIN32_ERROR = 314u32;
pub const ERROR_DISK_TOO_FRAGMENTED: WIN32_ERROR = 302u32;
pub const ERROR_DLL_INIT_FAILED: WIN32_ERROR = 1114u32;
pub const ERROR_DLL_INIT_FAILED_LOGOFF: WIN32_ERROR = 624u32;
pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE: WIN32_ERROR = 687u32;
pub const ERROR_DLL_MIGHT_BE_INSECURE: WIN32_ERROR = 686u32;
pub const ERROR_DLL_NOT_FOUND: WIN32_ERROR = 1157u32;
pub const ERROR_DLP_POLICY_DENIES_OPERATION: WIN32_ERROR = 446u32;
pub const ERROR_DLP_POLICY_SILENTLY_FAIL: WIN32_ERROR = 449u32;
pub const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION: WIN32_ERROR = 445u32;
pub const ERROR_DOMAIN_CONTROLLER_EXISTS: WIN32_ERROR = 1250u32;
pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND: WIN32_ERROR = 1908u32;
pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR: WIN32_ERROR = 581u32;
pub const ERROR_DOMAIN_EXISTS: WIN32_ERROR = 1356u32;
pub const ERROR_DOMAIN_LIMIT_EXCEEDED: WIN32_ERROR = 1357u32;
pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION: WIN32_ERROR = 8644u32;
pub const ERROR_DOMAIN_TRUST_INCONSISTENT: WIN32_ERROR = 1810u32;
pub const ERROR_DOWNGRADE_DETECTED: WIN32_ERROR = 1265u32;
pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER: WIN32_ERROR = 423u32;
pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES: WIN32_ERROR = 729u32;
pub const ERROR_DRIVER_BLOCKED: WIN32_ERROR = 1275u32;
pub const ERROR_DRIVER_CANCEL_TIMEOUT: WIN32_ERROR = 594u32;
pub const ERROR_DRIVER_DATABASE_ERROR: WIN32_ERROR = 652u32;
pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD: WIN32_ERROR = 654u32;
pub const ERROR_DRIVER_FAILED_SLEEP: WIN32_ERROR = 633u32;
pub const ERROR_DRIVER_PROCESS_TERMINATED: WIN32_ERROR = 1291u32;
pub const ERROR_DRIVE_LOCKED: WIN32_ERROR = 108u32;
pub const ERROR_DS_ADD_REPLICA_INHIBITED: WIN32_ERROR = 8302u32;
pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED: WIN32_ERROR = 8228u32;
pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS: WIN32_ERROR = 8249u32;
pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER: WIN32_ERROR = 8578u32;
pub const ERROR_DS_ALIASED_OBJ_MISSING: WIN32_ERROR = 8334u32;
pub const ERROR_DS_ALIAS_DEREF_PROBLEM: WIN32_ERROR = 8244u32;
pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS: WIN32_ERROR = 8336u32;
pub const ERROR_DS_ALIAS_PROBLEM: WIN32_ERROR = 8241u32;
pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS: WIN32_ERROR = 8205u32;
pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM: WIN32_ERROR = 8346u32;
pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED: WIN32_ERROR = 8204u32;
pub const ERROR_DS_ATT_ALREADY_EXISTS: WIN32_ERROR = 8318u32;
pub const ERROR_DS_ATT_IS_NOT_ON_OBJ: WIN32_ERROR = 8310u32;
pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS: WIN32_ERROR = 8317u32;
pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA: WIN32_ERROR = 8303u32;
pub const ERROR_DS_ATT_SCHEMA_REQ_ID: WIN32_ERROR = 8399u32;
pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX: WIN32_ERROR = 8416u32;
pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS: WIN32_ERROR = 8323u32;
pub const ERROR_DS_AUDIT_FAILURE: WIN32_ERROR = 8625u32;
pub const ERROR_DS_AUTHORIZATION_FAILED: WIN32_ERROR = 8599u32;
pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED: WIN32_ERROR = 8231u32;
pub const ERROR_DS_AUTH_UNKNOWN: WIN32_ERROR = 8234u32;
pub const ERROR_DS_AUX_CLS_TEST_FAIL: WIN32_ERROR = 8389u32;
pub const ERROR_DS_BACKLINK_WITHOUT_LINK: WIN32_ERROR = 8482u32;
pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX: WIN32_ERROR = 8400u32;
pub const ERROR_DS_BAD_HIERARCHY_FILE: WIN32_ERROR = 8425u32;
pub const ERROR_DS_BAD_INSTANCE_TYPE: WIN32_ERROR = 8313u32;
pub const ERROR_DS_BAD_NAME_SYNTAX: WIN32_ERROR = 8335u32;
pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX: WIN32_ERROR = 8392u32;
pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED: WIN32_ERROR = 8426u32;
pub const ERROR_DS_BUSY: WIN32_ERROR = 8206u32;
pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD: WIN32_ERROR = 8585u32;
pub const ERROR_DS_CANT_ADD_ATT_VALUES: WIN32_ERROR = 8320u32;
pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY: WIN32_ERROR = 8358u32;
pub const ERROR_DS_CANT_ADD_TO_GC: WIN32_ERROR = 8550u32;
pub const ERROR_DS_CANT_CACHE_ATT: WIN32_ERROR = 8401u32;
pub const ERROR_DS_CANT_CACHE_CLASS: WIN32_ERROR = 8402u32;
pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC: WIN32_ERROR = 8553u32;
pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA: WIN32_ERROR = 8510u32;
pub const ERROR_DS_CANT_DELETE: WIN32_ERROR = 8398u32;
pub const ERROR_DS_CANT_DELETE_DSA_OBJ: WIN32_ERROR = 8340u32;
pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF: WIN32_ERROR = 8375u32;
pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC: WIN32_ERROR = 8604u32;
pub const ERROR_DS_CANT_DEREF_ALIAS: WIN32_ERROR = 8337u32;
pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN: WIN32_ERROR = 8603u32;
pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF: WIN32_ERROR = 8589u32;
pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN: WIN32_ERROR = 8537u32;
pub const ERROR_DS_CANT_FIND_DSA_OBJ: WIN32_ERROR = 8419u32;
pub const ERROR_DS_CANT_FIND_EXPECTED_NC: WIN32_ERROR = 8420u32;
pub const ERROR_DS_CANT_FIND_NC_IN_CACHE: WIN32_ERROR = 8421u32;
pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS: WIN32_ERROR = 8331u32;
pub const ERROR_DS_CANT_MOD_OBJ_CLASS: WIN32_ERROR = 8215u32;
pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID: WIN32_ERROR = 8506u32;
pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY: WIN32_ERROR = 8369u32;
pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP: WIN32_ERROR = 8498u32;
pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP: WIN32_ERROR = 8608u32;
pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP: WIN32_ERROR = 8609u32;
pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT: WIN32_ERROR = 8489u32;
pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP: WIN32_ERROR = 8499u32;
pub const ERROR_DS_CANT_ON_NON_LEAF: WIN32_ERROR = 8213u32;
pub const ERROR_DS_CANT_ON_RDN: WIN32_ERROR = 8214u32;
pub const ERROR_DS_CANT_REMOVE_ATT_CACHE: WIN32_ERROR = 8403u32;
pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE: WIN32_ERROR = 8404u32;
pub const ERROR_DS_CANT_REM_MISSING_ATT: WIN32_ERROR = 8324u32;
pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL: WIN32_ERROR = 8325u32;
pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC: WIN32_ERROR = 8424u32;
pub const ERROR_DS_CANT_RETRIEVE_ATTS: WIN32_ERROR = 8481u32;
pub const ERROR_DS_CANT_RETRIEVE_CHILD: WIN32_ERROR = 8422u32;
pub const ERROR_DS_CANT_RETRIEVE_DN: WIN32_ERROR = 8405u32;
pub const ERROR_DS_CANT_RETRIEVE_INSTANCE: WIN32_ERROR = 8407u32;
pub const ERROR_DS_CANT_RETRIEVE_SD: WIN32_ERROR = 8526u32;
pub const ERROR_DS_CANT_START: WIN32_ERROR = 8531u32;
pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ: WIN32_ERROR = 8560u32;
pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS: WIN32_ERROR = 8493u32;
pub const ERROR_DS_CHILDREN_EXIST: WIN32_ERROR = 8332u32;
pub const ERROR_DS_CLASS_MUST_BE_CONCRETE: WIN32_ERROR = 8359u32;
pub const ERROR_DS_CLASS_NOT_DSA: WIN32_ERROR = 8343u32;
pub const ERROR_DS_CLIENT_LOOP: WIN32_ERROR = 8259u32;
pub const ERROR_DS_CODE_INCONSISTENCY: WIN32_ERROR = 8408u32;
pub const ERROR_DS_COMPARE_FALSE: WIN32_ERROR = 8229u32;
pub const ERROR_DS_COMPARE_TRUE: WIN32_ERROR = 8230u32;
pub const ERROR_DS_CONFIDENTIALITY_REQUIRED: WIN32_ERROR = 8237u32;
pub const ERROR_DS_CONFIG_PARAM_MISSING: WIN32_ERROR = 8427u32;
pub const ERROR_DS_CONSTRAINT_VIOLATION: WIN32_ERROR = 8239u32;
pub const ERROR_DS_CONSTRUCTED_ATT_MOD: WIN32_ERROR = 8475u32;
pub const ERROR_DS_CONTROL_NOT_FOUND: WIN32_ERROR = 8258u32;
pub const ERROR_DS_COULDNT_CONTACT_FSMO: WIN32_ERROR = 8367u32;
pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE: WIN32_ERROR = 8503u32;
pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE: WIN32_ERROR = 8502u32;
pub const ERROR_DS_COULDNT_UPDATE_SPNS: WIN32_ERROR = 8525u32;
pub const ERROR_DS_COUNTING_AB_INDICES_FAILED: WIN32_ERROR = 8428u32;
pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD: WIN32_ERROR = 8491u32;
pub const ERROR_DS_CROSS_DOM_MOVE_ERROR: WIN32_ERROR = 8216u32;
pub const ERROR_DS_CROSS_NC_DN_RENAME: WIN32_ERROR = 8368u32;
pub const ERROR_DS_CROSS_REF_BUSY: WIN32_ERROR = 8602u32;
pub const ERROR_DS_CROSS_REF_EXISTS: WIN32_ERROR = 8374u32;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE: WIN32_ERROR = 8495u32;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2: WIN32_ERROR = 8586u32;
pub const ERROR_DS_DATABASE_ERROR: WIN32_ERROR = 8409u32;
pub const ERROR_DS_DECODING_ERROR: WIN32_ERROR = 8253u32;
pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED: WIN32_ERROR = 8536u32;
pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST: WIN32_ERROR = 8535u32;
pub const ERROR_DS_DIFFERENT_REPL_EPOCHS: WIN32_ERROR = 8593u32;
pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER: WIN32_ERROR = 8615u32;
pub const ERROR_DS_DISALLOWED_NC_REDIRECT: WIN32_ERROR = 8640u32;
pub const ERROR_DS_DNS_LOOKUP_FAILURE: WIN32_ERROR = 8524u32;
pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST: WIN32_ERROR = 8634u32;
pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS: WIN32_ERROR = 8612u32;
pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH: WIN32_ERROR = 8564u32;
pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW: WIN32_ERROR = 8566u32;
pub const ERROR_DS_DRA_ABANDON_SYNC: WIN32_ERROR = 8462u32;
pub const ERROR_DS_DRA_ACCESS_DENIED: WIN32_ERROR = 8453u32;
pub const ERROR_DS_DRA_BAD_DN: WIN32_ERROR = 8439u32;
pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE: WIN32_ERROR = 8445u32;
pub const ERROR_DS_DRA_BAD_NC: WIN32_ERROR = 8440u32;
pub const ERROR_DS_DRA_BUSY: WIN32_ERROR = 8438u32;
pub const ERROR_DS_DRA_CONNECTION_FAILED: WIN32_ERROR = 8444u32;
pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR: WIN32_ERROR = 8629u32;
pub const ERROR_DS_DRA_DB_ERROR: WIN32_ERROR = 8451u32;
pub const ERROR_DS_DRA_DN_EXISTS: WIN32_ERROR = 8441u32;
pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT: WIN32_ERROR = 8544u32;
pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED: WIN32_ERROR = 8466u32;
pub const ERROR_DS_DRA_GENERIC: WIN32_ERROR = 8436u32;
pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET: WIN32_ERROR = 8464u32;
pub const ERROR_DS_DRA_INCONSISTENT_DIT: WIN32_ERROR = 8443u32;
pub const ERROR_DS_DRA_INTERNAL_ERROR: WIN32_ERROR = 8442u32;
pub const ERROR_DS_DRA_INVALID_PARAMETER: WIN32_ERROR = 8437u32;
pub const ERROR_DS_DRA_MAIL_PROBLEM: WIN32_ERROR = 8447u32;
pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET: WIN32_ERROR = 8633u32;
pub const ERROR_DS_DRA_MISSING_PARENT: WIN32_ERROR = 8460u32;
pub const ERROR_DS_DRA_NAME_COLLISION: WIN32_ERROR = 8458u32;
pub const ERROR_DS_DRA_NOT_SUPPORTED: WIN32_ERROR = 8454u32;
pub const ERROR_DS_DRA_NO_REPLICA: WIN32_ERROR = 8452u32;
pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE: WIN32_ERROR = 8450u32;
pub const ERROR_DS_DRA_OBJ_NC_MISMATCH: WIN32_ERROR = 8545u32;
pub const ERROR_DS_DRA_OUT_OF_MEM: WIN32_ERROR = 8446u32;
pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW: WIN32_ERROR = 8617u32;
pub const ERROR_DS_DRA_PREEMPTED: WIN32_ERROR = 8461u32;
pub const ERROR_DS_DRA_RECYCLED_TARGET: WIN32_ERROR = 8639u32;
pub const ERROR_DS_DRA_REF_ALREADY_EXISTS: WIN32_ERROR = 8448u32;
pub const ERROR_DS_DRA_REF_NOT_FOUND: WIN32_ERROR = 8449u32;
pub const ERROR_DS_DRA_REPL_PENDING: WIN32_ERROR = 8477u32;
pub const ERROR_DS_DRA_RPC_CANCELLED: WIN32_ERROR = 8455u32;
pub const ERROR_DS_DRA_SCHEMA_CONFLICT: WIN32_ERROR = 8543u32;
pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP: WIN32_ERROR = 8542u32;
pub const ERROR_DS_DRA_SCHEMA_MISMATCH: WIN32_ERROR = 8418u32;
pub const ERROR_DS_DRA_SECRETS_DENIED: WIN32_ERROR = 8630u32;
pub const ERROR_DS_DRA_SHUTDOWN: WIN32_ERROR = 8463u32;
pub const ERROR_DS_DRA_SINK_DISABLED: WIN32_ERROR = 8457u32;
pub const ERROR_DS_DRA_SOURCE_DISABLED: WIN32_ERROR = 8456u32;
pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA: WIN32_ERROR = 8465u32;
pub const ERROR_DS_DRA_SOURCE_REINSTALLED: WIN32_ERROR = 8459u32;
pub const ERROR_DS_DRS_EXTENSIONS_CHANGED: WIN32_ERROR = 8594u32;
pub const ERROR_DS_DSA_MUST_BE_INT_MASTER: WIN32_ERROR = 8342u32;
pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE: WIN32_ERROR = 8496u32;
pub const ERROR_DS_DST_NC_MISMATCH: WIN32_ERROR = 8486u32;
pub const ERROR_DS_DS_REQUIRED: WIN32_ERROR = 8478u32;
pub const ERROR_DS_DUPLICATE_ID_FOUND: WIN32_ERROR = 8605u32;
pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME: WIN32_ERROR = 8382u32;
pub const ERROR_DS_DUP_LINK_ID: WIN32_ERROR = 8468u32;
pub const ERROR_DS_DUP_MAPI_ID: WIN32_ERROR = 8380u32;
pub const ERROR_DS_DUP_MSDS_INTID: WIN32_ERROR = 8597u32;
pub const ERROR_DS_DUP_OID: WIN32_ERROR = 8379u32;
pub const ERROR_DS_DUP_RDN: WIN32_ERROR = 8378u32;
pub const ERROR_DS_DUP_SCHEMA_ID_GUID: WIN32_ERROR = 8381u32;
pub const ERROR_DS_ENCODING_ERROR: WIN32_ERROR = 8252u32;
pub const ERROR_DS_EPOCH_MISMATCH: WIN32_ERROR = 8483u32;
pub const ERROR_DS_EXISTING_AD_CHILD_NC: WIN32_ERROR = 8613u32;
pub const ERROR_DS_EXISTS_IN_AUX_CLS: WIN32_ERROR = 8393u32;
pub const ERROR_DS_EXISTS_IN_MAY_HAVE: WIN32_ERROR = 8386u32;
pub const ERROR_DS_EXISTS_IN_MUST_HAVE: WIN32_ERROR = 8385u32;
pub const ERROR_DS_EXISTS_IN_POSS_SUP: WIN32_ERROR = 8395u32;
pub const ERROR_DS_EXISTS_IN_RDNATTID: WIN32_ERROR = 8598u32;
pub const ERROR_DS_EXISTS_IN_SUB_CLS: WIN32_ERROR = 8394u32;
pub const ERROR_DS_FILTER_UNKNOWN: WIN32_ERROR = 8254u32;
pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS: WIN32_ERROR = 8555u32;
pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST: WIN32_ERROR = 8635u32;
pub const ERROR_DS_FOREST_VERSION_TOO_HIGH: WIN32_ERROR = 8563u32;
pub const ERROR_DS_FOREST_VERSION_TOO_LOW: WIN32_ERROR = 8565u32;
pub const ERROR_DS_GCVERIFY_ERROR: WIN32_ERROR = 8417u32;
pub const ERROR_DS_GC_NOT_AVAILABLE: WIN32_ERROR = 8217u32;
pub const ERROR_DS_GC_REQUIRED: WIN32_ERROR = 8547u32;
pub const ERROR_DS_GENERIC_ERROR: WIN32_ERROR = 8341u32;
pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER: WIN32_ERROR = 8519u32;
pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER: WIN32_ERROR = 8516u32;
pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER: WIN32_ERROR = 8517u32;
pub const ERROR_DS_GOVERNSID_MISSING: WIN32_ERROR = 8410u32;
pub const ERROR_DS_GROUP_CONVERSION_ERROR: WIN32_ERROR = 8607u32;
pub const ERROR_DS_HAVE_PRIMARY_MEMBERS: WIN32_ERROR = 8521u32;
pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED: WIN32_ERROR = 8429u32;
pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP: WIN32_ERROR = 8628u32;
pub const ERROR_DS_HIGH_ADLDS_FFL: WIN32_ERROR = 8641u32;
pub const ERROR_DS_HIGH_DSA_VERSION: WIN32_ERROR = 8642u32;
pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD: WIN32_ERROR = 8507u32;
pub const ERROR_DS_ILLEGAL_MOD_OPERATION: WIN32_ERROR = 8311u32;
pub const ERROR_DS_ILLEGAL_SUPERIOR: WIN32_ERROR = 8345u32;
pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION: WIN32_ERROR = 8492u32;
pub const ERROR_DS_INAPPROPRIATE_AUTH: WIN32_ERROR = 8233u32;
pub const ERROR_DS_INAPPROPRIATE_MATCHING: WIN32_ERROR = 8238u32;
pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED: WIN32_ERROR = 8574u32;
pub const ERROR_DS_INCOMPATIBLE_VERSION: WIN32_ERROR = 8567u32;
pub const ERROR_DS_INCORRECT_ROLE_OWNER: WIN32_ERROR = 8210u32;
pub const ERROR_DS_INIT_FAILURE: WIN32_ERROR = 8532u32;
pub const ERROR_DS_INIT_FAILURE_CONSOLE: WIN32_ERROR = 8561u32;
pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE: WIN32_ERROR = 8512u32;
pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION: WIN32_ERROR = 8511u32;
pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH: WIN32_ERROR = 8467u32;
pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT: WIN32_ERROR = 8606u32;
pub const ERROR_DS_INSUFF_ACCESS_RIGHTS: WIN32_ERROR = 8344u32;
pub const ERROR_DS_INTERNAL_FAILURE: WIN32_ERROR = 8430u32;
pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX: WIN32_ERROR = 8203u32;
pub const ERROR_DS_INVALID_DMD: WIN32_ERROR = 8360u32;
pub const ERROR_DS_INVALID_DN_SYNTAX: WIN32_ERROR = 8242u32;
pub const ERROR_DS_INVALID_GROUP_TYPE: WIN32_ERROR = 8513u32;
pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME: WIN32_ERROR = 8479u32;
pub const ERROR_DS_INVALID_NAME_FOR_SPN: WIN32_ERROR = 8554u32;
pub const ERROR_DS_INVALID_ROLE_OWNER: WIN32_ERROR = 8366u32;
pub const ERROR_DS_INVALID_SCRIPT: WIN32_ERROR = 8600u32;
pub const ERROR_DS_INVALID_SEARCH_FLAG: WIN32_ERROR = 8500u32;
pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE: WIN32_ERROR = 8626u32;
pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE: WIN32_ERROR = 8627u32;
pub const ERROR_DS_IS_LEAF: WIN32_ERROR = 8243u32;
pub const ERROR_DS_KEY_NOT_UNIQUE: WIN32_ERROR = 8527u32;
pub const ERROR_DS_LDAP_SEND_QUEUE_FULL: WIN32_ERROR = 8616u32;
pub const ERROR_DS_LINK_ID_NOT_AVAILABLE: WIN32_ERROR = 8577u32;
pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER: WIN32_ERROR = 8520u32;
pub const ERROR_DS_LOCAL_ERROR: WIN32_ERROR = 8251u32;
pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY: WIN32_ERROR = 8548u32;
pub const ERROR_DS_LOOP_DETECT: WIN32_ERROR = 8246u32;
pub const ERROR_DS_LOW_ADLDS_FFL: WIN32_ERROR = 8643u32;
pub const ERROR_DS_LOW_DSA_VERSION: WIN32_ERROR = 8568u32;
pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4: WIN32_ERROR = 8572u32;
pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: WIN32_ERROR = 8557u32;
pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE: WIN32_ERROR = 8632u32;
pub const ERROR_DS_MASTERDSA_REQUIRED: WIN32_ERROR = 8314u32;
pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED: WIN32_ERROR = 8304u32;
pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY: WIN32_ERROR = 8201u32;
pub const ERROR_DS_MISSING_EXPECTED_ATT: WIN32_ERROR = 8411u32;
pub const ERROR_DS_MISSING_FOREST_TRUST: WIN32_ERROR = 8649u32;
pub const ERROR_DS_MISSING_FSMO_SETTINGS: WIN32_ERROR = 8434u32;
pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER: WIN32_ERROR = 8497u32;
pub const ERROR_DS_MISSING_REQUIRED_ATT: WIN32_ERROR = 8316u32;
pub const ERROR_DS_MISSING_SUPREF: WIN32_ERROR = 8406u32;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG: WIN32_ERROR = 8581u32;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE: WIN32_ERROR = 8579u32;
pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT: WIN32_ERROR = 8582u32;
pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC: WIN32_ERROR = 8558u32;
pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY: WIN32_ERROR = 8473u32;
pub const ERROR_DS_NAME_ERROR_NOT_FOUND: WIN32_ERROR = 8470u32;
pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE: WIN32_ERROR = 8471u32;
pub const ERROR_DS_NAME_ERROR_NO_MAPPING: WIN32_ERROR = 8472u32;
pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING: WIN32_ERROR = 8474u32;
pub const ERROR_DS_NAME_ERROR_RESOLVING: WIN32_ERROR = 8469u32;
pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL: WIN32_ERROR = 8583u32;
pub const ERROR_DS_NAME_NOT_UNIQUE: WIN32_ERROR = 8571u32;
pub const ERROR_DS_NAME_REFERENCE_INVALID: WIN32_ERROR = 8373u32;
pub const ERROR_DS_NAME_TOO_LONG: WIN32_ERROR = 8348u32;
pub const ERROR_DS_NAME_TOO_MANY_PARTS: WIN32_ERROR = 8347u32;
pub const ERROR_DS_NAME_TYPE_UNKNOWN: WIN32_ERROR = 8351u32;
pub const ERROR_DS_NAME_UNPARSEABLE: WIN32_ERROR = 8350u32;
pub const ERROR_DS_NAME_VALUE_TOO_LONG: WIN32_ERROR = 8349u32;
pub const ERROR_DS_NAMING_MASTER_GC: WIN32_ERROR = 8523u32;
pub const ERROR_DS_NAMING_VIOLATION: WIN32_ERROR = 8247u32;
pub const ERROR_DS_NCNAME_MISSING_CR_REF: WIN32_ERROR = 8412u32;
pub const ERROR_DS_NCNAME_MUST_BE_NC: WIN32_ERROR = 8357u32;
pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT: WIN32_ERROR = 8494u32;
pub const ERROR_DS_NC_STILL_HAS_DSAS: WIN32_ERROR = 8546u32;
pub const ERROR_DS_NONEXISTENT_MAY_HAVE: WIN32_ERROR = 8387u32;
pub const ERROR_DS_NONEXISTENT_MUST_HAVE: WIN32_ERROR = 8388u32;
pub const ERROR_DS_NONEXISTENT_POSS_SUP: WIN32_ERROR = 8390u32;
pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE: WIN32_ERROR = 8508u32;
pub const ERROR_DS_NON_ASQ_SEARCH: WIN32_ERROR = 8624u32;
pub const ERROR_DS_NON_BASE_SEARCH: WIN32_ERROR = 8480u32;
pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX: WIN32_ERROR = 8377u32;
pub const ERROR_DS_NOT_AN_OBJECT: WIN32_ERROR = 8352u32;
pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC: WIN32_ERROR = 8487u32;
pub const ERROR_DS_NOT_CLOSEST: WIN32_ERROR = 8588u32;
pub const ERROR_DS_NOT_INSTALLED: WIN32_ERROR = 8200u32;
pub const ERROR_DS_NOT_ON_BACKLINK: WIN32_ERROR = 8362u32;
pub const ERROR_DS_NOT_SUPPORTED: WIN32_ERROR = 8256u32;
pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER: WIN32_ERROR = 8570u32;
pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE: WIN32_ERROR = 8202u32;
pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN: WIN32_ERROR = 8569u32;
pub const ERROR_DS_NO_CHAINED_EVAL: WIN32_ERROR = 8328u32;
pub const ERROR_DS_NO_CHAINING: WIN32_ERROR = 8327u32;
pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC: WIN32_ERROR = 8551u32;
pub const ERROR_DS_NO_CROSSREF_FOR_NC: WIN32_ERROR = 8363u32;
pub const ERROR_DS_NO_DELETED_NAME: WIN32_ERROR = 8355u32;
pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS: WIN32_ERROR = 8549u32;
pub const ERROR_DS_NO_MORE_RIDS: WIN32_ERROR = 8209u32;
pub const ERROR_DS_NO_MSDS_INTID: WIN32_ERROR = 8596u32;
pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN: WIN32_ERROR = 8514u32;
pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN: WIN32_ERROR = 8515u32;
pub const ERROR_DS_NO_NTDSA_OBJECT: WIN32_ERROR = 8623u32;
pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC: WIN32_ERROR = 8580u32;
pub const ERROR_DS_NO_PARENT_OBJECT: WIN32_ERROR = 8329u32;
pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION: WIN32_ERROR = 8533u32;
pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA: WIN32_ERROR = 8306u32;
pub const ERROR_DS_NO_REF_DOMAIN: WIN32_ERROR = 8575u32;
pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND: WIN32_ERROR = 8308u32;
pub const ERROR_DS_NO_RESULTS_RETURNED: WIN32_ERROR = 8257u32;
pub const ERROR_DS_NO_RIDS_ALLOCATED: WIN32_ERROR = 8208u32;
pub const ERROR_DS_NO_SERVER_OBJECT: WIN32_ERROR = 8622u32;
pub const ERROR_DS_NO_SUCH_OBJECT: WIN32_ERROR = 8240u32;
pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC: WIN32_ERROR = 8501u32;
pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR: WIN32_ERROR = 8592u32;
pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR: WIN32_ERROR = 8591u32;
pub const ERROR_DS_OBJECT_BEING_REMOVED: WIN32_ERROR = 8339u32;
pub const ERROR_DS_OBJECT_CLASS_REQUIRED: WIN32_ERROR = 8315u32;
pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE: WIN32_ERROR = 8248u32;
pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED: WIN32_ERROR = 8371u32;
pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS: WIN32_ERROR = 8372u32;
pub const ERROR_DS_OBJ_CLASS_VIOLATION: WIN32_ERROR = 8212u32;
pub const ERROR_DS_OBJ_GUID_EXISTS: WIN32_ERROR = 8361u32;
pub const ERROR_DS_OBJ_NOT_FOUND: WIN32_ERROR = 8333u32;
pub const ERROR_DS_OBJ_STRING_NAME_EXISTS: WIN32_ERROR = 8305u32;
pub const ERROR_DS_OBJ_TOO_LARGE: WIN32_ERROR = 8312u32;
pub const ERROR_DS_OFFSET_RANGE_ERROR: WIN32_ERROR = 8262u32;
pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS: WIN32_ERROR = 8637u32;
pub const ERROR_DS_OID_NOT_FOUND: WIN32_ERROR = 8638u32;
pub const ERROR_DS_OPERATIONS_ERROR: WIN32_ERROR = 8224u32;
pub const ERROR_DS_OUT_OF_SCOPE: WIN32_ERROR = 8338u32;
pub const ERROR_DS_OUT_OF_VERSION_STORE: WIN32_ERROR = 8573u32;
pub const ERROR_DS_PARAM_ERROR: WIN32_ERROR = 8255u32;
pub const ERROR_DS_PARENT_IS_AN_ALIAS: WIN32_ERROR = 8330u32;
pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS: WIN32_ERROR = 8490u32;
pub const ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD: WIN32_ERROR = 8652u32;
pub const ERROR_DS_POLICY_NOT_KNOWN: WIN32_ERROR = 8618u32;
pub const ERROR_DS_PROTOCOL_ERROR: WIN32_ERROR = 8225u32;
pub const ERROR_DS_RANGE_CONSTRAINT: WIN32_ERROR = 8322u32;
pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA: WIN32_ERROR = 8307u32;
pub const ERROR_DS_RECALCSCHEMA_FAILED: WIN32_ERROR = 8396u32;
pub const ERROR_DS_REFERRAL: WIN32_ERROR = 8235u32;
pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED: WIN32_ERROR = 8260u32;
pub const ERROR_DS_REFUSING_FSMO_ROLES: WIN32_ERROR = 8433u32;
pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED: WIN32_ERROR = 8601u32;
pub const ERROR_DS_REPLICATOR_ONLY: WIN32_ERROR = 8370u32;
pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR: WIN32_ERROR = 8595u32;
pub const ERROR_DS_REPL_LIFETIME_EXCEEDED: WIN32_ERROR = 8614u32;
pub const ERROR_DS_RESERVED_LINK_ID: WIN32_ERROR = 8576u32;
pub const ERROR_DS_RESERVED_MAPI_ID: WIN32_ERROR = 8631u32;
pub const ERROR_DS_RIDMGR_DISABLED: WIN32_ERROR = 8263u32;
pub const ERROR_DS_RIDMGR_INIT_ERROR: WIN32_ERROR = 8211u32;
pub const ERROR_DS_ROLE_NOT_VERIFIED: WIN32_ERROR = 8610u32;
pub const ERROR_DS_ROOT_CANT_BE_SUBREF: WIN32_ERROR = 8326u32;
pub const ERROR_DS_ROOT_MUST_BE_NC: WIN32_ERROR = 8301u32;
pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP: WIN32_ERROR = 8432u32;
pub const ERROR_DS_SAM_INIT_FAILURE: WIN32_ERROR = 8504u32;
pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE: WIN32_ERROR = 8562u32;
pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY: WIN32_ERROR = 8530u32;
pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD: WIN32_ERROR = 8529u32;
pub const ERROR_DS_SCHEMA_ALLOC_FAILED: WIN32_ERROR = 8415u32;
pub const ERROR_DS_SCHEMA_NOT_LOADED: WIN32_ERROR = 8414u32;
pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED: WIN32_ERROR = 8509u32;
pub const ERROR_DS_SECURITY_CHECKING_ERROR: WIN32_ERROR = 8413u32;
pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY: WIN32_ERROR = 8423u32;
pub const ERROR_DS_SEC_DESC_INVALID: WIN32_ERROR = 8354u32;
pub const ERROR_DS_SEC_DESC_TOO_SHORT: WIN32_ERROR = 8353u32;
pub const ERROR_DS_SEMANTIC_ATT_TEST: WIN32_ERROR = 8383u32;
pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION: WIN32_ERROR = 8505u32;
pub const ERROR_DS_SERVER_DOWN: WIN32_ERROR = 8250u32;
pub const ERROR_DS_SHUTTING_DOWN: WIN32_ERROR = 8364u32;
pub const ERROR_DS_SINGLE_USER_MODE_FAILED: WIN32_ERROR = 8590u32;
pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT: WIN32_ERROR = 8321u32;
pub const ERROR_DS_SIZELIMIT_EXCEEDED: WIN32_ERROR = 8227u32;
pub const ERROR_DS_SORT_CONTROL_MISSING: WIN32_ERROR = 8261u32;
pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED: WIN32_ERROR = 8552u32;
pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST: WIN32_ERROR = 8534u32;
pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST: WIN32_ERROR = 8647u32;
pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL: WIN32_ERROR = 8485u32;
pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH: WIN32_ERROR = 8540u32;
pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER: WIN32_ERROR = 8559u32;
pub const ERROR_DS_SRC_GUID_MISMATCH: WIN32_ERROR = 8488u32;
pub const ERROR_DS_SRC_NAME_MISMATCH: WIN32_ERROR = 8484u32;
pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER: WIN32_ERROR = 8538u32;
pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST: WIN32_ERROR = 8539u32;
pub const ERROR_DS_STRING_SD_CONVERSION_FAILED: WIN32_ERROR = 8522u32;
pub const ERROR_DS_STRONG_AUTH_REQUIRED: WIN32_ERROR = 8232u32;
pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT: WIN32_ERROR = 8356u32;
pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD: WIN32_ERROR = 8376u32;
pub const ERROR_DS_SUB_CLS_TEST_FAIL: WIN32_ERROR = 8391u32;
pub const ERROR_DS_SYNTAX_MISMATCH: WIN32_ERROR = 8384u32;
pub const ERROR_DS_THREAD_LIMIT_EXCEEDED: WIN32_ERROR = 8587u32;
pub const ERROR_DS_TIMELIMIT_EXCEEDED: WIN32_ERROR = 8226u32;
pub const ERROR_DS_TREE_DELETE_NOT_FINISHED: WIN32_ERROR = 8397u32;
pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES: WIN32_ERROR = 8435u32;
pub const ERROR_DS_UNAVAILABLE: WIN32_ERROR = 8207u32;
pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION: WIN32_ERROR = 8236u32;
pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED: WIN32_ERROR = 8645u32;
pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES: WIN32_ERROR = 8556u32;
pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER: WIN32_ERROR = 8518u32;
pub const ERROR_DS_UNKNOWN_ERROR: WIN32_ERROR = 8431u32;
pub const ERROR_DS_UNKNOWN_OPERATION: WIN32_ERROR = 8365u32;
pub const ERROR_DS_UNWILLING_TO_PERFORM: WIN32_ERROR = 8245u32;
pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST: WIN32_ERROR = 8648u32;
pub const ERROR_DS_USER_BUFFER_TO_SMALL: WIN32_ERROR = 8309u32;
pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE: WIN32_ERROR = 8650u32;
pub const ERROR_DS_VERSION_CHECK_FAILURE: WIN32_ERROR = 643u32;
pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL: WIN32_ERROR = 8611u32;
pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX: WIN32_ERROR = 8528u32;
pub const ERROR_DS_WRONG_OM_OBJ_CLASS: WIN32_ERROR = 8476u32;
pub const ERROR_DUPLICATE_PRIVILEGES: WIN32_ERROR = 311u32;
pub const ERROR_DUPLICATE_SERVICE_NAME: WIN32_ERROR = 1078u32;
pub const ERROR_DUP_DOMAINNAME: WIN32_ERROR = 1221u32;
pub const ERROR_DUP_NAME: WIN32_ERROR = 52u32;
pub const ERROR_DYNAMIC_CODE_BLOCKED: WIN32_ERROR = 1655u32;
pub const ERROR_DYNLINK_FROM_INVALID_RING: WIN32_ERROR = 196u32;
pub const ERROR_EAS_DIDNT_FIT: WIN32_ERROR = 275u32;
pub const ERROR_EAS_NOT_SUPPORTED: WIN32_ERROR = 282u32;
pub const ERROR_EA_ACCESS_DENIED: WIN32_ERROR = 994u32;
pub const ERROR_EA_FILE_CORRUPT: WIN32_ERROR = 276u32;
pub const ERROR_EA_LIST_INCONSISTENT: WIN32_ERROR = 255u32;
pub const ERROR_EA_TABLE_FULL: WIN32_ERROR = 277u32;
pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED: WIN32_ERROR = 357u32;
pub const ERROR_EDP_POLICY_DENIES_OPERATION: WIN32_ERROR = 356u32;
pub const ERROR_EFS_ALG_BLOB_TOO_BIG: WIN32_ERROR = 6013u32;
pub const ERROR_EFS_DISABLED: WIN32_ERROR = 6015u32;
pub const ERROR_EFS_SERVER_NOT_TRUSTED: WIN32_ERROR = 6011u32;
pub const ERROR_EFS_VERSION_NOT_SUPPORT: WIN32_ERROR = 6016u32;
pub const ERROR_ELEVATION_REQUIRED: WIN32_ERROR = 740u32;
pub const ERROR_ENCLAVE_FAILURE: WIN32_ERROR = 349u32;
pub const ERROR_ENCLAVE_NOT_TERMINATED: WIN32_ERROR = 814u32;
pub const ERROR_ENCLAVE_VIOLATION: WIN32_ERROR = 815u32;
pub const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED: WIN32_ERROR = 489u32;
pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE: WIN32_ERROR = 808u32;
pub const ERROR_ENCRYPTING_METADATA_DISALLOWED: WIN32_ERROR = 431u32;
pub const ERROR_ENCRYPTION_DISABLED: WIN32_ERROR = 430u32;
pub const ERROR_ENCRYPTION_FAILED: WIN32_ERROR = 6000u32;
pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION: WIN32_ERROR = 6022u32;
pub const ERROR_END_OF_MEDIA: WIN32_ERROR = 1100u32;
pub const ERROR_ENVVAR_NOT_FOUND: WIN32_ERROR = 203u32;
pub const ERROR_EOM_OVERFLOW: WIN32_ERROR = 1129u32;
pub const ERROR_ERRORS_ENCOUNTERED: WIN32_ERROR = 774u32;
pub const ERROR_EVALUATION_EXPIRATION: WIN32_ERROR = 622u32;
pub const ERROR_EVENTLOG_CANT_START: WIN32_ERROR = 1501u32;
pub const ERROR_EVENTLOG_FILE_CHANGED: WIN32_ERROR = 1503u32;
pub const ERROR_EVENTLOG_FILE_CORRUPT: WIN32_ERROR = 1500u32;
pub const ERROR_EVENT_DONE: WIN32_ERROR = 710u32;
pub const ERROR_EVENT_PENDING: WIN32_ERROR = 711u32;
pub const ERROR_EXCEPTION_IN_SERVICE: WIN32_ERROR = 1064u32;
pub const ERROR_EXCL_SEM_ALREADY_OWNED: WIN32_ERROR = 101u32;
pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY: WIN32_ERROR = 217u32;
pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY: WIN32_ERROR = 218u32;
pub const ERROR_EXE_MACHINE_TYPE_MISMATCH: WIN32_ERROR = 216u32;
pub const ERROR_EXE_MARKED_INVALID: WIN32_ERROR = 192u32;
pub const ERROR_EXTENDED_ERROR: WIN32_ERROR = 1208u32;
pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN: WIN32_ERROR = 343u32;
pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED: WIN32_ERROR = 399u32;
pub const ERROR_EXTRANEOUS_INFORMATION: WIN32_ERROR = 677u32;
pub const ERROR_FAILED_DRIVER_ENTRY: WIN32_ERROR = 647u32;
pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT: WIN32_ERROR = 1063u32;
pub const ERROR_FAIL_FAST_EXCEPTION: WIN32_ERROR = 1653u32;
pub const ERROR_FAIL_I24: WIN32_ERROR = 83u32;
pub const ERROR_FAIL_NOACTION_REBOOT: WIN32_ERROR = 350u32;
pub const ERROR_FAIL_RESTART: WIN32_ERROR = 352u32;
pub const ERROR_FAIL_SHUTDOWN: WIN32_ERROR = 351u32;
pub const ERROR_FATAL_APP_EXIT: WIN32_ERROR = 713u32;
pub const ERROR_FILEMARK_DETECTED: WIN32_ERROR = 1101u32;
pub const ERROR_FILENAME_EXCED_RANGE: WIN32_ERROR = 206u32;
pub const ERROR_FILE_CHECKED_OUT: WIN32_ERROR = 220u32;
pub const ERROR_FILE_CORRUPT: WIN32_ERROR = 1392u32;
pub const ERROR_FILE_ENCRYPTED: WIN32_ERROR = 6002u32;
pub const ERROR_FILE_EXISTS: WIN32_ERROR = 80u32;
pub const ERROR_FILE_HANDLE_REVOKED: WIN32_ERROR = 806u32;
pub const ERROR_FILE_INVALID: WIN32_ERROR = 1006u32;
pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED: WIN32_ERROR = 326u32;
pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS: WIN32_ERROR = 809u32;
pub const ERROR_FILE_NOT_ENCRYPTED: WIN32_ERROR = 6007u32;
pub const ERROR_FILE_NOT_FOUND: WIN32_ERROR = 2u32;
pub const ERROR_FILE_NOT_SUPPORTED: WIN32_ERROR = 425u32;
pub const ERROR_FILE_OFFLINE: WIN32_ERROR = 4350u32;
pub const ERROR_FILE_PROTECTED_UNDER_DPL: WIN32_ERROR = 406u32;
pub const ERROR_FILE_READ_ONLY: WIN32_ERROR = 6009u32;
pub const ERROR_FILE_SNAP_INVALID_PARAMETER: WIN32_ERROR = 440u32;
pub const ERROR_FILE_SNAP_IN_PROGRESS: WIN32_ERROR = 435u32;
pub const ERROR_FILE_SNAP_IO_NOT_COORDINATED: WIN32_ERROR = 438u32;
pub const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED: WIN32_ERROR = 437u32;
pub const ERROR_FILE_SNAP_UNEXPECTED_ERROR: WIN32_ERROR = 439u32;
pub const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED: WIN32_ERROR = 436u32;
pub const ERROR_FILE_SYSTEM_LIMITATION: WIN32_ERROR = 665u32;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY: WIN32_ERROR = 371u32;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION: WIN32_ERROR = 385u32;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT: WIN32_ERROR = 370u32;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN: WIN32_ERROR = 372u32;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE: WIN32_ERROR = 369u32;
pub const ERROR_FILE_TOO_LARGE: WIN32_ERROR = 223u32;
pub const ERROR_FIRMWARE_UPDATED: WIN32_ERROR = 728u32;
pub const ERROR_FLOAT_MULTIPLE_FAULTS: WIN32_ERROR = 630u32;
pub const ERROR_FLOAT_MULTIPLE_TRAPS: WIN32_ERROR = 631u32;
pub const ERROR_FLOPPY_BAD_REGISTERS: WIN32_ERROR = 1125u32;
pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND: WIN32_ERROR = 1122u32;
pub const ERROR_FLOPPY_UNKNOWN_ERROR: WIN32_ERROR = 1124u32;
pub const ERROR_FLOPPY_VOLUME: WIN32_ERROR = 584u32;
pub const ERROR_FLOPPY_WRONG_CYLINDER: WIN32_ERROR = 1123u32;
pub const ERROR_FORMS_AUTH_REQUIRED: WIN32_ERROR = 224u32;
pub const ERROR_FOUND_OUT_OF_SCOPE: WIN32_ERROR = 601u32;
pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY: WIN32_ERROR = 762u32;
pub const ERROR_FS_DRIVER_REQUIRED: WIN32_ERROR = 588u32;
pub const ERROR_FS_METADATA_INCONSISTENT: WIN32_ERROR = 510u32;
pub const ERROR_FT_DI_SCAN_REQUIRED: WIN32_ERROR = 339u32;
pub const ERROR_FT_READ_FAILURE: WIN32_ERROR = 415u32;
pub const ERROR_FT_READ_FROM_COPY_FAILURE: WIN32_ERROR = 818u32;
pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP: WIN32_ERROR = 704u32;
pub const ERROR_FT_WRITE_FAILURE: WIN32_ERROR = 338u32;
pub const ERROR_FT_WRITE_RECOVERY: WIN32_ERROR = 705u32;
pub const ERROR_FULLSCREEN_MODE: WIN32_ERROR = 1007u32;
pub const ERROR_FUNCTION_FAILED: WIN32_ERROR = 1627u32;
pub const ERROR_FUNCTION_NOT_CALLED: WIN32_ERROR = 1626u32;
pub const ERROR_GDI_HANDLE_LEAK: WIN32_ERROR = 373u32;
pub const ERROR_GENERIC_NOT_MAPPED: WIN32_ERROR = 1360u32;
pub const ERROR_GEN_FAILURE: WIN32_ERROR = 31u32;
pub const ERROR_GLOBAL_ONLY_HOOK: WIN32_ERROR = 1429u32;
pub const ERROR_GRACEFUL_DISCONNECT: WIN32_ERROR = 1226u32;
pub const ERROR_GROUP_EXISTS: WIN32_ERROR = 1318u32;
pub const ERROR_GUID_SUBSTITUTION_MADE: WIN32_ERROR = 680u32;
pub const ERROR_HANDLES_CLOSED: WIN32_ERROR = 676u32;
pub const ERROR_HANDLE_DISK_FULL: WIN32_ERROR = 39u32;
pub const ERROR_HANDLE_EOF: WIN32_ERROR = 38u32;
pub const ERROR_HANDLE_REVOKED: WIN32_ERROR = 811u32;
pub const ERROR_HAS_SYSTEM_CRITICAL_FILES: WIN32_ERROR = 488u32;
pub const ERROR_HIBERNATED: WIN32_ERROR = 726u32;
pub const ERROR_HIBERNATION_FAILURE: WIN32_ERROR = 656u32;
pub const ERROR_HOOK_NEEDS_HMOD: WIN32_ERROR = 1428u32;
pub const ERROR_HOOK_NOT_INSTALLED: WIN32_ERROR = 1431u32;
pub const ERROR_HOOK_TYPE_NOT_ALLOWED: WIN32_ERROR = 1458u32;
pub const ERROR_HOST_DOWN: WIN32_ERROR = 1256u32;
pub const ERROR_HOST_UNREACHABLE: WIN32_ERROR = 1232u32;
pub const ERROR_HOTKEY_ALREADY_REGISTERED: WIN32_ERROR = 1409u32;
pub const ERROR_HOTKEY_NOT_REGISTERED: WIN32_ERROR = 1419u32;
pub const ERROR_HWNDS_HAVE_DIFF_PARENT: WIN32_ERROR = 1441u32;
pub const ERROR_ILLEGAL_CHARACTER: WIN32_ERROR = 582u32;
pub const ERROR_ILLEGAL_DLL_RELOCATION: WIN32_ERROR = 623u32;
pub const ERROR_ILLEGAL_ELEMENT_ADDRESS: WIN32_ERROR = 1162u32;
pub const ERROR_ILLEGAL_FLOAT_CONTEXT: WIN32_ERROR = 579u32;
pub const ERROR_ILL_FORMED_PASSWORD: WIN32_ERROR = 1324u32;
pub const ERROR_IMAGE_AT_DIFFERENT_BASE: WIN32_ERROR = 807u32;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH: WIN32_ERROR = 706u32;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE: WIN32_ERROR = 720u32;
pub const ERROR_IMAGE_NOT_AT_BASE: WIN32_ERROR = 700u32;
pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT: WIN32_ERROR = 308u32;
pub const ERROR_IMPLEMENTATION_LIMIT: WIN32_ERROR = 1292u32;
pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE: WIN32_ERROR = 1297u32;
pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE: WIN32_ERROR = 1290u32;
pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING: WIN32_ERROR = 304u32;
pub const ERROR_INCORRECT_ACCOUNT_TYPE: WIN32_ERROR = 8646u32;
pub const ERROR_INCORRECT_ADDRESS: WIN32_ERROR = 1241u32;
pub const ERROR_INCORRECT_SIZE: WIN32_ERROR = 1462u32;
pub const ERROR_INDEX_ABSENT: WIN32_ERROR = 1611u32;
pub const ERROR_INDEX_OUT_OF_BOUNDS: WIN32_ERROR = 474u32;
pub const ERROR_INFLOOP_IN_RELOC_CHAIN: WIN32_ERROR = 202u32;
pub const ERROR_INSTALL_ALREADY_RUNNING: WIN32_ERROR = 1618u32;
pub const ERROR_INSTALL_FAILURE: WIN32_ERROR = 1603u32;
pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED: WIN32_ERROR = 1623u32;
pub const ERROR_INSTALL_LOG_FAILURE: WIN32_ERROR = 1622u32;
pub const ERROR_INSTALL_NOTUSED: WIN32_ERROR = 1634u32;
pub const ERROR_INSTALL_PACKAGE_INVALID: WIN32_ERROR = 1620u32;
pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED: WIN32_ERROR = 1619u32;
pub const ERROR_INSTALL_PACKAGE_REJECTED: WIN32_ERROR = 1625u32;
pub const ERROR_INSTALL_PACKAGE_VERSION: WIN32_ERROR = 1613u32;
pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED: WIN32_ERROR = 1633u32;
pub const ERROR_INSTALL_REJECTED: WIN32_ERROR = 1654u32;
pub const ERROR_INSTALL_REMOTE_DISALLOWED: WIN32_ERROR = 1640u32;
pub const ERROR_INSTALL_REMOTE_PROHIBITED: WIN32_ERROR = 1645u32;
pub const ERROR_INSTALL_SERVICE_FAILURE: WIN32_ERROR = 1601u32;
pub const ERROR_INSTALL_SERVICE_SAFEBOOT: WIN32_ERROR = 1652u32;
pub const ERROR_INSTALL_SOURCE_ABSENT: WIN32_ERROR = 1612u32;
pub const ERROR_INSTALL_SUSPEND: WIN32_ERROR = 1604u32;
pub const ERROR_INSTALL_TEMP_UNWRITABLE: WIN32_ERROR = 1632u32;
pub const ERROR_INSTALL_TRANSFORM_FAILURE: WIN32_ERROR = 1624u32;
pub const ERROR_INSTALL_TRANSFORM_REJECTED: WIN32_ERROR = 1644u32;
pub const ERROR_INSTALL_UI_FAILURE: WIN32_ERROR = 1621u32;
pub const ERROR_INSTALL_USEREXIT: WIN32_ERROR = 1602u32;
pub const ERROR_INSTRUCTION_MISALIGNMENT: WIN32_ERROR = 549u32;
pub const ERROR_INSUFFICIENT_BUFFER: WIN32_ERROR = 122u32;
pub const ERROR_INSUFFICIENT_LOGON_INFO: WIN32_ERROR = 608u32;
pub const ERROR_INSUFFICIENT_POWER: WIN32_ERROR = 639u32;
pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE: WIN32_ERROR = 781u32;
pub const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES: WIN32_ERROR = 473u32;
pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION: WIN32_ERROR = 324u32;
pub const ERROR_INTERNAL_DB_CORRUPTION: WIN32_ERROR = 1358u32;
pub const ERROR_INTERNAL_DB_ERROR: WIN32_ERROR = 1383u32;
pub const ERROR_INTERNAL_ERROR: WIN32_ERROR = 1359u32;
pub const ERROR_INTERRUPT_STILL_CONNECTED: WIN32_ERROR = 764u32;
pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED: WIN32_ERROR = 763u32;
pub const ERROR_INVALID_ACCEL_HANDLE: WIN32_ERROR = 1403u32;
pub const ERROR_INVALID_ACCESS: WIN32_ERROR = 12u32;
pub const ERROR_INVALID_ACCOUNT_NAME: WIN32_ERROR = 1315u32;
pub const ERROR_INVALID_ACE_CONDITION: WIN32_ERROR = 805u32;
pub const ERROR_INVALID_ACL: WIN32_ERROR = 1336u32;
pub const ERROR_INVALID_ADDRESS: WIN32_ERROR = 487u32;
pub const ERROR_INVALID_AT_INTERRUPT_TIME: WIN32_ERROR = 104u32;
pub const ERROR_INVALID_BLOCK: WIN32_ERROR = 9u32;
pub const ERROR_INVALID_BLOCK_LENGTH: WIN32_ERROR = 1106u32;
pub const ERROR_INVALID_CAP: WIN32_ERROR = 320u32;
pub const ERROR_INVALID_CATEGORY: WIN32_ERROR = 117u32;
pub const ERROR_INVALID_COMBOBOX_MESSAGE: WIN32_ERROR = 1422u32;
pub const ERROR_INVALID_COMMAND_LINE: WIN32_ERROR = 1639u32;
pub const ERROR_INVALID_COMPUTERNAME: WIN32_ERROR = 1210u32;
pub const ERROR_INVALID_CRUNTIME_PARAMETER: WIN32_ERROR = 1288u32;
pub const ERROR_INVALID_CURSOR_HANDLE: WIN32_ERROR = 1402u32;
pub const ERROR_INVALID_DATA: WIN32_ERROR = 13u32;
pub const ERROR_INVALID_DATATYPE: WIN32_ERROR = 1804u32;
pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER: WIN32_ERROR = 650u32;
pub const ERROR_INVALID_DLL: WIN32_ERROR = 1154u32;
pub const ERROR_INVALID_DOMAINNAME: WIN32_ERROR = 1212u32;
pub const ERROR_INVALID_DOMAIN_ROLE: WIN32_ERROR = 1354u32;
pub const ERROR_INVALID_DOMAIN_STATE: WIN32_ERROR = 1353u32;
pub const ERROR_INVALID_DRIVE: WIN32_ERROR = 15u32;
pub const ERROR_INVALID_DWP_HANDLE: WIN32_ERROR = 1405u32;
pub const ERROR_INVALID_EA_HANDLE: WIN32_ERROR = 278u32;
pub const ERROR_INVALID_EA_NAME: WIN32_ERROR = 254u32;
pub const ERROR_INVALID_EDIT_HEIGHT: WIN32_ERROR = 1424u32;
pub const ERROR_INVALID_ENVIRONMENT: WIN32_ERROR = 1805u32;
pub const ERROR_INVALID_EVENTNAME: WIN32_ERROR = 1211u32;
pub const ERROR_INVALID_EVENT_COUNT: WIN32_ERROR = 151u32;
pub const ERROR_INVALID_EXCEPTION_HANDLER: WIN32_ERROR = 310u32;
pub const ERROR_INVALID_EXE_SIGNATURE: WIN32_ERROR = 191u32;
pub const ERROR_INVALID_FIELD: WIN32_ERROR = 1616u32;
pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST: WIN32_ERROR = 328u32;
pub const ERROR_INVALID_FILTER_PROC: WIN32_ERROR = 1427u32;
pub const ERROR_INVALID_FLAGS: WIN32_ERROR = 1004u32;
pub const ERROR_INVALID_FLAG_NUMBER: WIN32_ERROR = 186u32;
pub const ERROR_INVALID_FORM_NAME: WIN32_ERROR = 1902u32;
pub const ERROR_INVALID_FORM_SIZE: WIN32_ERROR = 1903u32;
pub const ERROR_INVALID_FUNCTION: WIN32_ERROR = 1u32;
pub const ERROR_INVALID_GROUPNAME: WIN32_ERROR = 1209u32;
pub const ERROR_INVALID_GROUP_ATTRIBUTES: WIN32_ERROR = 1345u32;
pub const ERROR_INVALID_GW_COMMAND: WIN32_ERROR = 1443u32;
pub const ERROR_INVALID_HANDLE: WIN32_ERROR = 6u32;
pub const ERROR_INVALID_HANDLE_STATE: WIN32_ERROR = 1609u32;
pub const ERROR_INVALID_HOOK_FILTER: WIN32_ERROR = 1426u32;
pub const ERROR_INVALID_HOOK_HANDLE: WIN32_ERROR = 1404u32;
pub const ERROR_INVALID_HW_PROFILE: WIN32_ERROR = 619u32;
pub const ERROR_INVALID_ICON_HANDLE: WIN32_ERROR = 1414u32;
pub const ERROR_INVALID_ID_AUTHORITY: WIN32_ERROR = 1343u32;
pub const ERROR_INVALID_IMAGE_HASH: WIN32_ERROR = 577u32;
pub const ERROR_INVALID_IMPORT_OF_NON_DLL: WIN32_ERROR = 1276u32;
pub const ERROR_INVALID_INDEX: WIN32_ERROR = 1413u32;
pub const ERROR_INVALID_KERNEL_INFO_VERSION: WIN32_ERROR = 340u32;
pub const ERROR_INVALID_KEYBOARD_HANDLE: WIN32_ERROR = 1457u32;
pub const ERROR_INVALID_LABEL: WIN32_ERROR = 1299u32;
pub const ERROR_INVALID_LB_MESSAGE: WIN32_ERROR = 1432u32;
pub const ERROR_INVALID_LDT_DESCRIPTOR: WIN32_ERROR = 564u32;
pub const ERROR_INVALID_LDT_OFFSET: WIN32_ERROR = 563u32;
pub const ERROR_INVALID_LDT_SIZE: WIN32_ERROR = 561u32;
pub const ERROR_INVALID_LEVEL: WIN32_ERROR = 124u32;
pub const ERROR_INVALID_LIST_FORMAT: WIN32_ERROR = 153u32;
pub const ERROR_INVALID_LOCK_RANGE: WIN32_ERROR = 307u32;
pub const ERROR_INVALID_LOGON_HOURS: WIN32_ERROR = 1328u32;
pub const ERROR_INVALID_LOGON_TYPE: WIN32_ERROR = 1367u32;
pub const ERROR_INVALID_MEMBER: WIN32_ERROR = 1388u32;
pub const ERROR_INVALID_MENU_HANDLE: WIN32_ERROR = 1401u32;
pub const ERROR_INVALID_MESSAGE: WIN32_ERROR = 1002u32;
pub const ERROR_INVALID_MESSAGEDEST: WIN32_ERROR = 1218u32;
pub const ERROR_INVALID_MESSAGENAME: WIN32_ERROR = 1217u32;
pub const ERROR_INVALID_MINALLOCSIZE: WIN32_ERROR = 195u32;
pub const ERROR_INVALID_MODULETYPE: WIN32_ERROR = 190u32;
pub const ERROR_INVALID_MONITOR_HANDLE: WIN32_ERROR = 1461u32;
pub const ERROR_INVALID_MSGBOX_STYLE: WIN32_ERROR = 1438u32;
pub const ERROR_INVALID_NAME: WIN32_ERROR = 123u32;
pub const ERROR_INVALID_NETNAME: WIN32_ERROR = 1214u32;
pub const ERROR_INVALID_OPLOCK_PROTOCOL: WIN32_ERROR = 301u32;
pub const ERROR_INVALID_ORDINAL: WIN32_ERROR = 182u32;
pub const ERROR_INVALID_OWNER: WIN32_ERROR = 1307u32;
pub const ERROR_INVALID_PACKAGE_SID_LENGTH: WIN32_ERROR = 4253u32;
pub const ERROR_INVALID_PARAMETER: WIN32_ERROR = 87u32;
pub const ERROR_INVALID_PASSWORD: WIN32_ERROR = 86u32;
pub const ERROR_INVALID_PASSWORDNAME: WIN32_ERROR = 1216u32;
pub const ERROR_INVALID_PATCH_XML: WIN32_ERROR = 1650u32;
pub const ERROR_INVALID_PEP_INFO_VERSION: WIN32_ERROR = 341u32;
pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH: WIN32_ERROR = 620u32;
pub const ERROR_INVALID_PORT_ATTRIBUTES: WIN32_ERROR = 545u32;
pub const ERROR_INVALID_PRIMARY_GROUP: WIN32_ERROR = 1308u32;
pub const ERROR_INVALID_PRINTER_COMMAND: WIN32_ERROR = 1803u32;
pub const ERROR_INVALID_PRINTER_NAME: WIN32_ERROR = 1801u32;
pub const ERROR_INVALID_PRINTER_STATE: WIN32_ERROR = 1906u32;
pub const ERROR_INVALID_PRIORITY: WIN32_ERROR = 1800u32;
pub const ERROR_INVALID_QUOTA_LOWER: WIN32_ERROR = 547u32;
pub const ERROR_INVALID_REPARSE_DATA: WIN32_ERROR = 4392u32;
pub const ERROR_INVALID_SCROLLBAR_RANGE: WIN32_ERROR = 1448u32;
pub const ERROR_INVALID_SECURITY_DESCR: WIN32_ERROR = 1338u32;
pub const ERROR_INVALID_SEGDPL: WIN32_ERROR = 198u32;
pub const ERROR_INVALID_SEGMENT_NUMBER: WIN32_ERROR = 180u32;
pub const ERROR_INVALID_SEPARATOR_FILE: WIN32_ERROR = 1799u32;
pub const ERROR_INVALID_SERVER_STATE: WIN32_ERROR = 1352u32;
pub const ERROR_INVALID_SERVICENAME: WIN32_ERROR = 1213u32;
pub const ERROR_INVALID_SERVICE_ACCOUNT: WIN32_ERROR = 1057u32;
pub const ERROR_INVALID_SERVICE_CONTROL: WIN32_ERROR = 1052u32;
pub const ERROR_INVALID_SERVICE_LOCK: WIN32_ERROR = 1071u32;
pub const ERROR_INVALID_SHARENAME: WIN32_ERROR = 1215u32;
pub const ERROR_INVALID_SHOWWIN_COMMAND: WIN32_ERROR = 1449u32;
pub const ERROR_INVALID_SID: WIN32_ERROR = 1337u32;
pub const ERROR_INVALID_SIGNAL_NUMBER: WIN32_ERROR = 209u32;
pub const ERROR_INVALID_SPI_VALUE: WIN32_ERROR = 1439u32;
pub const ERROR_INVALID_STACKSEG: WIN32_ERROR = 189u32;
pub const ERROR_INVALID_STARTING_CODESEG: WIN32_ERROR = 188u32;
pub const ERROR_INVALID_SUB_AUTHORITY: WIN32_ERROR = 1335u32;
pub const ERROR_INVALID_TABLE: WIN32_ERROR = 1628u32;
pub const ERROR_INVALID_TARGET_HANDLE: WIN32_ERROR = 114u32;
pub const ERROR_INVALID_TASK_INDEX: WIN32_ERROR = 1551u32;
pub const ERROR_INVALID_TASK_NAME: WIN32_ERROR = 1550u32;
pub const ERROR_INVALID_THREAD_ID: WIN32_ERROR = 1444u32;
pub const ERROR_INVALID_TIME: WIN32_ERROR = 1901u32;
pub const ERROR_INVALID_TOKEN: WIN32_ERROR = 315u32;
pub const ERROR_INVALID_UNWIND_TARGET: WIN32_ERROR = 544u32;
pub const ERROR_INVALID_USER_BUFFER: WIN32_ERROR = 1784u32;
pub const ERROR_INVALID_USER_PRINCIPAL_NAME: WIN32_ERROR = 8636u32;
pub const ERROR_INVALID_VARIANT: WIN32_ERROR = 604u32;
pub const ERROR_INVALID_VERIFY_SWITCH: WIN32_ERROR = 118u32;
pub const ERROR_INVALID_WINDOW_HANDLE: WIN32_ERROR = 1400u32;
pub const ERROR_INVALID_WORKSTATION: WIN32_ERROR = 1329u32;
pub const ERROR_IOPL_NOT_ENABLED: WIN32_ERROR = 197u32;
pub const ERROR_IO_DEVICE: WIN32_ERROR = 1117u32;
pub const ERROR_IO_INCOMPLETE: WIN32_ERROR = 996u32;
pub const ERROR_IO_PENDING: WIN32_ERROR = 997u32;
pub const ERROR_IO_PRIVILEGE_FAILED: WIN32_ERROR = 571u32;
pub const ERROR_IO_REISSUE_AS_CACHED: WIN32_ERROR = 3950u32;
pub const ERROR_IPSEC_IKE_TIMED_OUT: WIN32_ERROR = 13805u32;
pub const ERROR_IP_ADDRESS_CONFLICT1: WIN32_ERROR = 611u32;
pub const ERROR_IP_ADDRESS_CONFLICT2: WIN32_ERROR = 612u32;
pub const ERROR_IRQ_BUSY: WIN32_ERROR = 1119u32;
pub const ERROR_IS_JOINED: WIN32_ERROR = 134u32;
pub const ERROR_IS_JOIN_PATH: WIN32_ERROR = 147u32;
pub const ERROR_IS_JOIN_TARGET: WIN32_ERROR = 133u32;
pub const ERROR_IS_SUBSTED: WIN32_ERROR = 135u32;
pub const ERROR_IS_SUBST_PATH: WIN32_ERROR = 146u32;
pub const ERROR_IS_SUBST_TARGET: WIN32_ERROR = 149u32;
pub const ERROR_ITERATED_DATA_EXCEEDS_64k: WIN32_ERROR = 194u32;
pub const ERROR_JOB_NO_CONTAINER: WIN32_ERROR = 1505u32;
pub const ERROR_JOIN_TO_JOIN: WIN32_ERROR = 138u32;
pub const ERROR_JOIN_TO_SUBST: WIN32_ERROR = 140u32;
pub const ERROR_JOURNAL_DELETE_IN_PROGRESS: WIN32_ERROR = 1178u32;
pub const ERROR_JOURNAL_ENTRY_DELETED: WIN32_ERROR = 1181u32;
pub const ERROR_JOURNAL_HOOK_SET: WIN32_ERROR = 1430u32;
pub const ERROR_JOURNAL_NOT_ACTIVE: WIN32_ERROR = 1179u32;
pub const ERROR_KERNEL_APC: WIN32_ERROR = 738u32;
pub const ERROR_KEY_DELETED: WIN32_ERROR = 1018u32;
pub const ERROR_KEY_HAS_CHILDREN: WIN32_ERROR = 1020u32;
pub const ERROR_KM_DRIVER_BLOCKED: WIN32_ERROR = 1930u32;
pub const ERROR_LABEL_TOO_LONG: WIN32_ERROR = 154u32;
pub const ERROR_LAST_ADMIN: WIN32_ERROR = 1322u32;
pub const ERROR_LB_WITHOUT_TABSTOPS: WIN32_ERROR = 1434u32;
pub const ERROR_LICENSE_QUOTA_EXCEEDED: WIN32_ERROR = 1395u32;
pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT: WIN32_ERROR = 414u32;
pub const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED: WIN32_ERROR = 444u32;
pub const ERROR_LISTBOX_ID_NOT_FOUND: WIN32_ERROR = 1416u32;
pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED: WIN32_ERROR = 1390u32;
pub const ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED: WIN32_ERROR = 8653u32;
pub const ERROR_LOCAL_USER_SESSION_KEY: WIN32_ERROR = 1303u32;
pub const ERROR_LOCKED: WIN32_ERROR = 212u32;
pub const ERROR_LOCK_FAILED: WIN32_ERROR = 167u32;
pub const ERROR_LOCK_VIOLATION: WIN32_ERROR = 33u32;
pub const ERROR_LOGIN_TIME_RESTRICTION: WIN32_ERROR = 1239u32;
pub const ERROR_LOGIN_WKSTA_RESTRICTION: WIN32_ERROR = 1240u32;
pub const ERROR_LOGON_FAILURE: WIN32_ERROR = 1326u32;
pub const ERROR_LOGON_NOT_GRANTED: WIN32_ERROR = 1380u32;
pub const ERROR_LOGON_SERVER_CONFLICT: WIN32_ERROR = 568u32;
pub const ERROR_LOGON_SESSION_COLLISION: WIN32_ERROR = 1366u32;
pub const ERROR_LOGON_SESSION_EXISTS: WIN32_ERROR = 1363u32;
pub const ERROR_LOGON_TYPE_NOT_GRANTED: WIN32_ERROR = 1385u32;
pub const ERROR_LOG_FILE_FULL: WIN32_ERROR = 1502u32;
pub const ERROR_LOG_HARD_ERROR: WIN32_ERROR = 718u32;
pub const ERROR_LONGJUMP: WIN32_ERROR = 682u32;
pub const ERROR_LOST_MODE_LOGON_RESTRICTION: WIN32_ERROR = 1939u32;
pub const ERROR_LOST_WRITEBEHIND_DATA: WIN32_ERROR = 596u32;
pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR: WIN32_ERROR = 790u32;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED: WIN32_ERROR = 788u32;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR: WIN32_ERROR = 789u32;
pub const ERROR_LUIDS_EXHAUSTED: WIN32_ERROR = 1334u32;
pub const ERROR_MACHINE_LOCKED: WIN32_ERROR = 1271u32;
pub const ERROR_MAGAZINE_NOT_PRESENT: WIN32_ERROR = 1163u32;
pub const ERROR_MAPPED_ALIGNMENT: WIN32_ERROR = 1132u32;
pub const ERROR_MARKED_TO_DISALLOW_WRITES: WIN32_ERROR = 348u32;
pub const ERROR_MARSHALL_OVERFLOW: WIN32_ERROR = 603u32;
pub const ERROR_MAX_SESSIONS_REACHED: WIN32_ERROR = 353u32;
pub const ERROR_MAX_THRDS_REACHED: WIN32_ERROR = 164u32;
pub const ERROR_MCA_EXCEPTION: WIN32_ERROR = 784u32;
pub const ERROR_MCA_OCCURED: WIN32_ERROR = 651u32;
pub const ERROR_MEDIA_CHANGED: WIN32_ERROR = 1110u32;
pub const ERROR_MEDIA_CHECK: WIN32_ERROR = 679u32;
pub const ERROR_MEMBERS_PRIMARY_GROUP: WIN32_ERROR = 1374u32;
pub const ERROR_MEMBER_IN_ALIAS: WIN32_ERROR = 1378u32;
pub const ERROR_MEMBER_IN_GROUP: WIN32_ERROR = 1320u32;
pub const ERROR_MEMBER_NOT_IN_ALIAS: WIN32_ERROR = 1377u32;
pub const ERROR_MEMBER_NOT_IN_GROUP: WIN32_ERROR = 1321u32;
pub const ERROR_MEMORY_HARDWARE: WIN32_ERROR = 779u32;
pub const ERROR_MENU_ITEM_NOT_FOUND: WIN32_ERROR = 1456u32;
pub const ERROR_MESSAGE_SYNC_ONLY: WIN32_ERROR = 1159u32;
pub const ERROR_META_EXPANSION_TOO_LONG: WIN32_ERROR = 208u32;
pub const ERROR_MISSING_SYSTEMFILE: WIN32_ERROR = 573u32;
pub const ERROR_MOD_NOT_FOUND: WIN32_ERROR = 126u32;
pub const ERROR_MORE_DATA: WIN32_ERROR = 234u32;
pub const ERROR_MORE_WRITES: WIN32_ERROR = 1120u32;
pub const ERROR_MOUNT_POINT_NOT_RESOLVED: WIN32_ERROR = 649u32;
pub const ERROR_MP_PROCESSOR_MISMATCH: WIN32_ERROR = 725u32;
pub const ERROR_MR_MID_NOT_FOUND: WIN32_ERROR = 317u32;
pub const ERROR_MULTIPLE_FAULT_VIOLATION: WIN32_ERROR = 640u32;
pub const ERROR_MUTANT_LIMIT_EXCEEDED: WIN32_ERROR = 587u32;
pub const ERROR_MUTUAL_AUTH_FAILED: WIN32_ERROR = 1397u32;
pub const ERROR_NEGATIVE_SEEK: WIN32_ERROR = 131u32;
pub const ERROR_NESTING_NOT_ALLOWED: WIN32_ERROR = 215u32;
pub const ERROR_NETLOGON_NOT_STARTED: WIN32_ERROR = 1792u32;
pub const ERROR_NETNAME_DELETED: WIN32_ERROR = 64u32;
pub const ERROR_NETWORK_ACCESS_DENIED: WIN32_ERROR = 65u32;
pub const ERROR_NETWORK_ACCESS_DENIED_EDP: WIN32_ERROR = 354u32;
pub const ERROR_NETWORK_BUSY: WIN32_ERROR = 54u32;
pub const ERROR_NETWORK_UNREACHABLE: WIN32_ERROR = 1231u32;
pub const ERROR_NET_OPEN_FAILED: WIN32_ERROR = 570u32;
pub const ERROR_NET_WRITE_FAULT: WIN32_ERROR = 88u32;
pub const ERROR_NOACCESS: WIN32_ERROR = 998u32;
pub const ERROR_NOINTERFACE: WIN32_ERROR = 632u32;
pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT: WIN32_ERROR = 1807u32;
pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT: WIN32_ERROR = 1809u32;
pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT: WIN32_ERROR = 1808u32;
pub const ERROR_NONE_MAPPED: WIN32_ERROR = 1332u32;
pub const ERROR_NONPAGED_SYSTEM_RESOURCES: WIN32_ERROR = 1451u32;
pub const ERROR_NON_ACCOUNT_SID: WIN32_ERROR = 1257u32;
pub const ERROR_NON_DOMAIN_SID: WIN32_ERROR = 1258u32;
pub const ERROR_NON_MDICHILD_WINDOW: WIN32_ERROR = 1445u32;
pub const ERROR_NOTHING_TO_TERMINATE: WIN32_ERROR = 758u32;
pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED: WIN32_ERROR = 309u32;
pub const ERROR_NOTIFY_CLEANUP: WIN32_ERROR = 745u32;
pub const ERROR_NOTIFY_ENUM_DIR: WIN32_ERROR = 1022u32;
pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE: WIN32_ERROR = 313u32;
pub const ERROR_NOT_ALL_ASSIGNED: WIN32_ERROR = 1300u32;
pub const ERROR_NOT_APPCONTAINER: WIN32_ERROR = 4250u32;
pub const ERROR_NOT_AUTHENTICATED: WIN32_ERROR = 1244u32;
pub const ERROR_NOT_A_CLOUD_FILE: WIN32_ERROR = 376u32;
pub const ERROR_NOT_A_CLOUD_SYNC_ROOT: WIN32_ERROR = 405u32;
pub const ERROR_NOT_A_DAX_VOLUME: WIN32_ERROR = 420u32;
pub const ERROR_NOT_A_REPARSE_POINT: WIN32_ERROR = 4390u32;
pub const ERROR_NOT_CAPABLE: WIN32_ERROR = 775u32;
pub const ERROR_NOT_CHILD_WINDOW: WIN32_ERROR = 1442u32;
pub const ERROR_NOT_CONNECTED: WIN32_ERROR = 2250u32;
pub const ERROR_NOT_CONTAINER: WIN32_ERROR = 1207u32;
pub const ERROR_NOT_DAX_MAPPABLE: WIN32_ERROR = 421u32;
pub const ERROR_NOT_DOS_DISK: WIN32_ERROR = 26u32;
pub const ERROR_NOT_ENOUGH_MEMORY: WIN32_ERROR = 8u32;
pub const ERROR_NOT_ENOUGH_QUOTA: WIN32_ERROR = 1816u32;
pub const ERROR_NOT_ENOUGH_SERVER_MEMORY: WIN32_ERROR = 1130u32;
pub const ERROR_NOT_EXPORT_FORMAT: WIN32_ERROR = 6008u32;
pub const ERROR_NOT_FOUND: WIN32_ERROR = 1168u32;
pub const ERROR_NOT_GUI_PROCESS: WIN32_ERROR = 1471u32;
pub const ERROR_NOT_JOINED: WIN32_ERROR = 136u32;
pub const ERROR_NOT_LOCKED: WIN32_ERROR = 158u32;
pub const ERROR_NOT_LOGGED_ON: WIN32_ERROR = 1245u32;
pub const ERROR_NOT_LOGON_PROCESS: WIN32_ERROR = 1362u32;
pub const ERROR_NOT_OWNER: WIN32_ERROR = 288u32;
pub const ERROR_NOT_READY: WIN32_ERROR = 21u32;
pub const ERROR_NOT_READ_FROM_COPY: WIN32_ERROR = 337u32;
pub const ERROR_NOT_REDUNDANT_STORAGE: WIN32_ERROR = 333u32;
pub const ERROR_NOT_REGISTRY_FILE: WIN32_ERROR = 1017u32;
pub const ERROR_NOT_SAFEBOOT_SERVICE: WIN32_ERROR = 1084u32;
pub const ERROR_NOT_SAFE_MODE_DRIVER: WIN32_ERROR = 646u32;
pub const ERROR_NOT_SAME_DEVICE: WIN32_ERROR = 17u32;
pub const ERROR_NOT_SAME_OBJECT: WIN32_ERROR = 1656u32;
pub const ERROR_NOT_SUBSTED: WIN32_ERROR = 137u32;
pub const ERROR_NOT_SUPPORTED: WIN32_ERROR = 50u32;
pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER: WIN32_ERROR = 4252u32;
pub const ERROR_NOT_SUPPORTED_ON_DAX: WIN32_ERROR = 360u32;
pub const ERROR_NOT_SUPPORTED_ON_SBS: WIN32_ERROR = 1254u32;
pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER: WIN32_ERROR = 8584u32;
pub const ERROR_NOT_SUPPORTED_WITH_AUDITING: WIN32_ERROR = 499u32;
pub const ERROR_NOT_SUPPORTED_WITH_BTT: WIN32_ERROR = 429u32;
pub const ERROR_NOT_SUPPORTED_WITH_BYPASSIO: WIN32_ERROR = 493u32;
pub const ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE: WIN32_ERROR = 509u32;
pub const ERROR_NOT_SUPPORTED_WITH_COMPRESSION: WIN32_ERROR = 496u32;
pub const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION: WIN32_ERROR = 498u32;
pub const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION: WIN32_ERROR = 495u32;
pub const ERROR_NOT_SUPPORTED_WITH_MONITORING: WIN32_ERROR = 503u32;
pub const ERROR_NOT_SUPPORTED_WITH_REPLICATION: WIN32_ERROR = 497u32;
pub const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT: WIN32_ERROR = 504u32;
pub const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION: WIN32_ERROR = 505u32;
pub const ERROR_NOT_TINY_STREAM: WIN32_ERROR = 598u32;
pub const ERROR_NO_ACE_CONDITION: WIN32_ERROR = 804u32;
pub const ERROR_NO_ASSOCIATION: WIN32_ERROR = 1155u32;
pub const ERROR_NO_BYPASSIO_DRIVER_SUPPORT: WIN32_ERROR = 494u32;
pub const ERROR_NO_CALLBACK_ACTIVE: WIN32_ERROR = 614u32;
pub const ERROR_NO_DATA: WIN32_ERROR = 232u32;
pub const ERROR_NO_DATA_DETECTED: WIN32_ERROR = 1104u32;
pub const ERROR_NO_EFS: WIN32_ERROR = 6004u32;
pub const ERROR_NO_EVENT_PAIR: WIN32_ERROR = 580u32;
pub const ERROR_NO_GUID_TRANSLATION: WIN32_ERROR = 560u32;
pub const ERROR_NO_IMPERSONATION_TOKEN: WIN32_ERROR = 1309u32;
pub const ERROR_NO_INHERITANCE: WIN32_ERROR = 1391u32;
pub const ERROR_NO_LOGON_SERVERS: WIN32_ERROR = 1311u32;
pub const ERROR_NO_LOG_SPACE: WIN32_ERROR = 1019u32;
pub const ERROR_NO_MATCH: WIN32_ERROR = 1169u32;
pub const ERROR_NO_MEDIA_IN_DRIVE: WIN32_ERROR = 1112u32;
pub const ERROR_NO_MORE_DEVICES: WIN32_ERROR = 1248u32;
pub const ERROR_NO_MORE_FILES: WIN32_ERROR = 18u32;
pub const ERROR_NO_MORE_ITEMS: WIN32_ERROR = 259u32;
pub const ERROR_NO_MORE_MATCHES: WIN32_ERROR = 626u32;
pub const ERROR_NO_MORE_SEARCH_HANDLES: WIN32_ERROR = 113u32;
pub const ERROR_NO_MORE_USER_HANDLES: WIN32_ERROR = 1158u32;
pub const ERROR_NO_NETWORK: WIN32_ERROR = 1222u32;
pub const ERROR_NO_NET_OR_BAD_PATH: WIN32_ERROR = 1203u32;
pub const ERROR_NO_NVRAM_RESOURCES: WIN32_ERROR = 1470u32;
pub const ERROR_NO_PAGEFILE: WIN32_ERROR = 578u32;
pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND: WIN32_ERROR = 408u32;
pub const ERROR_NO_PROC_SLOTS: WIN32_ERROR = 89u32;
pub const ERROR_NO_PROMOTION_ACTIVE: WIN32_ERROR = 8222u32;
pub const ERROR_NO_QUOTAS_FOR_ACCOUNT: WIN32_ERROR = 1302u32;
pub const ERROR_NO_RANGES_PROCESSED: WIN32_ERROR = 312u32;
pub const ERROR_NO_RECOVERY_POLICY: WIN32_ERROR = 6003u32;
pub const ERROR_NO_RECOVERY_PROGRAM: WIN32_ERROR = 1082u32;
pub const ERROR_NO_SCROLLBARS: WIN32_ERROR = 1447u32;
pub const ERROR_NO_SECRETS: WIN32_ERROR = 8620u32;
pub const ERROR_NO_SECURITY_ON_OBJECT: WIN32_ERROR = 1350u32;
pub const ERROR_NO_SHUTDOWN_IN_PROGRESS: WIN32_ERROR = 1116u32;
pub const ERROR_NO_SIGNAL_SENT: WIN32_ERROR = 205u32;
pub const ERROR_NO_SITENAME: WIN32_ERROR = 1919u32;
pub const ERROR_NO_SITE_SETTINGS_OBJECT: WIN32_ERROR = 8619u32;
pub const ERROR_NO_SPOOL_SPACE: WIN32_ERROR = 62u32;
pub const ERROR_NO_SUCH_ALIAS: WIN32_ERROR = 1376u32;
pub const ERROR_NO_SUCH_DEVICE: WIN32_ERROR = 433u32;
pub const ERROR_NO_SUCH_DOMAIN: WIN32_ERROR = 1355u32;
pub const ERROR_NO_SUCH_GROUP: WIN32_ERROR = 1319u32;
pub const ERROR_NO_SUCH_LOGON_SESSION: WIN32_ERROR = 1312u32;
pub const ERROR_NO_SUCH_MEMBER: WIN32_ERROR = 1387u32;
pub const ERROR_NO_SUCH_PACKAGE: WIN32_ERROR = 1364u32;
pub const ERROR_NO_SUCH_PRIVILEGE: WIN32_ERROR = 1313u32;
pub const ERROR_NO_SUCH_SITE: WIN32_ERROR = 1249u32;
pub const ERROR_NO_SUCH_USER: WIN32_ERROR = 1317u32;
pub const ERROR_NO_SYSTEM_MENU: WIN32_ERROR = 1437u32;
pub const ERROR_NO_SYSTEM_RESOURCES: WIN32_ERROR = 1450u32;
pub const ERROR_NO_TASK_QUEUE: WIN32_ERROR = 427u32;
pub const ERROR_NO_TOKEN: WIN32_ERROR = 1008u32;
pub const ERROR_NO_TRACKING_SERVICE: WIN32_ERROR = 1172u32;
pub const ERROR_NO_TRUST_LSA_SECRET: WIN32_ERROR = 1786u32;
pub const ERROR_NO_TRUST_SAM_ACCOUNT: WIN32_ERROR = 1787u32;
pub const ERROR_NO_UNICODE_TRANSLATION: WIN32_ERROR = 1113u32;
pub const ERROR_NO_USER_KEYS: WIN32_ERROR = 6006u32;
pub const ERROR_NO_USER_SESSION_KEY: WIN32_ERROR = 1394u32;
pub const ERROR_NO_VOLUME_ID: WIN32_ERROR = 1173u32;
pub const ERROR_NO_VOLUME_LABEL: WIN32_ERROR = 125u32;
pub const ERROR_NO_WILDCARD_CHARACTERS: WIN32_ERROR = 1417u32;
pub const ERROR_NO_WORK_DONE: WIN32_ERROR = 235u32;
pub const ERROR_NO_WRITABLE_DC_FOUND: WIN32_ERROR = 8621u32;
pub const ERROR_NO_YIELD_PERFORMED: WIN32_ERROR = 721u32;
pub const ERROR_NTLM_BLOCKED: WIN32_ERROR = 1937u32;
pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED: WIN32_ERROR = 1386u32;
pub const ERROR_NULL_LM_PASSWORD: WIN32_ERROR = 1304u32;
pub const ERROR_OBJECT_IS_IMMUTABLE: WIN32_ERROR = 4449u32;
pub const ERROR_OBJECT_NAME_EXISTS: WIN32_ERROR = 698u32;
pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED: WIN32_ERROR = 342u32;
pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED: WIN32_ERROR = 4442u32;
pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED: WIN32_ERROR = 4440u32;
pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED: WIN32_ERROR = 4443u32;
pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED: WIN32_ERROR = 4441u32;
pub const ERROR_OFFSET_ALIGNMENT_VIOLATION: WIN32_ERROR = 327u32;
pub const ERROR_OLD_WIN_VERSION: WIN32_ERROR = 1150u32;
pub const ERROR_ONLY_IF_CONNECTED: WIN32_ERROR = 1251u32;
pub const ERROR_OPEN_FAILED: WIN32_ERROR = 110u32;
pub const ERROR_OPEN_FILES: WIN32_ERROR = 2401u32;
pub const ERROR_OPERATION_ABORTED: WIN32_ERROR = 995u32;
pub const ERROR_OPERATION_IN_PROGRESS: WIN32_ERROR = 329u32;
pub const ERROR_OPLOCK_BREAK_IN_PROGRESS: WIN32_ERROR = 742u32;
pub const ERROR_OPLOCK_HANDLE_CLOSED: WIN32_ERROR = 803u32;
pub const ERROR_OPLOCK_NOT_GRANTED: WIN32_ERROR = 300u32;
pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE: WIN32_ERROR = 800u32;
pub const ERROR_ORPHAN_NAME_EXHAUSTED: WIN32_ERROR = 799u32;
pub const ERROR_OUTOFMEMORY: WIN32_ERROR = 14u32;
pub const ERROR_OUT_OF_PAPER: WIN32_ERROR = 28u32;
pub const ERROR_OUT_OF_STRUCTURES: WIN32_ERROR = 84u32;
pub const ERROR_OVERRIDE_NOCHANGES: WIN32_ERROR = 1252u32;
pub const ERROR_PAGED_SYSTEM_RESOURCES: WIN32_ERROR = 1452u32;
pub const ERROR_PAGEFILE_CREATE_FAILED: WIN32_ERROR = 576u32;
pub const ERROR_PAGEFILE_NOT_SUPPORTED: WIN32_ERROR = 491u32;
pub const ERROR_PAGEFILE_QUOTA: WIN32_ERROR = 1454u32;
pub const ERROR_PAGEFILE_QUOTA_EXCEEDED: WIN32_ERROR = 567u32;
pub const ERROR_PAGE_FAULT_COPY_ON_WRITE: WIN32_ERROR = 749u32;
pub const ERROR_PAGE_FAULT_DEMAND_ZERO: WIN32_ERROR = 748u32;
pub const ERROR_PAGE_FAULT_GUARD_PAGE: WIN32_ERROR = 750u32;
pub const ERROR_PAGE_FAULT_PAGING_FILE: WIN32_ERROR = 751u32;
pub const ERROR_PAGE_FAULT_TRANSITION: WIN32_ERROR = 747u32;
pub const ERROR_PARAMETER_QUOTA_EXCEEDED: WIN32_ERROR = 1283u32;
pub const ERROR_PARTIAL_COPY: WIN32_ERROR = 299u32;
pub const ERROR_PARTITION_FAILURE: WIN32_ERROR = 1105u32;
pub const ERROR_PARTITION_TERMINATING: WIN32_ERROR = 1184u32;
pub const ERROR_PASSWORD_CHANGE_REQUIRED: WIN32_ERROR = 1938u32;
pub const ERROR_PASSWORD_EXPIRED: WIN32_ERROR = 1330u32;
pub const ERROR_PASSWORD_MUST_CHANGE: WIN32_ERROR = 1907u32;
pub const ERROR_PASSWORD_RESTRICTION: WIN32_ERROR = 1325u32;
pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT: WIN32_ERROR = 1651u32;
pub const ERROR_PATCH_NO_SEQUENCE: WIN32_ERROR = 1648u32;
pub const ERROR_PATCH_PACKAGE_INVALID: WIN32_ERROR = 1636u32;
pub const ERROR_PATCH_PACKAGE_OPEN_FAILED: WIN32_ERROR = 1635u32;
pub const ERROR_PATCH_PACKAGE_REJECTED: WIN32_ERROR = 1643u32;
pub const ERROR_PATCH_PACKAGE_UNSUPPORTED: WIN32_ERROR = 1637u32;
pub const ERROR_PATCH_REMOVAL_DISALLOWED: WIN32_ERROR = 1649u32;
pub const ERROR_PATCH_REMOVAL_UNSUPPORTED: WIN32_ERROR = 1646u32;
pub const ERROR_PATCH_TARGET_NOT_FOUND: WIN32_ERROR = 1642u32;
pub const ERROR_PATH_BUSY: WIN32_ERROR = 148u32;
pub const ERROR_PATH_NOT_FOUND: WIN32_ERROR = 3u32;
pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED: WIN32_ERROR = 1932u32;
pub const ERROR_PIPE_BUSY: WIN32_ERROR = 231u32;
pub const ERROR_PIPE_CONNECTED: WIN32_ERROR = 535u32;
pub const ERROR_PIPE_LISTENING: WIN32_ERROR = 536u32;
pub const ERROR_PIPE_LOCAL: WIN32_ERROR = 229u32;
pub const ERROR_PIPE_NOT_CONNECTED: WIN32_ERROR = 233u32;
pub const ERROR_PKINIT_FAILURE: WIN32_ERROR = 1263u32;
pub const ERROR_PLUGPLAY_QUERY_VETOED: WIN32_ERROR = 683u32;
pub const ERROR_PNP_BAD_MPS_TABLE: WIN32_ERROR = 671u32;
pub const ERROR_PNP_INVALID_ID: WIN32_ERROR = 674u32;
pub const ERROR_PNP_IRQ_TRANSLATION_FAILED: WIN32_ERROR = 673u32;
pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT: WIN32_ERROR = 480u32;
pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT: WIN32_ERROR = 481u32;
pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT: WIN32_ERROR = 482u32;
pub const ERROR_PNP_REBOOT_REQUIRED: WIN32_ERROR = 638u32;
pub const ERROR_PNP_RESTART_ENUMERATION: WIN32_ERROR = 636u32;
pub const ERROR_PNP_TRANSLATION_FAILED: WIN32_ERROR = 672u32;
pub const ERROR_POINT_NOT_FOUND: WIN32_ERROR = 1171u32;
pub const ERROR_POLICY_OBJECT_NOT_FOUND: WIN32_ERROR = 8219u32;
pub const ERROR_POLICY_ONLY_IN_DS: WIN32_ERROR = 8220u32;
pub const ERROR_POPUP_ALREADY_ACTIVE: WIN32_ERROR = 1446u32;
pub const ERROR_PORT_MESSAGE_TOO_LONG: WIN32_ERROR = 546u32;
pub const ERROR_PORT_NOT_SET: WIN32_ERROR = 642u32;
pub const ERROR_PORT_UNREACHABLE: WIN32_ERROR = 1234u32;
pub const ERROR_POSSIBLE_DEADLOCK: WIN32_ERROR = 1131u32;
pub const ERROR_POTENTIAL_FILE_FOUND: WIN32_ERROR = 1180u32;
pub const ERROR_PREDEFINED_HANDLE: WIN32_ERROR = 714u32;
pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED: WIN32_ERROR = 746u32;
pub const ERROR_PRINTER_ALREADY_EXISTS: WIN32_ERROR = 1802u32;
pub const ERROR_PRINTER_DELETED: WIN32_ERROR = 1905u32;
pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED: WIN32_ERROR = 1795u32;
pub const ERROR_PRINTQ_FULL: WIN32_ERROR = 61u32;
pub const ERROR_PRINT_CANCELLED: WIN32_ERROR = 63u32;
pub const ERROR_PRIVATE_DIALOG_INDEX: WIN32_ERROR = 1415u32;
pub const ERROR_PRIVILEGE_NOT_HELD: WIN32_ERROR = 1314u32;
pub const ERROR_PROCESS_ABORTED: WIN32_ERROR = 1067u32;
pub const ERROR_PROCESS_IN_JOB: WIN32_ERROR = 760u32;
pub const ERROR_PROCESS_IS_PROTECTED: WIN32_ERROR = 1293u32;
pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND: WIN32_ERROR = 402u32;
pub const ERROR_PROCESS_MODE_NOT_BACKGROUND: WIN32_ERROR = 403u32;
pub const ERROR_PROCESS_NOT_IN_JOB: WIN32_ERROR = 759u32;
pub const ERROR_PROC_NOT_FOUND: WIN32_ERROR = 127u32;
pub const ERROR_PRODUCT_UNINSTALLED: WIN32_ERROR = 1614u32;
pub const ERROR_PRODUCT_VERSION: WIN32_ERROR = 1638u32;
pub const ERROR_PROFILING_AT_LIMIT: WIN32_ERROR = 553u32;
pub const ERROR_PROFILING_NOT_STARTED: WIN32_ERROR = 550u32;
pub const ERROR_PROFILING_NOT_STOPPED: WIN32_ERROR = 551u32;
pub const ERROR_PROMOTION_ACTIVE: WIN32_ERROR = 8221u32;
pub const ERROR_PROTOCOL_UNREACHABLE: WIN32_ERROR = 1233u32;
pub const ERROR_PWD_HISTORY_CONFLICT: WIN32_ERROR = 617u32;
pub const ERROR_PWD_TOO_LONG: WIN32_ERROR = 657u32;
pub const ERROR_PWD_TOO_RECENT: WIN32_ERROR = 616u32;
pub const ERROR_PWD_TOO_SHORT: WIN32_ERROR = 615u32;
pub const ERROR_QUOTA_ACTIVITY: WIN32_ERROR = 810u32;
pub const ERROR_QUOTA_LIST_INCONSISTENT: WIN32_ERROR = 621u32;
pub const ERROR_RANGE_LIST_CONFLICT: WIN32_ERROR = 627u32;
pub const ERROR_RANGE_NOT_FOUND: WIN32_ERROR = 644u32;
pub const ERROR_READ_FAULT: WIN32_ERROR = 30u32;
pub const ERROR_RECEIVE_EXPEDITED: WIN32_ERROR = 708u32;
pub const ERROR_RECEIVE_PARTIAL: WIN32_ERROR = 707u32;
pub const ERROR_RECEIVE_PARTIAL_EXPEDITED: WIN32_ERROR = 709u32;
pub const ERROR_RECOVERY_FAILURE: WIN32_ERROR = 1279u32;
pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES: WIN32_ERROR = 1794u32;
pub const ERROR_REDIR_PAUSED: WIN32_ERROR = 72u32;
pub const ERROR_REGISTRY_CORRUPT: WIN32_ERROR = 1015u32;
pub const ERROR_REGISTRY_HIVE_RECOVERED: WIN32_ERROR = 685u32;
pub const ERROR_REGISTRY_IO_FAILED: WIN32_ERROR = 1016u32;
pub const ERROR_REGISTRY_QUOTA_LIMIT: WIN32_ERROR = 613u32;
pub const ERROR_REGISTRY_RECOVERED: WIN32_ERROR = 1014u32;
pub const ERROR_REG_NAT_CONSUMPTION: WIN32_ERROR = 1261u32;
pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM: WIN32_ERROR = 201u32;
pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED: WIN32_ERROR = 1936u32;
pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED: WIN32_ERROR = 1220u32;
pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR: WIN32_ERROR = 4352u32;
pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE: WIN32_ERROR = 4351u32;
pub const ERROR_REM_NOT_LIST: WIN32_ERROR = 51u32;
pub const ERROR_REPARSE: WIN32_ERROR = 741u32;
pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT: WIN32_ERROR = 4391u32;
pub const ERROR_REPARSE_OBJECT: WIN32_ERROR = 755u32;
pub const ERROR_REPARSE_POINT_ENCOUNTERED: WIN32_ERROR = 4395u32;
pub const ERROR_REPARSE_TAG_INVALID: WIN32_ERROR = 4393u32;
pub const ERROR_REPARSE_TAG_MISMATCH: WIN32_ERROR = 4394u32;
pub const ERROR_REPLY_MESSAGE_MISMATCH: WIN32_ERROR = 595u32;
pub const ERROR_REQUEST_ABORTED: WIN32_ERROR = 1235u32;
pub const ERROR_REQUEST_OUT_OF_SEQUENCE: WIN32_ERROR = 776u32;
pub const ERROR_REQUEST_PAUSED: WIN32_ERROR = 3050u32;
pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION: WIN32_ERROR = 1459u32;
pub const ERROR_REQ_NOT_ACCEP: WIN32_ERROR = 71u32;
pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED: WIN32_ERROR = 334u32;
pub const ERROR_RESOURCE_CALL_TIMED_OUT: WIN32_ERROR = 5910u32;
pub const ERROR_RESOURCE_DATA_NOT_FOUND: WIN32_ERROR = 1812u32;
pub const ERROR_RESOURCE_LANG_NOT_FOUND: WIN32_ERROR = 1815u32;
pub const ERROR_RESOURCE_NAME_NOT_FOUND: WIN32_ERROR = 1814u32;
pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED: WIN32_ERROR = 756u32;
pub const ERROR_RESOURCE_TYPE_NOT_FOUND: WIN32_ERROR = 1813u32;
pub const ERROR_RESTART_APPLICATION: WIN32_ERROR = 1467u32;
pub const ERROR_RESUME_HIBERNATION: WIN32_ERROR = 727u32;
pub const ERROR_RETRY: WIN32_ERROR = 1237u32;
pub const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT: WIN32_ERROR = 1662u32;
pub const ERROR_REVISION_MISMATCH: WIN32_ERROR = 1306u32;
pub const ERROR_RING2SEG_MUST_BE_MOVABLE: WIN32_ERROR = 200u32;
pub const ERROR_RING2_STACK_IN_USE: WIN32_ERROR = 207u32;
pub const ERROR_RMODE_APP: WIN32_ERROR = 1153u32;
pub const ERROR_ROWSNOTRELEASED: WIN32_ERROR = 772u32;
pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: WIN32_ERROR = 15403u32;
pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT: WIN32_ERROR = 15402u32;
pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED: WIN32_ERROR = 410u32;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET: WIN32_ERROR = 411u32;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE: WIN32_ERROR = 412u32;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER: WIN32_ERROR = 413u32;
pub const ERROR_RXACT_COMMITTED: WIN32_ERROR = 744u32;
pub const ERROR_RXACT_COMMIT_FAILURE: WIN32_ERROR = 1370u32;
pub const ERROR_RXACT_COMMIT_NECESSARY: WIN32_ERROR = 678u32;
pub const ERROR_RXACT_INVALID_STATE: WIN32_ERROR = 1369u32;
pub const ERROR_RXACT_STATE_CREATED: WIN32_ERROR = 701u32;
pub const ERROR_SAME_DRIVE: WIN32_ERROR = 143u32;
pub const ERROR_SAM_INIT_FAILURE: WIN32_ERROR = 8541u32;
pub const ERROR_SCOPE_NOT_FOUND: WIN32_ERROR = 318u32;
pub const ERROR_SCREEN_ALREADY_LOCKED: WIN32_ERROR = 1440u32;
pub const ERROR_SCRUB_DATA_DISABLED: WIN32_ERROR = 332u32;
pub const ERROR_SECRET_TOO_LONG: WIN32_ERROR = 1382u32;
pub const ERROR_SECTION_DIRECT_MAP_ONLY: WIN32_ERROR = 819u32;
pub const ERROR_SECTOR_NOT_FOUND: WIN32_ERROR = 27u32;
pub const ERROR_SECURITY_DENIES_OPERATION: WIN32_ERROR = 447u32;
pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT: WIN32_ERROR = 306u32;
pub const ERROR_SEEK: WIN32_ERROR = 25u32;
pub const ERROR_SEEK_ON_DEVICE: WIN32_ERROR = 132u32;
pub const ERROR_SEGMENT_NOTIFICATION: WIN32_ERROR = 702u32;
pub const ERROR_SEM_IS_SET: WIN32_ERROR = 102u32;
pub const ERROR_SEM_NOT_FOUND: WIN32_ERROR = 187u32;
pub const ERROR_SEM_OWNER_DIED: WIN32_ERROR = 105u32;
pub const ERROR_SEM_TIMEOUT: WIN32_ERROR = 121u32;
pub const ERROR_SEM_USER_LIMIT: WIN32_ERROR = 106u32;
pub const ERROR_SERIAL_NO_DEVICE: WIN32_ERROR = 1118u32;
pub const ERROR_SERVER_DISABLED: WIN32_ERROR = 1341u32;
pub const ERROR_SERVER_HAS_OPEN_HANDLES: WIN32_ERROR = 1811u32;
pub const ERROR_SERVER_NOT_DISABLED: WIN32_ERROR = 1342u32;
pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS: WIN32_ERROR = 1255u32;
pub const ERROR_SERVER_SID_MISMATCH: WIN32_ERROR = 628u32;
pub const ERROR_SERVER_TRANSPORT_CONFLICT: WIN32_ERROR = 816u32;
pub const ERROR_SERVICE_ALREADY_RUNNING: WIN32_ERROR = 1056u32;
pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL: WIN32_ERROR = 1061u32;
pub const ERROR_SERVICE_DATABASE_LOCKED: WIN32_ERROR = 1055u32;
pub const ERROR_SERVICE_DEPENDENCY_DELETED: WIN32_ERROR = 1075u32;
pub const ERROR_SERVICE_DEPENDENCY_FAIL: WIN32_ERROR = 1068u32;
pub const ERROR_SERVICE_DISABLED: WIN32_ERROR = 1058u32;
pub const ERROR_SERVICE_DOES_NOT_EXIST: WIN32_ERROR = 1060u32;
pub const ERROR_SERVICE_EXISTS: WIN32_ERROR = 1073u32;
pub const ERROR_SERVICE_LOGON_FAILED: WIN32_ERROR = 1069u32;
pub const ERROR_SERVICE_MARKED_FOR_DELETE: WIN32_ERROR = 1072u32;
pub const ERROR_SERVICE_NEVER_STARTED: WIN32_ERROR = 1077u32;
pub const ERROR_SERVICE_NOTIFICATION: WIN32_ERROR = 716u32;
pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING: WIN32_ERROR = 1294u32;
pub const ERROR_SERVICE_NOT_ACTIVE: WIN32_ERROR = 1062u32;
pub const ERROR_SERVICE_NOT_FOUND: WIN32_ERROR = 1243u32;
pub const ERROR_SERVICE_NOT_IN_EXE: WIN32_ERROR = 1083u32;
pub const ERROR_SERVICE_NO_THREAD: WIN32_ERROR = 1054u32;
pub const ERROR_SERVICE_REQUEST_TIMEOUT: WIN32_ERROR = 1053u32;
pub const ERROR_SERVICE_SPECIFIC_ERROR: WIN32_ERROR = 1066u32;
pub const ERROR_SERVICE_START_HANG: WIN32_ERROR = 1070u32;
pub const ERROR_SESSION_CREDENTIAL_CONFLICT: WIN32_ERROR = 1219u32;
pub const ERROR_SESSION_KEY_TOO_SHORT: WIN32_ERROR = 501u32;
pub const ERROR_SETCOUNT_ON_BAD_LB: WIN32_ERROR = 1433u32;
pub const ERROR_SETMARK_DETECTED: WIN32_ERROR = 1103u32;
pub const ERROR_SET_CONTEXT_DENIED: WIN32_ERROR = 1660u32;
pub const ERROR_SET_NOT_FOUND: WIN32_ERROR = 1170u32;
pub const ERROR_SET_POWER_STATE_FAILED: WIN32_ERROR = 1141u32;
pub const ERROR_SET_POWER_STATE_VETOED: WIN32_ERROR = 1140u32;
pub const ERROR_SHARED_POLICY: WIN32_ERROR = 8218u32;
pub const ERROR_SHARING_BUFFER_EXCEEDED: WIN32_ERROR = 36u32;
pub const ERROR_SHARING_PAUSED: WIN32_ERROR = 70u32;
pub const ERROR_SHARING_VIOLATION: WIN32_ERROR = 32u32;
pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME: WIN32_ERROR = 305u32;
pub const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE: WIN32_ERROR = 1192u32;
pub const ERROR_SHUTDOWN_IN_PROGRESS: WIN32_ERROR = 1115u32;
pub const ERROR_SHUTDOWN_IS_SCHEDULED: WIN32_ERROR = 1190u32;
pub const ERROR_SHUTDOWN_USERS_LOGGED_ON: WIN32_ERROR = 1191u32;
pub const ERROR_SIGNAL_PENDING: WIN32_ERROR = 162u32;
pub const ERROR_SIGNAL_REFUSED: WIN32_ERROR = 156u32;
pub const ERROR_SINGLE_INSTANCE_APP: WIN32_ERROR = 1152u32;
pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE: WIN32_ERROR = 1264u32;
pub const ERROR_SMB1_NOT_AVAILABLE: WIN32_ERROR = 384u32;
pub const ERROR_SMB_GUEST_LOGON_BLOCKED: WIN32_ERROR = 1272u32;
pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED: WIN32_ERROR = 4445u32;
pub const ERROR_SOME_NOT_MAPPED: WIN32_ERROR = 1301u32;
pub const ERROR_SOURCE_ELEMENT_EMPTY: WIN32_ERROR = 1160u32;
pub const ERROR_SPARSE_FILE_NOT_SUPPORTED: WIN32_ERROR = 490u32;
pub const ERROR_SPECIAL_ACCOUNT: WIN32_ERROR = 1371u32;
pub const ERROR_SPECIAL_GROUP: WIN32_ERROR = 1372u32;
pub const ERROR_SPECIAL_USER: WIN32_ERROR = 1373u32;
pub const ERROR_SRC_SRV_DLL_LOAD_FAILED: WIN32_ERROR = 428u32;
pub const ERROR_STACK_BUFFER_OVERRUN: WIN32_ERROR = 1282u32;
pub const ERROR_STACK_OVERFLOW: WIN32_ERROR = 1001u32;
pub const ERROR_STACK_OVERFLOW_READ: WIN32_ERROR = 599u32;
pub const ERROR_STOPPED_ON_SYMLINK: WIN32_ERROR = 681u32;
pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE: WIN32_ERROR = 368u32;
pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS: WIN32_ERROR = 418u32;
pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST: WIN32_ERROR = 417u32;
pub const ERROR_STORAGE_RESERVE_ID_INVALID: WIN32_ERROR = 416u32;
pub const ERROR_STORAGE_RESERVE_NOT_EMPTY: WIN32_ERROR = 419u32;
pub const ERROR_STORAGE_STACK_ACCESS_DENIED: WIN32_ERROR = 472u32;
pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH: WIN32_ERROR = 345u32;
pub const ERROR_STRICT_CFG_VIOLATION: WIN32_ERROR = 1657u32;
pub const ERROR_SUBST_TO_JOIN: WIN32_ERROR = 141u32;
pub const ERROR_SUBST_TO_SUBST: WIN32_ERROR = 139u32;
pub const ERROR_SUCCESS: WIN32_ERROR = 0u32;
pub const ERROR_SUCCESS_REBOOT_INITIATED: WIN32_ERROR = 1641u32;
pub const ERROR_SWAPERROR: WIN32_ERROR = 999u32;
pub const ERROR_SYMLINK_CLASS_DISABLED: WIN32_ERROR = 1463u32;
pub const ERROR_SYMLINK_NOT_SUPPORTED: WIN32_ERROR = 1464u32;
pub const ERROR_SYNCHRONIZATION_REQUIRED: WIN32_ERROR = 569u32;
pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED: WIN32_ERROR = 1274u32;
pub const ERROR_SYSTEM_HIVE_TOO_LARGE: WIN32_ERROR = 653u32;
pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE: WIN32_ERROR = 637u32;
pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION: WIN32_ERROR = 783u32;
pub const ERROR_SYSTEM_POWERSTATE_TRANSITION: WIN32_ERROR = 782u32;
pub const ERROR_SYSTEM_PROCESS_TERMINATED: WIN32_ERROR = 591u32;
pub const ERROR_SYSTEM_SHUTDOWN: WIN32_ERROR = 641u32;
pub const ERROR_SYSTEM_TRACE: WIN32_ERROR = 150u32;
pub const ERROR_THREAD_1_INACTIVE: WIN32_ERROR = 210u32;
pub const ERROR_THREAD_ALREADY_IN_TASK: WIN32_ERROR = 1552u32;
pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND: WIN32_ERROR = 400u32;
pub const ERROR_THREAD_MODE_NOT_BACKGROUND: WIN32_ERROR = 401u32;
pub const ERROR_THREAD_NOT_IN_PROCESS: WIN32_ERROR = 566u32;
pub const ERROR_THREAD_WAS_SUSPENDED: WIN32_ERROR = 699u32;
pub const ERROR_TIMEOUT: WIN32_ERROR = 1460u32;
pub const ERROR_TIMER_NOT_CANCELED: WIN32_ERROR = 541u32;
pub const ERROR_TIMER_RESOLUTION_NOT_SET: WIN32_ERROR = 607u32;
pub const ERROR_TIMER_RESUME_IGNORED: WIN32_ERROR = 722u32;
pub const ERROR_TIME_SENSITIVE_THREAD: WIN32_ERROR = 422u32;
pub const ERROR_TIME_SKEW: WIN32_ERROR = 1398u32;
pub const ERROR_TLW_WITH_WSCHILD: WIN32_ERROR = 1406u32;
pub const ERROR_TOKEN_ALREADY_IN_USE: WIN32_ERROR = 1375u32;
pub const ERROR_TOO_MANY_CMDS: WIN32_ERROR = 56u32;
pub const ERROR_TOO_MANY_CONTEXT_IDS: WIN32_ERROR = 1384u32;
pub const ERROR_TOO_MANY_DESCRIPTORS: WIN32_ERROR = 331u32;
pub const ERROR_TOO_MANY_LINKS: WIN32_ERROR = 1142u32;
pub const ERROR_TOO_MANY_LUIDS_REQUESTED: WIN32_ERROR = 1333u32;
pub const ERROR_TOO_MANY_MODULES: WIN32_ERROR = 214u32;
pub const ERROR_TOO_MANY_MUXWAITERS: WIN32_ERROR = 152u32;
pub const ERROR_TOO_MANY_NAMES: WIN32_ERROR = 68u32;
pub const ERROR_TOO_MANY_OPEN_FILES: WIN32_ERROR = 4u32;
pub const ERROR_TOO_MANY_POSTS: WIN32_ERROR = 298u32;
pub const ERROR_TOO_MANY_SECRETS: WIN32_ERROR = 1381u32;
pub const ERROR_TOO_MANY_SEMAPHORES: WIN32_ERROR = 100u32;
pub const ERROR_TOO_MANY_SEM_REQUESTS: WIN32_ERROR = 103u32;
pub const ERROR_TOO_MANY_SESS: WIN32_ERROR = 69u32;
pub const ERROR_TOO_MANY_SIDS: WIN32_ERROR = 1389u32;
pub const ERROR_TOO_MANY_TCBS: WIN32_ERROR = 155u32;
pub const ERROR_TOO_MANY_THREADS: WIN32_ERROR = 565u32;
pub const ERROR_TRANSLATION_COMPLETE: WIN32_ERROR = 757u32;
pub const ERROR_TRUSTED_DOMAIN_FAILURE: WIN32_ERROR = 1788u32;
pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE: WIN32_ERROR = 1789u32;
pub const ERROR_TRUST_FAILURE: WIN32_ERROR = 1790u32;
pub const ERROR_UNABLE_TO_LOCK_MEDIA: WIN32_ERROR = 1108u32;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT: WIN32_ERROR = 1176u32;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2: WIN32_ERROR = 1177u32;
pub const ERROR_UNABLE_TO_REMOVE_REPLACED: WIN32_ERROR = 1175u32;
pub const ERROR_UNABLE_TO_UNLOAD_MEDIA: WIN32_ERROR = 1109u32;
pub const ERROR_UNDEFINED_CHARACTER: WIN32_ERROR = 583u32;
pub const ERROR_UNDEFINED_SCOPE: WIN32_ERROR = 319u32;
pub const ERROR_UNEXPECTED_MM_CREATE_ERR: WIN32_ERROR = 556u32;
pub const ERROR_UNEXPECTED_MM_EXTEND_ERR: WIN32_ERROR = 558u32;
pub const ERROR_UNEXPECTED_MM_MAP_ERROR: WIN32_ERROR = 557u32;
pub const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR: WIN32_ERROR = 443u32;
pub const ERROR_UNEXP_NET_ERR: WIN32_ERROR = 59u32;
pub const ERROR_UNHANDLED_EXCEPTION: WIN32_ERROR = 574u32;
pub const ERROR_UNIDENTIFIED_ERROR: WIN32_ERROR = 1287u32;
pub const ERROR_UNKNOWN_COMPONENT: WIN32_ERROR = 1607u32;
pub const ERROR_UNKNOWN_FEATURE: WIN32_ERROR = 1606u32;
pub const ERROR_UNKNOWN_PATCH: WIN32_ERROR = 1647u32;
pub const ERROR_UNKNOWN_PORT: WIN32_ERROR = 1796u32;
pub const ERROR_UNKNOWN_PRINTER_DRIVER: WIN32_ERROR = 1797u32;
pub const ERROR_UNKNOWN_PRINTPROCESSOR: WIN32_ERROR = 1798u32;
pub const ERROR_UNKNOWN_PRODUCT: WIN32_ERROR = 1605u32;
pub const ERROR_UNKNOWN_PROPERTY: WIN32_ERROR = 1608u32;
pub const ERROR_UNKNOWN_REVISION: WIN32_ERROR = 1305u32;
pub const ERROR_UNRECOGNIZED_MEDIA: WIN32_ERROR = 1785u32;
pub const ERROR_UNRECOGNIZED_VOLUME: WIN32_ERROR = 1005u32;
pub const ERROR_UNSATISFIED_DEPENDENCIES: WIN32_ERROR = 441u32;
pub const ERROR_UNSUPPORTED_COMPRESSION: WIN32_ERROR = 618u32;
pub const ERROR_UNSUPPORTED_TYPE: WIN32_ERROR = 1630u32;
pub const ERROR_UNTRUSTED_MOUNT_POINT: WIN32_ERROR = 448u32;
pub const ERROR_UNWIND: WIN32_ERROR = 542u32;
pub const ERROR_UNWIND_CONSOLIDATE: WIN32_ERROR = 684u32;
pub const ERROR_USER_APC: WIN32_ERROR = 737u32;
pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED: WIN32_ERROR = 1934u32;
pub const ERROR_USER_EXISTS: WIN32_ERROR = 1316u32;
pub const ERROR_USER_MAPPED_FILE: WIN32_ERROR = 1224u32;
pub const ERROR_USER_PROFILE_LOAD: WIN32_ERROR = 500u32;
pub const ERROR_VALIDATE_CONTINUE: WIN32_ERROR = 625u32;
pub const ERROR_VC_DISCONNECTED: WIN32_ERROR = 240u32;
pub const ERROR_VDM_DISALLOWED: WIN32_ERROR = 1286u32;
pub const ERROR_VDM_HARD_ERROR: WIN32_ERROR = 593u32;
pub const ERROR_VERIFIER_STOP: WIN32_ERROR = 537u32;
pub const ERROR_VERSION_PARSE_ERROR: WIN32_ERROR = 777u32;
pub const ERROR_VIRUS_DELETED: WIN32_ERROR = 226u32;
pub const ERROR_VIRUS_INFECTED: WIN32_ERROR = 225u32;
pub const ERROR_VOLSNAP_HIBERNATE_READY: WIN32_ERROR = 761u32;
pub const ERROR_VOLSNAP_PREPARE_HIBERNATE: WIN32_ERROR = 655u32;
pub const ERROR_VOLUME_MOUNTED: WIN32_ERROR = 743u32;
pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED: WIN32_ERROR = 407u32;
pub const ERROR_VOLUME_NOT_SIS_ENABLED: WIN32_ERROR = 4500u32;
pub const ERROR_VOLUME_NOT_SUPPORTED: WIN32_ERROR = 492u32;
pub const ERROR_VOLUME_NOT_SUPPORT_EFS: WIN32_ERROR = 6014u32;
pub const ERROR_VOLUME_WRITE_ACCESS_DENIED: WIN32_ERROR = 508u32;
pub const ERROR_WAIT_1: WIN32_ERROR = 731u32;
pub const ERROR_WAIT_2: WIN32_ERROR = 732u32;
pub const ERROR_WAIT_3: WIN32_ERROR = 733u32;
pub const ERROR_WAIT_63: WIN32_ERROR = 734u32;
pub const ERROR_WAIT_FOR_OPLOCK: WIN32_ERROR = 765u32;
pub const ERROR_WAIT_NO_CHILDREN: WIN32_ERROR = 128u32;
pub const ERROR_WAKE_SYSTEM: WIN32_ERROR = 730u32;
pub const ERROR_WAKE_SYSTEM_DEBUGGER: WIN32_ERROR = 675u32;
pub const ERROR_WAS_LOCKED: WIN32_ERROR = 717u32;
pub const ERROR_WAS_UNLOCKED: WIN32_ERROR = 715u32;
pub const ERROR_WEAK_WHFBKEY_BLOCKED: WIN32_ERROR = 8651u32;
pub const ERROR_WINDOW_NOT_COMBOBOX: WIN32_ERROR = 1423u32;
pub const ERROR_WINDOW_NOT_DIALOG: WIN32_ERROR = 1420u32;
pub const ERROR_WINDOW_OF_OTHER_THREAD: WIN32_ERROR = 1408u32;
pub const ERROR_WIP_ENCRYPTION_FAILED: WIN32_ERROR = 6023u32;
pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT: WIN32_ERROR = 4448u32;
pub const ERROR_WOF_WIM_HEADER_CORRUPT: WIN32_ERROR = 4446u32;
pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT: WIN32_ERROR = 4447u32;
pub const ERROR_WORKING_SET_QUOTA: WIN32_ERROR = 1453u32;
pub const ERROR_WOW_ASSERTION: WIN32_ERROR = 670u32;
pub const ERROR_WRITE_FAULT: WIN32_ERROR = 29u32;
pub const ERROR_WRITE_PROTECT: WIN32_ERROR = 19u32;
pub const ERROR_WRONG_COMPARTMENT: WIN32_ERROR = 1468u32;
pub const ERROR_WRONG_DISK: WIN32_ERROR = 34u32;
pub const ERROR_WRONG_EFS: WIN32_ERROR = 6005u32;
pub const ERROR_WRONG_PASSWORD: WIN32_ERROR = 1323u32;
pub const ERROR_WRONG_TARGET_NAME: WIN32_ERROR = 1396u32;
pub const ERROR_WX86_ERROR: WIN32_ERROR = 540u32;
pub const ERROR_WX86_WARNING: WIN32_ERROR = 539u32;
pub const ERROR_XMLDSIG_ERROR: WIN32_ERROR = 1466u32;
pub const ERROR_XML_PARSE_ERROR: WIN32_ERROR = 1465u32;
pub type EXCEPTION_DISPOSITION = i32;
pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct EXCEPTION_POINTERS {
    pub ExceptionRecord: *mut EXCEPTION_RECORD,
    pub ContextRecord: *mut CONTEXT,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct EXCEPTION_RECORD {
    pub ExceptionCode: NTSTATUS,
    pub ExceptionFlags: u32,
    pub ExceptionRecord: *mut EXCEPTION_RECORD,
    pub ExceptionAddress: *mut core::ffi::c_void,
    pub NumberParameters: u32,
    pub ExceptionInformation: [usize; 15],
}
pub const EXCEPTION_STACK_OVERFLOW: NTSTATUS = 0xC00000FD_u32 as _;
pub const EXTENDED_STARTUPINFO_PRESENT: PROCESS_CREATION_FLAGS = 524288u32;
pub const E_NOTIMPL: HRESULT = 0x80004001_u32 as _;
pub const ExceptionCollidedUnwind: EXCEPTION_DISPOSITION = 3i32;
pub const ExceptionContinueExecution: EXCEPTION_DISPOSITION = 0i32;
pub const ExceptionContinueSearch: EXCEPTION_DISPOSITION = 1i32;
pub const ExceptionNestedException: EXCEPTION_DISPOSITION = 2i32;
pub type FACILITY_CODE = u32;
pub const FACILITY_NT_BIT: FACILITY_CODE = 268435456u32;
pub const FALSE: BOOL = 0i32;
pub type FARPROC = Option<unsafe extern "system" fn() -> isize>;
pub const FAST_FAIL_FATAL_APP_EXIT: u32 = 7u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FD_SET {
    pub fd_count: u32,
    pub fd_array: [SOCKET; 64],
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILETIME {
    pub dwLowDateTime: u32,
    pub dwHighDateTime: u32,
}
pub type FILE_ACCESS_RIGHTS = u32;
pub const FILE_ADD_FILE: FILE_ACCESS_RIGHTS = 2u32;
pub const FILE_ADD_SUBDIRECTORY: FILE_ACCESS_RIGHTS = 4u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_ALLOCATION_INFO {
    pub AllocationSize: i64,
}
pub const FILE_ALL_ACCESS: FILE_ACCESS_RIGHTS = 2032127u32;
pub const FILE_APPEND_DATA: FILE_ACCESS_RIGHTS = 4u32;
pub const FILE_ATTRIBUTE_ARCHIVE: FILE_FLAGS_AND_ATTRIBUTES = 32u32;
pub const FILE_ATTRIBUTE_COMPRESSED: FILE_FLAGS_AND_ATTRIBUTES = 2048u32;
pub const FILE_ATTRIBUTE_DEVICE: FILE_FLAGS_AND_ATTRIBUTES = 64u32;
pub const FILE_ATTRIBUTE_DIRECTORY: FILE_FLAGS_AND_ATTRIBUTES = 16u32;
pub const FILE_ATTRIBUTE_EA: FILE_FLAGS_AND_ATTRIBUTES = 262144u32;
pub const FILE_ATTRIBUTE_ENCRYPTED: FILE_FLAGS_AND_ATTRIBUTES = 16384u32;
pub const FILE_ATTRIBUTE_HIDDEN: FILE_FLAGS_AND_ATTRIBUTES = 2u32;
pub const FILE_ATTRIBUTE_INTEGRITY_STREAM: FILE_FLAGS_AND_ATTRIBUTES = 32768u32;
pub const FILE_ATTRIBUTE_NORMAL: FILE_FLAGS_AND_ATTRIBUTES = 128u32;
pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: FILE_FLAGS_AND_ATTRIBUTES = 8192u32;
pub const FILE_ATTRIBUTE_NO_SCRUB_DATA: FILE_FLAGS_AND_ATTRIBUTES = 131072u32;
pub const FILE_ATTRIBUTE_OFFLINE: FILE_FLAGS_AND_ATTRIBUTES = 4096u32;
pub const FILE_ATTRIBUTE_PINNED: FILE_FLAGS_AND_ATTRIBUTES = 524288u32;
pub const FILE_ATTRIBUTE_READONLY: FILE_FLAGS_AND_ATTRIBUTES = 1u32;
pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS: FILE_FLAGS_AND_ATTRIBUTES = 4194304u32;
pub const FILE_ATTRIBUTE_RECALL_ON_OPEN: FILE_FLAGS_AND_ATTRIBUTES = 262144u32;
pub const FILE_ATTRIBUTE_REPARSE_POINT: FILE_FLAGS_AND_ATTRIBUTES = 1024u32;
pub const FILE_ATTRIBUTE_SPARSE_FILE: FILE_FLAGS_AND_ATTRIBUTES = 512u32;
pub const FILE_ATTRIBUTE_SYSTEM: FILE_FLAGS_AND_ATTRIBUTES = 4u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_ATTRIBUTE_TAG_INFO {
    pub FileAttributes: u32,
    pub ReparseTag: u32,
}
pub const FILE_ATTRIBUTE_TEMPORARY: FILE_FLAGS_AND_ATTRIBUTES = 256u32;
pub const FILE_ATTRIBUTE_UNPINNED: FILE_FLAGS_AND_ATTRIBUTES = 1048576u32;
pub const FILE_ATTRIBUTE_VIRTUAL: FILE_FLAGS_AND_ATTRIBUTES = 65536u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_BASIC_INFO {
    pub CreationTime: i64,
    pub LastAccessTime: i64,
    pub LastWriteTime: i64,
    pub ChangeTime: i64,
    pub FileAttributes: u32,
}
pub const FILE_BEGIN: SET_FILE_POINTER_MOVE_METHOD = 0u32;
pub const FILE_COMPLETE_IF_OPLOCKED: NTCREATEFILE_CREATE_OPTIONS = 256u32;
pub const FILE_CONTAINS_EXTENDED_CREATE_INFORMATION: NTCREATEFILE_CREATE_OPTIONS = 268435456u32;
pub const FILE_CREATE: NTCREATEFILE_CREATE_DISPOSITION = 2u32;
pub const FILE_CREATE_PIPE_INSTANCE: FILE_ACCESS_RIGHTS = 4u32;
pub const FILE_CREATE_TREE_CONNECTION: NTCREATEFILE_CREATE_OPTIONS = 128u32;
pub type FILE_CREATION_DISPOSITION = u32;
pub const FILE_CURRENT: SET_FILE_POINTER_MOVE_METHOD = 1u32;
pub const FILE_DELETE_CHILD: FILE_ACCESS_RIGHTS = 64u32;
pub const FILE_DELETE_ON_CLOSE: NTCREATEFILE_CREATE_OPTIONS = 4096u32;
pub const FILE_DIRECTORY_FILE: NTCREATEFILE_CREATE_OPTIONS = 1u32;
pub const FILE_DISALLOW_EXCLUSIVE: NTCREATEFILE_CREATE_OPTIONS = 131072u32;
pub const FILE_DISPOSITION_FLAG_DELETE: FILE_DISPOSITION_INFO_EX_FLAGS = 1u32;
pub const FILE_DISPOSITION_FLAG_DO_NOT_DELETE: FILE_DISPOSITION_INFO_EX_FLAGS = 0u32;
pub const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK: FILE_DISPOSITION_INFO_EX_FLAGS = 4u32;
pub const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE: FILE_DISPOSITION_INFO_EX_FLAGS = 16u32;
pub const FILE_DISPOSITION_FLAG_ON_CLOSE: FILE_DISPOSITION_INFO_EX_FLAGS = 8u32;
pub const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS: FILE_DISPOSITION_INFO_EX_FLAGS = 2u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_DISPOSITION_INFO {
    pub DeleteFile: BOOLEAN,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_DISPOSITION_INFO_EX {
    pub Flags: FILE_DISPOSITION_INFO_EX_FLAGS,
}
pub type FILE_DISPOSITION_INFO_EX_FLAGS = u32;
pub const FILE_END: SET_FILE_POINTER_MOVE_METHOD = 2u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_END_OF_FILE_INFO {
    pub EndOfFile: i64,
}
pub const FILE_EXECUTE: FILE_ACCESS_RIGHTS = 32u32;
pub type FILE_FLAGS_AND_ATTRIBUTES = u32;
pub const FILE_FLAG_BACKUP_SEMANTICS: FILE_FLAGS_AND_ATTRIBUTES = 33554432u32;
pub const FILE_FLAG_DELETE_ON_CLOSE: FILE_FLAGS_AND_ATTRIBUTES = 67108864u32;
pub const FILE_FLAG_FIRST_PIPE_INSTANCE: FILE_FLAGS_AND_ATTRIBUTES = 524288u32;
pub const FILE_FLAG_NO_BUFFERING: FILE_FLAGS_AND_ATTRIBUTES = 536870912u32;
pub const FILE_FLAG_OPEN_NO_RECALL: FILE_FLAGS_AND_ATTRIBUTES = 1048576u32;
pub const FILE_FLAG_OPEN_REPARSE_POINT: FILE_FLAGS_AND_ATTRIBUTES = 2097152u32;
pub const FILE_FLAG_OVERLAPPED: FILE_FLAGS_AND_ATTRIBUTES = 1073741824u32;
pub const FILE_FLAG_POSIX_SEMANTICS: FILE_FLAGS_AND_ATTRIBUTES = 16777216u32;
pub const FILE_FLAG_RANDOM_ACCESS: FILE_FLAGS_AND_ATTRIBUTES = 268435456u32;
pub const FILE_FLAG_SEQUENTIAL_SCAN: FILE_FLAGS_AND_ATTRIBUTES = 134217728u32;
pub const FILE_FLAG_SESSION_AWARE: FILE_FLAGS_AND_ATTRIBUTES = 8388608u32;
pub const FILE_FLAG_WRITE_THROUGH: FILE_FLAGS_AND_ATTRIBUTES = 2147483648u32;
pub const FILE_GENERIC_EXECUTE: FILE_ACCESS_RIGHTS = 1179808u32;
pub const FILE_GENERIC_READ: FILE_ACCESS_RIGHTS = 1179785u32;
pub const FILE_GENERIC_WRITE: FILE_ACCESS_RIGHTS = 1179926u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_ID_BOTH_DIR_INFO {
    pub NextEntryOffset: u32,
    pub FileIndex: u32,
    pub CreationTime: i64,
    pub LastAccessTime: i64,
    pub LastWriteTime: i64,
    pub ChangeTime: i64,
    pub EndOfFile: i64,
    pub AllocationSize: i64,
    pub FileAttributes: u32,
    pub FileNameLength: u32,
    pub EaSize: u32,
    pub ShortNameLength: i8,
    pub ShortName: [u16; 12],
    pub FileId: i64,
    pub FileName: [u16; 1],
}
pub type FILE_INFO_BY_HANDLE_CLASS = i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_IO_PRIORITY_HINT_INFO {
    pub PriorityHint: PRIORITY_HINT,
}
pub const FILE_LIST_DIRECTORY: FILE_ACCESS_RIGHTS = 1u32;
pub const FILE_NAME_NORMALIZED: GETFINALPATHNAMEBYHANDLE_FLAGS = 0u32;
pub const FILE_NAME_OPENED: GETFINALPATHNAMEBYHANDLE_FLAGS = 8u32;
pub const FILE_NON_DIRECTORY_FILE: NTCREATEFILE_CREATE_OPTIONS = 64u32;
pub const FILE_NO_COMPRESSION: NTCREATEFILE_CREATE_OPTIONS = 32768u32;
pub const FILE_NO_EA_KNOWLEDGE: NTCREATEFILE_CREATE_OPTIONS = 512u32;
pub const FILE_NO_INTERMEDIATE_BUFFERING: NTCREATEFILE_CREATE_OPTIONS = 8u32;
pub const FILE_OPEN: NTCREATEFILE_CREATE_DISPOSITION = 1u32;
pub const FILE_OPEN_BY_FILE_ID: NTCREATEFILE_CREATE_OPTIONS = 8192u32;
pub const FILE_OPEN_FOR_BACKUP_INTENT: NTCREATEFILE_CREATE_OPTIONS = 16384u32;
pub const FILE_OPEN_FOR_FREE_SPACE_QUERY: NTCREATEFILE_CREATE_OPTIONS = 8388608u32;
pub const FILE_OPEN_IF: NTCREATEFILE_CREATE_DISPOSITION = 3u32;
pub const FILE_OPEN_NO_RECALL: NTCREATEFILE_CREATE_OPTIONS = 4194304u32;
pub const FILE_OPEN_REPARSE_POINT: NTCREATEFILE_CREATE_OPTIONS = 2097152u32;
pub const FILE_OPEN_REQUIRING_OPLOCK: NTCREATEFILE_CREATE_OPTIONS = 65536u32;
pub const FILE_OVERWRITE: NTCREATEFILE_CREATE_DISPOSITION = 4u32;
pub const FILE_OVERWRITE_IF: NTCREATEFILE_CREATE_DISPOSITION = 5u32;
pub const FILE_RANDOM_ACCESS: NTCREATEFILE_CREATE_OPTIONS = 2048u32;
pub const FILE_READ_ATTRIBUTES: FILE_ACCESS_RIGHTS = 128u32;
pub const FILE_READ_DATA: FILE_ACCESS_RIGHTS = 1u32;
pub const FILE_READ_EA: FILE_ACCESS_RIGHTS = 8u32;
pub const FILE_RESERVE_OPFILTER: NTCREATEFILE_CREATE_OPTIONS = 1048576u32;
pub const FILE_SEQUENTIAL_ONLY: NTCREATEFILE_CREATE_OPTIONS = 4u32;
pub const FILE_SESSION_AWARE: NTCREATEFILE_CREATE_OPTIONS = 262144u32;
pub const FILE_SHARE_DELETE: FILE_SHARE_MODE = 4u32;
pub type FILE_SHARE_MODE = u32;
pub const FILE_SHARE_NONE: FILE_SHARE_MODE = 0u32;
pub const FILE_SHARE_READ: FILE_SHARE_MODE = 1u32;
pub const FILE_SHARE_WRITE: FILE_SHARE_MODE = 2u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct FILE_STANDARD_INFO {
    pub AllocationSize: i64,
    pub EndOfFile: i64,
    pub NumberOfLinks: u32,
    pub DeletePending: BOOLEAN,
    pub Directory: BOOLEAN,
}
pub const FILE_SUPERSEDE: NTCREATEFILE_CREATE_DISPOSITION = 0u32;
pub const FILE_SYNCHRONOUS_IO_ALERT: NTCREATEFILE_CREATE_OPTIONS = 16u32;
pub const FILE_SYNCHRONOUS_IO_NONALERT: NTCREATEFILE_CREATE_OPTIONS = 32u32;
pub const FILE_TRAVERSE: FILE_ACCESS_RIGHTS = 32u32;
pub type FILE_TYPE = u32;
pub const FILE_TYPE_CHAR: FILE_TYPE = 2u32;
pub const FILE_TYPE_DISK: FILE_TYPE = 1u32;
pub const FILE_TYPE_PIPE: FILE_TYPE = 3u32;
pub const FILE_TYPE_REMOTE: FILE_TYPE = 32768u32;
pub const FILE_TYPE_UNKNOWN: FILE_TYPE = 0u32;
pub const FILE_WRITE_ATTRIBUTES: FILE_ACCESS_RIGHTS = 256u32;
pub const FILE_WRITE_DATA: FILE_ACCESS_RIGHTS = 2u32;
pub const FILE_WRITE_EA: FILE_ACCESS_RIGHTS = 16u32;
pub const FILE_WRITE_THROUGH: NTCREATEFILE_CREATE_OPTIONS = 2u32;
pub type FINDEX_INFO_LEVELS = i32;
pub type FINDEX_SEARCH_OPS = i32;
pub type FIND_FIRST_EX_FLAGS = u32;
pub const FIONBIO: i32 = -2147195266i32;
#[repr(C)]
#[cfg(any(target_arch = "aarch64", target_arch = "arm64ec", target_arch = "x86_64"))]
#[derive(Clone, Copy)]
pub struct FLOATING_SAVE_AREA {
    pub ControlWord: u32,
    pub StatusWord: u32,
    pub TagWord: u32,
    pub ErrorOffset: u32,
    pub ErrorSelector: u32,
    pub DataOffset: u32,
    pub DataSelector: u32,
    pub RegisterArea: [u8; 80],
    pub Cr0NpxState: u32,
}
#[repr(C)]
#[cfg(target_arch = "x86")]
#[derive(Clone, Copy)]
pub struct FLOATING_SAVE_AREA {
    pub ControlWord: u32,
    pub StatusWord: u32,
    pub TagWord: u32,
    pub ErrorOffset: u32,
    pub ErrorSelector: u32,
    pub DataOffset: u32,
    pub DataSelector: u32,
    pub RegisterArea: [u8; 80],
    pub Spare0: u32,
}
pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: FORMAT_MESSAGE_OPTIONS = 256u32;
pub const FORMAT_MESSAGE_ARGUMENT_ARRAY: FORMAT_MESSAGE_OPTIONS = 8192u32;
pub const FORMAT_MESSAGE_FROM_HMODULE: FORMAT_MESSAGE_OPTIONS = 2048u32;
pub const FORMAT_MESSAGE_FROM_STRING: FORMAT_MESSAGE_OPTIONS = 1024u32;
pub const FORMAT_MESSAGE_FROM_SYSTEM: FORMAT_MESSAGE_OPTIONS = 4096u32;
pub const FORMAT_MESSAGE_IGNORE_INSERTS: FORMAT_MESSAGE_OPTIONS = 512u32;
pub type FORMAT_MESSAGE_OPTIONS = u32;
pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: i32 = 8014i32;
pub const FSCTL_GET_REPARSE_POINT: u32 = 589992u32;
pub const FSCTL_SET_REPARSE_POINT: u32 = 589988u32;
pub const FileAlignmentInfo: FILE_INFO_BY_HANDLE_CLASS = 17i32;
pub const FileAllocationInfo: FILE_INFO_BY_HANDLE_CLASS = 5i32;
pub const FileAttributeTagInfo: FILE_INFO_BY_HANDLE_CLASS = 9i32;
pub const FileBasicInfo: FILE_INFO_BY_HANDLE_CLASS = 0i32;
pub const FileCaseSensitiveInfo: FILE_INFO_BY_HANDLE_CLASS = 23i32;
pub const FileCompressionInfo: FILE_INFO_BY_HANDLE_CLASS = 8i32;
pub const FileDispositionInfo: FILE_INFO_BY_HANDLE_CLASS = 4i32;
pub const FileDispositionInfoEx: FILE_INFO_BY_HANDLE_CLASS = 21i32;
pub const FileEndOfFileInfo: FILE_INFO_BY_HANDLE_CLASS = 6i32;
pub const FileFullDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 14i32;
pub const FileFullDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 15i32;
pub const FileIdBothDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 10i32;
pub const FileIdBothDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 11i32;
pub const FileIdExtdDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 19i32;
pub const FileIdExtdDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 20i32;
pub const FileIdInfo: FILE_INFO_BY_HANDLE_CLASS = 18i32;
pub const FileIoPriorityHintInfo: FILE_INFO_BY_HANDLE_CLASS = 12i32;
pub const FileNameInfo: FILE_INFO_BY_HANDLE_CLASS = 2i32;
pub const FileNormalizedNameInfo: FILE_INFO_BY_HANDLE_CLASS = 24i32;
pub const FileRemoteProtocolInfo: FILE_INFO_BY_HANDLE_CLASS = 13i32;
pub const FileRenameInfo: FILE_INFO_BY_HANDLE_CLASS = 3i32;
pub const FileRenameInfoEx: FILE_INFO_BY_HANDLE_CLASS = 22i32;
pub const FileStandardInfo: FILE_INFO_BY_HANDLE_CLASS = 1i32;
pub const FileStorageInfo: FILE_INFO_BY_HANDLE_CLASS = 16i32;
pub const FileStreamInfo: FILE_INFO_BY_HANDLE_CLASS = 7i32;
pub const FindExInfoBasic: FINDEX_INFO_LEVELS = 1i32;
pub const FindExSearchNameMatch: FINDEX_SEARCH_OPS = 0i32;
pub type GENERIC_ACCESS_RIGHTS = u32;
pub const GENERIC_ALL: GENERIC_ACCESS_RIGHTS = 268435456u32;
pub const GENERIC_EXECUTE: GENERIC_ACCESS_RIGHTS = 536870912u32;
pub const GENERIC_READ: GENERIC_ACCESS_RIGHTS = 2147483648u32;
pub const GENERIC_WRITE: GENERIC_ACCESS_RIGHTS = 1073741824u32;
pub type GETFINALPATHNAMEBYHANDLE_FLAGS = u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct GUID {
    pub data1: u32,
    pub data2: u16,
    pub data3: u16,
    pub data4: [u8; 8],
}
impl GUID {
    pub const fn from_u128(uuid: u128) -> Self {
        Self {
            data1: (uuid >> 96) as u32,
            data2: (uuid >> 80 & 0xffff) as u16,
            data3: (uuid >> 64 & 0xffff) as u16,
            data4: (uuid as u64).to_be_bytes(),
        }
    }
}
pub type HANDLE = *mut core::ffi::c_void;
pub type HANDLE_FLAGS = u32;
pub const HANDLE_FLAG_INHERIT: HANDLE_FLAGS = 1u32;
pub const HANDLE_FLAG_PROTECT_FROM_CLOSE: HANDLE_FLAGS = 2u32;
pub const HIGH_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 128u32;
pub type HLOCAL = *mut core::ffi::c_void;
pub type HMODULE = *mut core::ffi::c_void;
pub type HRESULT = i32;
pub const IDLE_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 64u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct IN6_ADDR {
    pub u: IN6_ADDR_0,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union IN6_ADDR_0 {
    pub Byte: [u8; 16],
    pub Word: [u16; 8],
}
pub const INFINITE: u32 = 4294967295u32;
pub const INHERIT_CALLER_PRIORITY: PROCESS_CREATION_FLAGS = 131072u32;
pub const INHERIT_PARENT_AFFINITY: PROCESS_CREATION_FLAGS = 65536u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub union INIT_ONCE {
    pub Ptr: *mut core::ffi::c_void,
}
pub const INIT_ONCE_INIT_FAILED: u32 = 4u32;
pub const INVALID_FILE_ATTRIBUTES: u32 = 4294967295u32;
pub const INVALID_SOCKET: SOCKET = -1i32 as _;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct IN_ADDR {
    pub S_un: IN_ADDR_0,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union IN_ADDR_0 {
    pub S_un_b: IN_ADDR_0_0,
    pub S_un_w: IN_ADDR_0_1,
    pub S_addr: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct IN_ADDR_0_0 {
    pub s_b1: u8,
    pub s_b2: u8,
    pub s_b3: u8,
    pub s_b4: u8,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct IN_ADDR_0_1 {
    pub s_w1: u16,
    pub s_w2: u16,
}
pub const IO_REPARSE_TAG_MOUNT_POINT: u32 = 2684354563u32;
pub const IO_REPARSE_TAG_SYMLINK: u32 = 2684354572u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct IO_STATUS_BLOCK {
    pub Anonymous: IO_STATUS_BLOCK_0,
    pub Information: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union IO_STATUS_BLOCK_0 {
    pub Status: NTSTATUS,
    pub Pointer: *mut core::ffi::c_void,
}
pub type IPPROTO = i32;
pub const IPPROTO_AH: IPPROTO = 51i32;
pub const IPPROTO_CBT: IPPROTO = 7i32;
pub const IPPROTO_DSTOPTS: IPPROTO = 60i32;
pub const IPPROTO_EGP: IPPROTO = 8i32;
pub const IPPROTO_ESP: IPPROTO = 50i32;
pub const IPPROTO_FRAGMENT: IPPROTO = 44i32;
pub const IPPROTO_GGP: IPPROTO = 3i32;
pub const IPPROTO_HOPOPTS: IPPROTO = 0i32;
pub const IPPROTO_ICLFXBM: IPPROTO = 78i32;
pub const IPPROTO_ICMP: IPPROTO = 1i32;
pub const IPPROTO_ICMPV6: IPPROTO = 58i32;
pub const IPPROTO_IDP: IPPROTO = 22i32;
pub const IPPROTO_IGMP: IPPROTO = 2i32;
pub const IPPROTO_IGP: IPPROTO = 9i32;
pub const IPPROTO_IP: IPPROTO = 0i32;
pub const IPPROTO_IPV4: IPPROTO = 4i32;
pub const IPPROTO_IPV6: IPPROTO = 41i32;
pub const IPPROTO_L2TP: IPPROTO = 115i32;
pub const IPPROTO_MAX: IPPROTO = 256i32;
pub const IPPROTO_ND: IPPROTO = 77i32;
pub const IPPROTO_NONE: IPPROTO = 59i32;
pub const IPPROTO_PGM: IPPROTO = 113i32;
pub const IPPROTO_PIM: IPPROTO = 103i32;
pub const IPPROTO_PUP: IPPROTO = 12i32;
pub const IPPROTO_RAW: IPPROTO = 255i32;
pub const IPPROTO_RDP: IPPROTO = 27i32;
pub const IPPROTO_RESERVED_IPSEC: IPPROTO = 258i32;
pub const IPPROTO_RESERVED_IPSECOFFLOAD: IPPROTO = 259i32;
pub const IPPROTO_RESERVED_MAX: IPPROTO = 261i32;
pub const IPPROTO_RESERVED_RAW: IPPROTO = 257i32;
pub const IPPROTO_RESERVED_WNV: IPPROTO = 260i32;
pub const IPPROTO_RM: IPPROTO = 113i32;
pub const IPPROTO_ROUTING: IPPROTO = 43i32;
pub const IPPROTO_SCTP: IPPROTO = 132i32;
pub const IPPROTO_ST: IPPROTO = 5i32;
pub const IPPROTO_TCP: IPPROTO = 6i32;
pub const IPPROTO_UDP: IPPROTO = 17i32;
pub const IPV6_ADD_MEMBERSHIP: i32 = 12i32;
pub const IPV6_DROP_MEMBERSHIP: i32 = 13i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct IPV6_MREQ {
    pub ipv6mr_multiaddr: IN6_ADDR,
    pub ipv6mr_interface: u32,
}
pub const IPV6_MULTICAST_LOOP: i32 = 11i32;
pub const IPV6_V6ONLY: i32 = 27i32;
pub const IP_ADD_MEMBERSHIP: i32 = 12i32;
pub const IP_DROP_MEMBERSHIP: i32 = 13i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct IP_MREQ {
    pub imr_multiaddr: IN_ADDR,
    pub imr_interface: IN_ADDR,
}
pub const IP_MULTICAST_LOOP: i32 = 11i32;
pub const IP_MULTICAST_TTL: i32 = 10i32;
pub const IP_TTL: i32 = 4i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct LINGER {
    pub l_onoff: u16,
    pub l_linger: u16,
}
pub const LOCKFILE_EXCLUSIVE_LOCK: LOCK_FILE_FLAGS = 2u32;
pub const LOCKFILE_FAIL_IMMEDIATELY: LOCK_FILE_FLAGS = 1u32;
pub type LOCK_FILE_FLAGS = u32;
pub type LPOVERLAPPED_COMPLETION_ROUTINE = Option<
    unsafe extern "system" fn(
        dwerrorcode: u32,
        dwnumberofbytestransfered: u32,
        lpoverlapped: *mut OVERLAPPED,
    ),
>;
pub type LPPROC_THREAD_ATTRIBUTE_LIST = *mut core::ffi::c_void;
pub type LPPROGRESS_ROUTINE = Option<
    unsafe extern "system" fn(
        totalfilesize: i64,
        totalbytestransferred: i64,
        streamsize: i64,
        streambytestransferred: i64,
        dwstreamnumber: u32,
        dwcallbackreason: LPPROGRESS_ROUTINE_CALLBACK_REASON,
        hsourcefile: HANDLE,
        hdestinationfile: HANDLE,
        lpdata: *const core::ffi::c_void,
    ) -> u32,
>;
pub type LPPROGRESS_ROUTINE_CALLBACK_REASON = u32;
pub type LPTHREAD_START_ROUTINE =
    Option<unsafe extern "system" fn(lpthreadparameter: *mut core::ffi::c_void) -> u32>;
pub type LPWSAOVERLAPPED_COMPLETION_ROUTINE = Option<
    unsafe extern "system" fn(
        dwerror: u32,
        cbtransferred: u32,
        lpoverlapped: *mut OVERLAPPED,
        dwflags: u32,
    ),
>;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct M128A {
    pub Low: u64,
    pub High: i64,
}
pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: u32 = 16384u32;
pub const MAX_PATH: u32 = 260u32;
pub const MB_COMPOSITE: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 2u32;
pub const MB_ERR_INVALID_CHARS: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 8u32;
pub const MB_PRECOMPOSED: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 1u32;
pub const MB_USEGLYPHCHARS: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 4u32;
pub const MOVEFILE_COPY_ALLOWED: MOVE_FILE_FLAGS = 2u32;
pub const MOVEFILE_CREATE_HARDLINK: MOVE_FILE_FLAGS = 16u32;
pub const MOVEFILE_DELAY_UNTIL_REBOOT: MOVE_FILE_FLAGS = 4u32;
pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE: MOVE_FILE_FLAGS = 32u32;
pub const MOVEFILE_REPLACE_EXISTING: MOVE_FILE_FLAGS = 1u32;
pub const MOVEFILE_WRITE_THROUGH: MOVE_FILE_FLAGS = 8u32;
pub type MOVE_FILE_FLAGS = u32;
pub const MSG_DONTROUTE: SEND_RECV_FLAGS = 4i32;
pub const MSG_OOB: SEND_RECV_FLAGS = 1i32;
pub const MSG_PEEK: SEND_RECV_FLAGS = 2i32;
pub const MSG_PUSH_IMMEDIATE: SEND_RECV_FLAGS = 32i32;
pub const MSG_WAITALL: SEND_RECV_FLAGS = 8i32;
pub type MULTI_BYTE_TO_WIDE_CHAR_FLAGS = u32;
pub const MaximumFileInfoByHandleClass: FILE_INFO_BY_HANDLE_CLASS = 25i32;
pub type NAMED_PIPE_MODE = u32;
pub const NORMAL_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 32u32;
pub const NO_ERROR: WIN32_ERROR = 0u32;
pub type NTCREATEFILE_CREATE_DISPOSITION = u32;
pub type NTCREATEFILE_CREATE_OPTIONS = u32;
pub type NTSTATUS = i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct OBJECT_ATTRIBUTES {
    pub Length: u32,
    pub RootDirectory: HANDLE,
    pub ObjectName: *const UNICODE_STRING,
    pub Attributes: u32,
    pub SecurityDescriptor: *const core::ffi::c_void,
    pub SecurityQualityOfService: *const core::ffi::c_void,
}
pub const OBJ_DONT_REPARSE: i32 = 4096i32;
pub const OPEN_ALWAYS: FILE_CREATION_DISPOSITION = 4u32;
pub const OPEN_EXISTING: FILE_CREATION_DISPOSITION = 3u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct OVERLAPPED {
    pub Internal: usize,
    pub InternalHigh: usize,
    pub Anonymous: OVERLAPPED_0,
    pub hEvent: HANDLE,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union OVERLAPPED_0 {
    pub Anonymous: OVERLAPPED_0_0,
    pub Pointer: *mut core::ffi::c_void,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct OVERLAPPED_0_0 {
    pub Offset: u32,
    pub OffsetHigh: u32,
}
pub type PCSTR = *const u8;
pub type PCWSTR = *const u16;
pub type PIO_APC_ROUTINE = Option<
    unsafe extern "system" fn(
        apccontext: *mut core::ffi::c_void,
        iostatusblock: *mut IO_STATUS_BLOCK,
        reserved: u32,
    ),
>;
pub const PIPE_ACCEPT_REMOTE_CLIENTS: NAMED_PIPE_MODE = 0u32;
pub const PIPE_ACCESS_DUPLEX: FILE_FLAGS_AND_ATTRIBUTES = 3u32;
pub const PIPE_ACCESS_INBOUND: FILE_FLAGS_AND_ATTRIBUTES = 1u32;
pub const PIPE_ACCESS_OUTBOUND: FILE_FLAGS_AND_ATTRIBUTES = 2u32;
pub const PIPE_CLIENT_END: NAMED_PIPE_MODE = 0u32;
pub const PIPE_NOWAIT: NAMED_PIPE_MODE = 1u32;
pub const PIPE_READMODE_BYTE: NAMED_PIPE_MODE = 0u32;
pub const PIPE_READMODE_MESSAGE: NAMED_PIPE_MODE = 2u32;
pub const PIPE_REJECT_REMOTE_CLIENTS: NAMED_PIPE_MODE = 8u32;
pub const PIPE_SERVER_END: NAMED_PIPE_MODE = 1u32;
pub const PIPE_TYPE_BYTE: NAMED_PIPE_MODE = 0u32;
pub const PIPE_TYPE_MESSAGE: NAMED_PIPE_MODE = 4u32;
pub const PIPE_WAIT: NAMED_PIPE_MODE = 0u32;
pub type PRIORITY_HINT = i32;
pub type PROCESSOR_ARCHITECTURE = u16;
pub type PROCESS_CREATION_FLAGS = u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct PROCESS_INFORMATION {
    pub hProcess: HANDLE,
    pub hThread: HANDLE,
    pub dwProcessId: u32,
    pub dwThreadId: u32,
}
pub const PROCESS_MODE_BACKGROUND_BEGIN: PROCESS_CREATION_FLAGS = 1048576u32;
pub const PROCESS_MODE_BACKGROUND_END: PROCESS_CREATION_FLAGS = 2097152u32;
pub const PROFILE_KERNEL: PROCESS_CREATION_FLAGS = 536870912u32;
pub const PROFILE_SERVER: PROCESS_CREATION_FLAGS = 1073741824u32;
pub const PROFILE_USER: PROCESS_CREATION_FLAGS = 268435456u32;
pub const PROGRESS_CONTINUE: u32 = 0u32;
pub type PSTR = *mut u8;
pub type PTIMERAPCROUTINE = Option<
    unsafe extern "system" fn(
        lpargtocompletionroutine: *const core::ffi::c_void,
        dwtimerlowvalue: u32,
        dwtimerhighvalue: u32,
    ),
>;
pub type PVECTORED_EXCEPTION_HANDLER =
    Option<unsafe extern "system" fn(exceptioninfo: *mut EXCEPTION_POINTERS) -> i32>;
pub type PWSTR = *mut u16;
pub const READ_CONTROL: FILE_ACCESS_RIGHTS = 131072u32;
pub const REALTIME_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 256u32;
pub const SD_BOTH: WINSOCK_SHUTDOWN_HOW = 2i32;
pub const SD_RECEIVE: WINSOCK_SHUTDOWN_HOW = 0i32;
pub const SD_SEND: WINSOCK_SHUTDOWN_HOW = 1i32;
pub const SECURITY_ANONYMOUS: FILE_FLAGS_AND_ATTRIBUTES = 0u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct SECURITY_ATTRIBUTES {
    pub nLength: u32,
    pub lpSecurityDescriptor: *mut core::ffi::c_void,
    pub bInheritHandle: BOOL,
}
pub const SECURITY_CONTEXT_TRACKING: FILE_FLAGS_AND_ATTRIBUTES = 262144u32;
pub const SECURITY_DELEGATION: FILE_FLAGS_AND_ATTRIBUTES = 196608u32;
pub const SECURITY_EFFECTIVE_ONLY: FILE_FLAGS_AND_ATTRIBUTES = 524288u32;
pub const SECURITY_IDENTIFICATION: FILE_FLAGS_AND_ATTRIBUTES = 65536u32;
pub const SECURITY_IMPERSONATION: FILE_FLAGS_AND_ATTRIBUTES = 131072u32;
pub const SECURITY_SQOS_PRESENT: FILE_FLAGS_AND_ATTRIBUTES = 1048576u32;
pub const SECURITY_VALID_SQOS_FLAGS: FILE_FLAGS_AND_ATTRIBUTES = 2031616u32;
pub type SEND_RECV_FLAGS = i32;
pub type SET_FILE_POINTER_MOVE_METHOD = u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct SOCKADDR {
    pub sa_family: ADDRESS_FAMILY,
    pub sa_data: [i8; 14],
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct SOCKADDR_STORAGE {
    pub ss_family: ADDRESS_FAMILY,
    pub __ss_pad1: [i8; 6],
    pub __ss_align: i64,
    pub __ss_pad2: [i8; 112],
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct SOCKADDR_UN {
    pub sun_family: ADDRESS_FAMILY,
    pub sun_path: [i8; 108],
}
pub type SOCKET = usize;
pub const SOCKET_ERROR: i32 = -1i32;
pub const SOCK_DGRAM: WINSOCK_SOCKET_TYPE = 2i32;
pub const SOCK_RAW: WINSOCK_SOCKET_TYPE = 3i32;
pub const SOCK_RDM: WINSOCK_SOCKET_TYPE = 4i32;
pub const SOCK_SEQPACKET: WINSOCK_SOCKET_TYPE = 5i32;
pub const SOCK_STREAM: WINSOCK_SOCKET_TYPE = 1i32;
pub const SOL_SOCKET: i32 = 65535i32;
pub const SO_BROADCAST: i32 = 32i32;
pub const SO_ERROR: i32 = 4103i32;
pub const SO_LINGER: i32 = 128i32;
pub const SO_RCVTIMEO: i32 = 4102i32;
pub const SO_SNDTIMEO: i32 = 4101i32;
pub const SPECIFIC_RIGHTS_ALL: FILE_ACCESS_RIGHTS = 65535u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct SRWLOCK {
    pub Ptr: *mut core::ffi::c_void,
}
pub const STACK_SIZE_PARAM_IS_A_RESERVATION: THREAD_CREATION_FLAGS = 65536u32;
pub const STANDARD_RIGHTS_ALL: FILE_ACCESS_RIGHTS = 2031616u32;
pub const STANDARD_RIGHTS_EXECUTE: FILE_ACCESS_RIGHTS = 131072u32;
pub const STANDARD_RIGHTS_READ: FILE_ACCESS_RIGHTS = 131072u32;
pub const STANDARD_RIGHTS_REQUIRED: FILE_ACCESS_RIGHTS = 983040u32;
pub const STANDARD_RIGHTS_WRITE: FILE_ACCESS_RIGHTS = 131072u32;
pub const STARTF_FORCEOFFFEEDBACK: STARTUPINFOW_FLAGS = 128u32;
pub const STARTF_FORCEONFEEDBACK: STARTUPINFOW_FLAGS = 64u32;
pub const STARTF_PREVENTPINNING: STARTUPINFOW_FLAGS = 8192u32;
pub const STARTF_RUNFULLSCREEN: STARTUPINFOW_FLAGS = 32u32;
pub const STARTF_TITLEISAPPID: STARTUPINFOW_FLAGS = 4096u32;
pub const STARTF_TITLEISLINKNAME: STARTUPINFOW_FLAGS = 2048u32;
pub const STARTF_UNTRUSTEDSOURCE: STARTUPINFOW_FLAGS = 32768u32;
pub const STARTF_USECOUNTCHARS: STARTUPINFOW_FLAGS = 8u32;
pub const STARTF_USEFILLATTRIBUTE: STARTUPINFOW_FLAGS = 16u32;
pub const STARTF_USEHOTKEY: STARTUPINFOW_FLAGS = 512u32;
pub const STARTF_USEPOSITION: STARTUPINFOW_FLAGS = 4u32;
pub const STARTF_USESHOWWINDOW: STARTUPINFOW_FLAGS = 1u32;
pub const STARTF_USESIZE: STARTUPINFOW_FLAGS = 2u32;
pub const STARTF_USESTDHANDLES: STARTUPINFOW_FLAGS = 256u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct STARTUPINFOEXW {
    pub StartupInfo: STARTUPINFOW,
    pub lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct STARTUPINFOW {
    pub cb: u32,
    pub lpReserved: PWSTR,
    pub lpDesktop: PWSTR,
    pub lpTitle: PWSTR,
    pub dwX: u32,
    pub dwY: u32,
    pub dwXSize: u32,
    pub dwYSize: u32,
    pub dwXCountChars: u32,
    pub dwYCountChars: u32,
    pub dwFillAttribute: u32,
    pub dwFlags: STARTUPINFOW_FLAGS,
    pub wShowWindow: u16,
    pub cbReserved2: u16,
    pub lpReserved2: *mut u8,
    pub hStdInput: HANDLE,
    pub hStdOutput: HANDLE,
    pub hStdError: HANDLE,
}
pub type STARTUPINFOW_FLAGS = u32;
pub const STATUS_DELETE_PENDING: NTSTATUS = 0xC0000056_u32 as _;
pub const STATUS_DIRECTORY_NOT_EMPTY: NTSTATUS = 0xC0000101_u32 as _;
pub const STATUS_END_OF_FILE: NTSTATUS = 0xC0000011_u32 as _;
pub const STATUS_FILE_DELETED: NTSTATUS = 0xC0000123_u32 as _;
pub const STATUS_INVALID_HANDLE: NTSTATUS = 0xC0000008_u32 as _;
pub const STATUS_INVALID_PARAMETER: NTSTATUS = 0xC000000D_u32 as _;
pub const STATUS_NOT_IMPLEMENTED: NTSTATUS = 0xC0000002_u32 as _;
pub const STATUS_PENDING: NTSTATUS = 0x103_u32 as _;
pub const STATUS_SHARING_VIOLATION: NTSTATUS = 0xC0000043_u32 as _;
pub const STATUS_SUCCESS: NTSTATUS = 0x0_u32 as _;
pub const STD_ERROR_HANDLE: STD_HANDLE = 4294967284u32;
pub type STD_HANDLE = u32;
pub const STD_INPUT_HANDLE: STD_HANDLE = 4294967286u32;
pub const STD_OUTPUT_HANDLE: STD_HANDLE = 4294967285u32;
pub type SYMBOLIC_LINK_FLAGS = u32;
pub const SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE: SYMBOLIC_LINK_FLAGS = 2u32;
pub const SYMBOLIC_LINK_FLAG_DIRECTORY: SYMBOLIC_LINK_FLAGS = 1u32;
pub const SYMLINK_FLAG_RELATIVE: u32 = 1u32;
pub type SYNCHRONIZATION_ACCESS_RIGHTS = u32;
pub const SYNCHRONIZE: FILE_ACCESS_RIGHTS = 1048576u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct SYSTEM_INFO {
    pub Anonymous: SYSTEM_INFO_0,
    pub dwPageSize: u32,
    pub lpMinimumApplicationAddress: *mut core::ffi::c_void,
    pub lpMaximumApplicationAddress: *mut core::ffi::c_void,
    pub dwActiveProcessorMask: usize,
    pub dwNumberOfProcessors: u32,
    pub dwProcessorType: u32,
    pub dwAllocationGranularity: u32,
    pub wProcessorLevel: u16,
    pub wProcessorRevision: u16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union SYSTEM_INFO_0 {
    pub dwOemId: u32,
    pub Anonymous: SYSTEM_INFO_0_0,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct SYSTEM_INFO_0_0 {
    pub wProcessorArchitecture: PROCESSOR_ARCHITECTURE,
    pub wReserved: u16,
}
pub const TCP_NODELAY: i32 = 1i32;
pub const THREAD_CREATE_RUN_IMMEDIATELY: THREAD_CREATION_FLAGS = 0u32;
pub const THREAD_CREATE_SUSPENDED: THREAD_CREATION_FLAGS = 4u32;
pub type THREAD_CREATION_FLAGS = u32;
pub const TIMER_ALL_ACCESS: SYNCHRONIZATION_ACCESS_RIGHTS = 2031619u32;
pub const TIMER_MODIFY_STATE: SYNCHRONIZATION_ACCESS_RIGHTS = 2u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct TIMEVAL {
    pub tv_sec: i32,
    pub tv_usec: i32,
}
pub const TLS_OUT_OF_INDEXES: u32 = 4294967295u32;
pub type TOKEN_ACCESS_MASK = u32;
pub const TOKEN_ACCESS_PSEUDO_HANDLE: TOKEN_ACCESS_MASK = 24u32;
pub const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8: TOKEN_ACCESS_MASK = 24u32;
pub const TOKEN_ACCESS_SYSTEM_SECURITY: TOKEN_ACCESS_MASK = 16777216u32;
pub const TOKEN_ADJUST_DEFAULT: TOKEN_ACCESS_MASK = 128u32;
pub const TOKEN_ADJUST_GROUPS: TOKEN_ACCESS_MASK = 64u32;
pub const TOKEN_ADJUST_PRIVILEGES: TOKEN_ACCESS_MASK = 32u32;
pub const TOKEN_ADJUST_SESSIONID: TOKEN_ACCESS_MASK = 256u32;
pub const TOKEN_ALL_ACCESS: TOKEN_ACCESS_MASK = 983551u32;
pub const TOKEN_ASSIGN_PRIMARY: TOKEN_ACCESS_MASK = 1u32;
pub const TOKEN_DELETE: TOKEN_ACCESS_MASK = 65536u32;
pub const TOKEN_DUPLICATE: TOKEN_ACCESS_MASK = 2u32;
pub const TOKEN_EXECUTE: TOKEN_ACCESS_MASK = 131072u32;
pub const TOKEN_IMPERSONATE: TOKEN_ACCESS_MASK = 4u32;
pub const TOKEN_QUERY: TOKEN_ACCESS_MASK = 8u32;
pub const TOKEN_QUERY_SOURCE: TOKEN_ACCESS_MASK = 16u32;
pub const TOKEN_READ: TOKEN_ACCESS_MASK = 131080u32;
pub const TOKEN_READ_CONTROL: TOKEN_ACCESS_MASK = 131072u32;
pub const TOKEN_TRUST_CONSTRAINT_MASK: TOKEN_ACCESS_MASK = 131096u32;
pub const TOKEN_WRITE: TOKEN_ACCESS_MASK = 131296u32;
pub const TOKEN_WRITE_DAC: TOKEN_ACCESS_MASK = 262144u32;
pub const TOKEN_WRITE_OWNER: TOKEN_ACCESS_MASK = 524288u32;
pub const TRUE: BOOL = 1i32;
pub const TRUNCATE_EXISTING: FILE_CREATION_DISPOSITION = 5u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct UNICODE_STRING {
    pub Length: u16,
    pub MaximumLength: u16,
    pub Buffer: PWSTR,
}
pub const VOLUME_NAME_DOS: GETFINALPATHNAMEBYHANDLE_FLAGS = 0u32;
pub const VOLUME_NAME_GUID: GETFINALPATHNAMEBYHANDLE_FLAGS = 1u32;
pub const VOLUME_NAME_NONE: GETFINALPATHNAMEBYHANDLE_FLAGS = 4u32;
pub const WAIT_ABANDONED: WAIT_EVENT = 128u32;
pub const WAIT_ABANDONED_0: WAIT_EVENT = 128u32;
pub type WAIT_EVENT = u32;
pub const WAIT_FAILED: WAIT_EVENT = 4294967295u32;
pub const WAIT_IO_COMPLETION: WAIT_EVENT = 192u32;
pub const WAIT_OBJECT_0: WAIT_EVENT = 0u32;
pub const WAIT_TIMEOUT: WAIT_EVENT = 258u32;
pub const WC_ERR_INVALID_CHARS: u32 = 128u32;
pub type WIN32_ERROR = u32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct WIN32_FIND_DATAW {
    pub dwFileAttributes: u32,
    pub ftCreationTime: FILETIME,
    pub ftLastAccessTime: FILETIME,
    pub ftLastWriteTime: FILETIME,
    pub nFileSizeHigh: u32,
    pub nFileSizeLow: u32,
    pub dwReserved0: u32,
    pub dwReserved1: u32,
    pub cFileName: [u16; 260],
    pub cAlternateFileName: [u16; 14],
}
pub type WINSOCK_SHUTDOWN_HOW = i32;
pub type WINSOCK_SOCKET_TYPE = i32;
pub const WRITE_DAC: FILE_ACCESS_RIGHTS = 262144u32;
pub const WRITE_OWNER: FILE_ACCESS_RIGHTS = 524288u32;
pub const WSABASEERR: WSA_ERROR = 10000i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct WSABUF {
    pub len: u32,
    pub buf: PSTR,
}
#[repr(C)]
#[cfg(any(target_arch = "aarch64", target_arch = "arm64ec", target_arch = "x86_64"))]
#[derive(Clone, Copy)]
pub struct WSADATA {
    pub wVersion: u16,
    pub wHighVersion: u16,
    pub iMaxSockets: u16,
    pub iMaxUdpDg: u16,
    pub lpVendorInfo: PSTR,
    pub szDescription: [i8; 257],
    pub szSystemStatus: [i8; 129],
}
#[repr(C)]
#[cfg(target_arch = "x86")]
#[derive(Clone, Copy)]
pub struct WSADATA {
    pub wVersion: u16,
    pub wHighVersion: u16,
    pub szDescription: [i8; 257],
    pub szSystemStatus: [i8; 129],
    pub iMaxSockets: u16,
    pub iMaxUdpDg: u16,
    pub lpVendorInfo: PSTR,
}
pub const WSAEACCES: WSA_ERROR = 10013i32;
pub const WSAEADDRINUSE: WSA_ERROR = 10048i32;
pub const WSAEADDRNOTAVAIL: WSA_ERROR = 10049i32;
pub const WSAEAFNOSUPPORT: WSA_ERROR = 10047i32;
pub const WSAEALREADY: WSA_ERROR = 10037i32;
pub const WSAEBADF: WSA_ERROR = 10009i32;
pub const WSAECANCELLED: WSA_ERROR = 10103i32;
pub const WSAECONNABORTED: WSA_ERROR = 10053i32;
pub const WSAECONNREFUSED: WSA_ERROR = 10061i32;
pub const WSAECONNRESET: WSA_ERROR = 10054i32;
pub const WSAEDESTADDRREQ: WSA_ERROR = 10039i32;
pub const WSAEDISCON: WSA_ERROR = 10101i32;
pub const WSAEDQUOT: WSA_ERROR = 10069i32;
pub const WSAEFAULT: WSA_ERROR = 10014i32;
pub const WSAEHOSTDOWN: WSA_ERROR = 10064i32;
pub const WSAEHOSTUNREACH: WSA_ERROR = 10065i32;
pub const WSAEINPROGRESS: WSA_ERROR = 10036i32;
pub const WSAEINTR: WSA_ERROR = 10004i32;
pub const WSAEINVAL: WSA_ERROR = 10022i32;
pub const WSAEINVALIDPROCTABLE: WSA_ERROR = 10104i32;
pub const WSAEINVALIDPROVIDER: WSA_ERROR = 10105i32;
pub const WSAEISCONN: WSA_ERROR = 10056i32;
pub const WSAELOOP: WSA_ERROR = 10062i32;
pub const WSAEMFILE: WSA_ERROR = 10024i32;
pub const WSAEMSGSIZE: WSA_ERROR = 10040i32;
pub const WSAENAMETOOLONG: WSA_ERROR = 10063i32;
pub const WSAENETDOWN: WSA_ERROR = 10050i32;
pub const WSAENETRESET: WSA_ERROR = 10052i32;
pub const WSAENETUNREACH: WSA_ERROR = 10051i32;
pub const WSAENOBUFS: WSA_ERROR = 10055i32;
pub const WSAENOMORE: WSA_ERROR = 10102i32;
pub const WSAENOPROTOOPT: WSA_ERROR = 10042i32;
pub const WSAENOTCONN: WSA_ERROR = 10057i32;
pub const WSAENOTEMPTY: WSA_ERROR = 10066i32;
pub const WSAENOTSOCK: WSA_ERROR = 10038i32;
pub const WSAEOPNOTSUPP: WSA_ERROR = 10045i32;
pub const WSAEPFNOSUPPORT: WSA_ERROR = 10046i32;
pub const WSAEPROCLIM: WSA_ERROR = 10067i32;
pub const WSAEPROTONOSUPPORT: WSA_ERROR = 10043i32;
pub const WSAEPROTOTYPE: WSA_ERROR = 10041i32;
pub const WSAEPROVIDERFAILEDINIT: WSA_ERROR = 10106i32;
pub const WSAEREFUSED: WSA_ERROR = 10112i32;
pub const WSAEREMOTE: WSA_ERROR = 10071i32;
pub const WSAESHUTDOWN: WSA_ERROR = 10058i32;
pub const WSAESOCKTNOSUPPORT: WSA_ERROR = 10044i32;
pub const WSAESTALE: WSA_ERROR = 10070i32;
pub const WSAETIMEDOUT: WSA_ERROR = 10060i32;
pub const WSAETOOMANYREFS: WSA_ERROR = 10059i32;
pub const WSAEUSERS: WSA_ERROR = 10068i32;
pub const WSAEWOULDBLOCK: WSA_ERROR = 10035i32;
pub const WSAHOST_NOT_FOUND: WSA_ERROR = 11001i32;
pub const WSANOTINITIALISED: WSA_ERROR = 10093i32;
pub const WSANO_DATA: WSA_ERROR = 11004i32;
pub const WSANO_RECOVERY: WSA_ERROR = 11003i32;
#[repr(C)]
#[derive(Clone, Copy)]
pub struct WSAPROTOCOLCHAIN {
    pub ChainLen: i32,
    pub ChainEntries: [u32; 7],
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct WSAPROTOCOL_INFOW {
    pub dwServiceFlags1: u32,
    pub dwServiceFlags2: u32,
    pub dwServiceFlags3: u32,
    pub dwServiceFlags4: u32,
    pub dwProviderFlags: u32,
    pub ProviderId: GUID,
    pub dwCatalogEntryId: u32,
    pub ProtocolChain: WSAPROTOCOLCHAIN,
    pub iVersion: i32,
    pub iAddressFamily: i32,
    pub iMaxSockAddr: i32,
    pub iMinSockAddr: i32,
    pub iSocketType: i32,
    pub iProtocol: i32,
    pub iProtocolMaxOffset: i32,
    pub iNetworkByteOrder: i32,
    pub iSecurityScheme: i32,
    pub dwMessageSize: u32,
    pub dwProviderReserved: u32,
    pub szProtocol: [u16; 256],
}
pub const WSASERVICE_NOT_FOUND: WSA_ERROR = 10108i32;
pub const WSASYSCALLFAILURE: WSA_ERROR = 10107i32;
pub const WSASYSNOTREADY: WSA_ERROR = 10091i32;
pub const WSATRY_AGAIN: WSA_ERROR = 11002i32;
pub const WSATYPE_NOT_FOUND: WSA_ERROR = 10109i32;
pub const WSAVERNOTSUPPORTED: WSA_ERROR = 10092i32;
pub type WSA_ERROR = i32;
pub const WSA_E_CANCELLED: WSA_ERROR = 10111i32;
pub const WSA_E_NO_MORE: WSA_ERROR = 10110i32;
pub const WSA_FLAG_NO_HANDLE_INHERIT: u32 = 128u32;
pub const WSA_FLAG_OVERLAPPED: u32 = 1u32;
pub const WSA_INVALID_HANDLE: WSA_ERROR = 6i32;
pub const WSA_INVALID_PARAMETER: WSA_ERROR = 87i32;
pub const WSA_IO_INCOMPLETE: WSA_ERROR = 996i32;
pub const WSA_IO_PENDING: WSA_ERROR = 997i32;
pub const WSA_IPSEC_NAME_POLICY_ERROR: WSA_ERROR = 11033i32;
pub const WSA_NOT_ENOUGH_MEMORY: WSA_ERROR = 8i32;
pub const WSA_OPERATION_ABORTED: WSA_ERROR = 995i32;
pub const WSA_QOS_ADMISSION_FAILURE: WSA_ERROR = 11010i32;
pub const WSA_QOS_BAD_OBJECT: WSA_ERROR = 11013i32;
pub const WSA_QOS_BAD_STYLE: WSA_ERROR = 11012i32;
pub const WSA_QOS_EFILTERCOUNT: WSA_ERROR = 11021i32;
pub const WSA_QOS_EFILTERSTYLE: WSA_ERROR = 11019i32;
pub const WSA_QOS_EFILTERTYPE: WSA_ERROR = 11020i32;
pub const WSA_QOS_EFLOWCOUNT: WSA_ERROR = 11023i32;
pub const WSA_QOS_EFLOWDESC: WSA_ERROR = 11026i32;
pub const WSA_QOS_EFLOWSPEC: WSA_ERROR = 11017i32;
pub const WSA_QOS_EOBJLENGTH: WSA_ERROR = 11022i32;
pub const WSA_QOS_EPOLICYOBJ: WSA_ERROR = 11025i32;
pub const WSA_QOS_EPROVSPECBUF: WSA_ERROR = 11018i32;
pub const WSA_QOS_EPSFILTERSPEC: WSA_ERROR = 11028i32;
pub const WSA_QOS_EPSFLOWSPEC: WSA_ERROR = 11027i32;
pub const WSA_QOS_ESDMODEOBJ: WSA_ERROR = 11029i32;
pub const WSA_QOS_ESERVICETYPE: WSA_ERROR = 11016i32;
pub const WSA_QOS_ESHAPERATEOBJ: WSA_ERROR = 11030i32;
pub const WSA_QOS_EUNKOWNPSOBJ: WSA_ERROR = 11024i32;
pub const WSA_QOS_GENERIC_ERROR: WSA_ERROR = 11015i32;
pub const WSA_QOS_NO_RECEIVERS: WSA_ERROR = 11008i32;
pub const WSA_QOS_NO_SENDERS: WSA_ERROR = 11007i32;
pub const WSA_QOS_POLICY_FAILURE: WSA_ERROR = 11011i32;
pub const WSA_QOS_RECEIVERS: WSA_ERROR = 11005i32;
pub const WSA_QOS_REQUEST_CONFIRMED: WSA_ERROR = 11009i32;
pub const WSA_QOS_RESERVED_PETYPE: WSA_ERROR = 11031i32;
pub const WSA_QOS_SENDERS: WSA_ERROR = 11006i32;
pub const WSA_QOS_TRAFFIC_CTRL_ERROR: WSA_ERROR = 11014i32;
pub const WSA_SECURE_HOST_NOT_FOUND: WSA_ERROR = 11032i32;
pub const WSA_WAIT_EVENT_0: WSA_ERROR = 0i32;
pub const WSA_WAIT_IO_COMPLETION: WSA_ERROR = 192i32;
#[repr(C)]
#[cfg(any(target_arch = "aarch64", target_arch = "arm64ec", target_arch = "x86_64"))]
#[derive(Clone, Copy)]
pub struct XSAVE_FORMAT {
    pub ControlWord: u16,
    pub StatusWord: u16,
    pub TagWord: u8,
    pub Reserved1: u8,
    pub ErrorOpcode: u16,
    pub ErrorOffset: u32,
    pub ErrorSelector: u16,
    pub Reserved2: u16,
    pub DataOffset: u32,
    pub DataSelector: u16,
    pub Reserved3: u16,
    pub MxCsr: u32,
    pub MxCsr_Mask: u32,
    pub FloatRegisters: [M128A; 8],
    pub XmmRegisters: [M128A; 16],
    pub Reserved4: [u8; 96],
}
#[repr(C)]
#[cfg(target_arch = "x86")]
#[derive(Clone, Copy)]
pub struct XSAVE_FORMAT {
    pub ControlWord: u16,
    pub StatusWord: u16,
    pub TagWord: u8,
    pub Reserved1: u8,
    pub ErrorOpcode: u16,
    pub ErrorOffset: u32,
    pub ErrorSelector: u16,
    pub Reserved2: u16,
    pub DataOffset: u32,
    pub DataSelector: u16,
    pub Reserved3: u16,
    pub MxCsr: u32,
    pub MxCsr_Mask: u32,
    pub FloatRegisters: [M128A; 8],
    pub XmmRegisters: [M128A; 8],
    pub Reserved4: [u8; 224],
}
#[cfg(target_arch = "arm")]
#[repr(C)]
pub struct WSADATA {
    pub wVersion: u16,
    pub wHighVersion: u16,
    pub szDescription: [u8; 257],
    pub szSystemStatus: [u8; 129],
    pub iMaxSockets: u16,
    pub iMaxUdpDg: u16,
    pub lpVendorInfo: PSTR,
}
#[cfg(target_arch = "arm")]
pub enum CONTEXT {}
// ignore-tidy-filelength
