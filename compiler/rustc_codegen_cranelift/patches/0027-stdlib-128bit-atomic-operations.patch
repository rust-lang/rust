From 5d7c709608b01301d4628d2159265936d4440b67 Mon Sep 17 00:00:00 2001
From: bjorn3 <bjorn3@users.noreply.github.com>
Date: Thu, 18 Feb 2021 18:45:28 +0100
Subject: [PATCH] Disable 128bit atomic operations

Cranelift doesn't support them yet
---
 library/core/src/panic/unwind_safe.rs |  6 -----
 library/core/src/sync/atomic.rs       | 38 ---------------------------
 2 files changed, 44 deletions(-)

diff --git a/library/core/src/panic/unwind_safe.rs b/library/core/src/panic/unwind_safe.rs
index a60f0799c0e..af056fbf41f 100644
--- a/library/core/src/panic/unwind_safe.rs
+++ b/library/core/src/panic/unwind_safe.rs
@@ -216,9 +216,6 @@ impl RefUnwindSafe for crate::sync::atomic::AtomicI32 {}
 #[cfg(target_has_atomic_load_store = "64")]
 #[stable(feature = "integer_atomics_stable", since = "1.34.0")]
 impl RefUnwindSafe for crate::sync::atomic::AtomicI64 {}
-#[cfg(target_has_atomic_load_store = "128")]
-#[unstable(feature = "integer_atomics", issue = "99069")]
-impl RefUnwindSafe for crate::sync::atomic::AtomicI128 {}
 
 #[cfg(target_has_atomic_load_store = "ptr")]
 #[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
@@ -235,9 +232,6 @@ impl RefUnwindSafe for crate::sync::atomic::AtomicU32 {}
 #[cfg(target_has_atomic_load_store = "64")]
 #[stable(feature = "integer_atomics_stable", since = "1.34.0")]
 impl RefUnwindSafe for crate::sync::atomic::AtomicU64 {}
-#[cfg(target_has_atomic_load_store = "128")]
-#[unstable(feature = "integer_atomics", issue = "99069")]
-impl RefUnwindSafe for crate::sync::atomic::AtomicU128 {}
 
 #[cfg(target_has_atomic_load_store = "8")]
 #[stable(feature = "unwind_safe_atomic_refs", since = "1.14.0")]
diff --git a/library/core/src/sync/atomic.rs b/library/core/src/sync/atomic.rs
index bf2b6d59f88..d5ccce03bbf 100644
--- a/library/core/src/sync/atomic.rs
+++ b/library/core/src/sync/atomic.rs
@@ -3585,44 +3585,6 @@ pub const fn as_ptr(&self) -> *mut $int_type {
     8,
     u64 AtomicU64
 }
-#[cfg(target_has_atomic_load_store = "128")]
-atomic_int! {
-    cfg(target_has_atomic = "128"),
-    cfg(target_has_atomic_equal_alignment = "128"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    rustc_const_unstable(feature = "integer_atomics", issue = "99069"),
-    rustc_const_unstable(feature = "integer_atomics", issue = "99069"),
-    rustc_diagnostic_item = "AtomicI128",
-    "i128",
-    "#![feature(integer_atomics)]\n\n",
-    atomic_min, atomic_max,
-    16,
-    i128 AtomicI128
-}
-#[cfg(target_has_atomic_load_store = "128")]
-atomic_int! {
-    cfg(target_has_atomic = "128"),
-    cfg(target_has_atomic_equal_alignment = "128"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    unstable(feature = "integer_atomics", issue = "99069"),
-    rustc_const_unstable(feature = "integer_atomics", issue = "99069"),
-    rustc_const_unstable(feature = "integer_atomics", issue = "99069"),
-    rustc_diagnostic_item = "AtomicU128",
-    "u128",
-    "#![feature(integer_atomics)]\n\n",
-    atomic_umin, atomic_umax,
-    16,
-    u128 AtomicU128
-}
 
 #[cfg(target_has_atomic_load_store = "ptr")]
 macro_rules! atomic_int_ptr_sized {
-- 
2.48.1

