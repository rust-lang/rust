name: CI with sysroot compiled in release mode

on:
  - push
  - pull_request

permissions:
  contents: read

env:
  # Enable backtraces for easier debugging
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        commands: [
          "--test-successful-rustc --nb-parts 2 --current-part 0",
          "--test-successful-rustc --nb-parts 2 --current-part 1",
        ]

    steps:
    - uses: actions/checkout@v4

    # `rustup show` installs from rust-toolchain.toml
    - name: Setup rust toolchain
      run: rustup show

    - name: Setup rust cache
      uses: Swatinem/rust-cache@v2

    - name: Install packages
      run: sudo apt-get install ninja-build ripgrep

    - name: Download artifact
      run: curl -LO https://github.com/rust-lang/gcc/releases/latest/download/gcc-15.deb

    - name: Setup path to libgccjit
      run: |
          sudo dpkg --force-overwrite -i gcc-15.deb
          echo 'gcc-path = "/usr/lib/"' > config.toml

    - name: Set env
      run: |
        echo "workspace="$GITHUB_WORKSPACE >> $GITHUB_ENV
        echo "LIBRARY_PATH=/usr/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/lib" >> $GITHUB_ENV

    - name: Build
      run: |
        ./y.sh prepare --only-libcore
        EMBED_LTO_BITCODE=1 ./y.sh build --sysroot --release --release-sysroot
        ./y.sh test --mini-tests
        cargo test
        ./y.sh clean all

    - name: Prepare dependencies
      run: |
        git config --global user.email "user@example.com"
        git config --global user.name "User"
        ./y.sh prepare

    - name: Add more failing tests because of undefined symbol errors (FIXME)
      run: cat tests/failing-lto-tests.txt >> tests/failing-ui-tests.txt

    - name: Run tests
      run: |
        # FIXME(antoyo): we cannot enable LTO for stdarch tests currently because of some failing LTO tests using proc-macros.
        echo -n 'lto = "fat"' >> build_system/build_sysroot/Cargo.toml
        EMBED_LTO_BITCODE=1 ./y.sh test --release --clean --release-sysroot --build-sysroot --keep-lto-tests ${{ matrix.commands }}

    - name: Run y.sh cargo build
      run: |
        EMBED_LTO_BITCODE=1 CHANNEL="release" ./y.sh cargo build --release --manifest-path tests/hello-world/Cargo.toml
        call_found=$(objdump -dj .text tests/hello-world/target/release/hello_world | grep -c "call .*mylib.*my_func" ) ||:
        if [ $call_found -gt 0 ]; then
          echo "ERROR: call my_func found in asm"
          echo "Test is done with LTO enabled, hence inlining should occur across crates"
          exit 1
        fi
