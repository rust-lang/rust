error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:16:5
   |
LL |     let a = [f(); 0];
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `-D clippy::zero-repeat-side-effects` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::zero_repeat_side_effects)]`
help: consider performing the side effect separately
   |
LL -     let a = [f(); 0];
LL +     f(); let a: [i32; 0] = [];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:19:5
   |
LL |     b = [f(); 0];
   |     ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     b = [f(); 0];
LL +     f(); b = [] as [i32; 0];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:24:5
   |
LL |     let c = vec![f(); 0];
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     let c = vec![f(); 0];
LL +     f(); let c: std::vec::Vec<i32> = vec![];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:27:5
   |
LL |     d = vec![f(); 0];
   |     ^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     d = vec![f(); 0];
LL +     f(); d = vec![] as std::vec::Vec<i32>;
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:31:5
   |
LL |     let e = [println!("side effect"); 0];
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     let e = [println!("side effect"); 0];
LL +     println!("side effect"); let e: [(); 0] = [];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:35:5
   |
LL |     let g = [{ f() }; 0];
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     let g = [{ f() }; 0];
LL +     { f() }; let g: [i32; 0] = [];
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:39:10
   |
LL |     drop(vec![f(); 0]);
   |          ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     drop(vec![f(); 0]);
LL +     drop({ f(); vec![] as std::vec::Vec<i32> });
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:43:5
   |
LL |     vec![f(); 0];
   |     ^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     vec![f(); 0];
LL +     { f(); vec![] as std::vec::Vec<i32> };
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:45:5
   |
LL |     [f(); 0];
   |     ^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     [f(); 0];
LL +     { f(); [] as [i32; 0] };
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:99:10
   |
LL |     foo(&[Some(f()); 0]);
   |          ^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     foo(&[Some(f()); 0]);
LL +     foo(&{ Some(f()); [] as [std::option::Option<i32>; 0] });
   |

error: expression with side effects as the initial value in a zero-sized array initializer
  --> tests/ui/zero_repeat_side_effects.rs:101:10
   |
LL |     foo(&[Some(Some(S::new())); 0]);
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider performing the side effect separately
   |
LL -     foo(&[Some(Some(S::new())); 0]);
LL +     foo(&{ Some(Some(S::new())); [] as [std::option::Option<std::option::Option<S>>; 0] });
   |

error: aborting due to 11 previous errors

