#![warn(clippy::match_single_binding)]
#![allow(
    unused,
    clippy::let_unit_value,
    clippy::no_effect,
    clippy::toplevel_ref_arg,
    clippy::uninlined_format_args,
    clippy::useless_vec
)]

struct Point {
    x: i32,
    y: i32,
}

fn coords() -> Point {
    Point { x: 1, y: 2 }
}

macro_rules! foo {
    ($param:expr) => {
        match $param {
            _ => println!("whatever"),
        }
    };
}

fn main() {
    let a = 1;
    let b = 2;
    let c = 3;
    // Lint
    let (x, y, z) = (a, b, c);
    {
        println!("{} {} {}", x, y, z);
    }
    // Lint
    let (x, y, z) = (a, b, c);
    println!("{} {} {}", x, y, z);
    // Ok
    foo!(a);
    // Ok
    match a {
        2 => println!("2"),
        _ => println!("Not 2"),
    }
    // Ok
    let d = Some(5);
    match d {
        Some(d) => println!("{}", d),
        _ => println!("None"),
    }
    // Lint
    println!("whatever");
    // Lint
    {
        let x = 29;
        println!("x has a value of {}", x);
    }
    // Lint
    {
        let e = 5 * a;
        if e >= 5 {
            println!("e is superior to 5");
        }
    }
    // Lint
    let p = Point { x: 0, y: 7 };
    let Point { x, y } = p;
    println!("Coords: ({}, {})", x, y);
    // Lint
    let Point { x: x1, y: y1 } = p;
    println!("Coords: ({}, {})", x1, y1);
    // Lint
    let x = 5;
    let ref r = x;
    println!("Got a reference to {}", r);
    // Lint
    let mut x = 5;
    let ref mut mr = x;
    println!("Got a mutable reference to {}", mr);
    // Lint
    let Point { x, y } = coords();
    let product = x * y;
    // Lint
    let v = vec![Some(1), Some(2), Some(3), Some(4)];
    #[allow(clippy::let_and_return)]
    let _ = v
        .iter()
        .map(|i| {
            let unwrapped = i.unwrap();
            unwrapped
        })
        .collect::<Vec<u8>>();
    // Ok
    let x = 1;
    match x {
        #[cfg(disabled_feature)]
        0 => println!("Disabled branch"),
        _ => println!("Enabled branch"),
    }

    // Ok
    let x = 1;
    let y = 1;
    match match y {
        0 => 1,
        _ => 2,
    } {
        #[cfg(disabled_feature)]
        0 => println!("Array index start"),
        _ => println!("Not an array index start"),
    }

    // Lint
    let x = 1;
    println!("Not an array index start")
}

fn issue_8723() {
    let (mut val, idx) = ("a b", 1);

    let (pre, suf) = val.split_at(idx);
    val = {
        println!("{}", pre);
        suf
    };

    let _ = val;
}

fn side_effects() {}

fn issue_9575() {
    let _ = || {
        side_effects();
        println!("Needs curlies")
    };
}

fn issue_9725(r: Option<u32>) {
    let x = r;
    match x {
        Some(_) => {
            println!("Some");
        },
        None => {
            println!("None");
        },
    };
}

fn issue_10447() -> usize {
    ();

    let a = ();

    side_effects();

    let b = side_effects();

    println!("1");

    let c = println!("1");

    let in_expr = [
        (),
        side_effects(),
        println!("1"),
    ];

    2
}
