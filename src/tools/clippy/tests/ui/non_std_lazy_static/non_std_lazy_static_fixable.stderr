error: this type has been superceded by `LazyLock` in the standard library
  --> tests/ui/non_std_lazy_static/non_std_lazy_static_fixable.rs:11:18
   |
LL | static LAZY_FOO: Lazy<String> = Lazy::new(|| "foo".to_uppercase());
   |                  ^^^^
   |
   = note: `-D clippy::non-std-lazy-statics` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::non_std_lazy_statics)]`
help: use `std::sync::LazyLock` instead
   |
LL - static LAZY_FOO: Lazy<String> = Lazy::new(|| "foo".to_uppercase());
LL + static LAZY_FOO: std::sync::LazyLock<String> = std::sync::LazyLock::new(|| "foo".to_uppercase());
   |

error: this type has been superceded by `LazyLock` in the standard library
  --> tests/ui/non_std_lazy_static/non_std_lazy_static_fixable.rs:13:18
   |
LL | static LAZY_BAR: Lazy<String> = Lazy::new(|| {
   |                  ^^^^
   |
help: use `std::sync::LazyLock` instead
   |
LL - static LAZY_BAR: Lazy<String> = Lazy::new(|| {
LL + static LAZY_BAR: std::sync::LazyLock<String> = std::sync::LazyLock::new(|| {
   |

error: this type has been superceded by `LazyLock` in the standard library
  --> tests/ui/non_std_lazy_static/non_std_lazy_static_fixable.rs:18:18
   |
LL | static LAZY_BAZ: Lazy<String> = { Lazy::new(|| "baz".to_uppercase()) };
   |                  ^^^^
   |
help: use `std::sync::LazyLock` instead
   |
LL - static LAZY_BAZ: Lazy<String> = { Lazy::new(|| "baz".to_uppercase()) };
LL + static LAZY_BAZ: std::sync::LazyLock<String> = { std::sync::LazyLock::new(|| "baz".to_uppercase()) };
   |

error: this type has been superceded by `LazyLock` in the standard library
  --> tests/ui/non_std_lazy_static/non_std_lazy_static_fixable.rs:20:18
   |
LL | static LAZY_QUX: Lazy<String> = {
   |                  ^^^^
   |
help: use `std::sync::LazyLock` instead
   |
LL ~ static LAZY_QUX: std::sync::LazyLock<String> = {
LL |
LL |     if "qux".len() == 3 {
LL ~         std::sync::LazyLock::new(|| "qux".to_uppercase())
LL |     } else if "qux".is_ascii() {
LL ~         std::sync::LazyLock::new(|| "qux".to_lowercase())
LL |     } else {
LL ~         std::sync::LazyLock::new(|| "qux".to_string())
   |

error: this type has been superceded by `LazyLock` in the standard library
  --> tests/ui/non_std_lazy_static/non_std_lazy_static_fixable.rs:41:22
   |
LL |     static LAZY_FOO: Lazy<String> = Lazy::new(|| "foo".to_uppercase());
   |                      ^^^^
   |
help: use `std::sync::LazyLock` instead
   |
LL ~     static LAZY_FOO: std::sync::LazyLock<String> = std::sync::LazyLock::new(|| "foo".to_uppercase());
LL |
...
LL |     fn calling_replaceable_fns() {
LL ~         let _ = std::sync::LazyLock::force(&LAZY_FOO);
   |

error: this type has been superceded by `LazyLock` in the standard library
  --> tests/ui/non_std_lazy_static/non_std_lazy_static_fixable.rs:43:22
   |
LL |     static LAZY_BAR: Lazy<String> = Lazy::new(|| "bar".to_uppercase());
   |                      ^^^^
   |
help: use `std::sync::LazyLock` instead
   |
LL ~     static LAZY_BAR: std::sync::LazyLock<String> = std::sync::LazyLock::new(|| "bar".to_uppercase());
LL |
...
LL |         let _ = Lazy::force(&LAZY_FOO);
LL ~         let _ = std::sync::LazyLock::force(&LAZY_BAR);
   |

error: this type has been superceded by `LazyLock` in the standard library
  --> tests/ui/non_std_lazy_static/non_std_lazy_static_fixable.rs:45:26
   |
LL |     static mut LAZY_BAZ: Lazy<String> = Lazy::new(|| "baz".to_uppercase());
   |                          ^^^^
   |
help: use `std::sync::LazyLock` instead
   |
LL ~     static mut LAZY_BAZ: std::sync::LazyLock<String> = std::sync::LazyLock::new(|| "baz".to_uppercase());
LL |
...
LL |         unsafe {
LL ~             let _ = std::sync::LazyLock::force(&LAZY_BAZ);
   |

error: aborting due to 7 previous errors

