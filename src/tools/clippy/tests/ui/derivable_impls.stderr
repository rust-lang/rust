error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:20:1
   |
LL | / impl std::default::Default for FooDefault<'_> {
LL | |     fn default() -> Self {
LL | |         Self {
LL | |             a: false,
...  |
LL | |     }
LL | | }
   | |_^
   |
   = note: `-D clippy::derivable-impls` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::derivable_impls)]`
help: replace the manual implementation with a derive attribute
   |
LL + #[derive(Default)]
LL ~ struct FooDefault<'a> {
   |

error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:41:1
   |
LL | / impl std::default::Default for TupleDefault {
LL | |     fn default() -> Self {
LL | |         Self(false, 0, 0u64)
LL | |     }
LL | | }
   | |_^
   |
help: replace the manual implementation with a derive attribute
   |
LL + #[derive(Default)]
LL ~ struct TupleDefault(bool, i32, u64);
   |

error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:93:1
   |
LL | / impl Default for StrDefault<'_> {
LL | |     fn default() -> Self {
LL | |         Self("")
LL | |     }
LL | | }
   | |_^
   |
help: replace the manual implementation with a derive attribute
   |
LL + #[derive(Default)]
LL ~ struct StrDefault<'a>(&'a str);
   |

error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:119:1
   |
LL | / impl Default for Y {
LL | |     fn default() -> Self {
LL | |         Self(mac!())
LL | |     }
LL | | }
   | |_^
   |
help: replace the manual implementation with a derive attribute
   |
LL + #[derive(Default)]
LL ~ struct Y(u32);
   |

error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:158:1
   |
LL | / impl Default for WithoutSelfCurly {
LL | |     fn default() -> Self {
LL | |         WithoutSelfCurly { a: false }
LL | |     }
LL | | }
   | |_^
   |
help: replace the manual implementation with a derive attribute
   |
LL + #[derive(Default)]
LL ~ struct WithoutSelfCurly {
   |

error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:166:1
   |
LL | / impl Default for WithoutSelfParan {
LL | |     fn default() -> Self {
LL | |         WithoutSelfParan(false)
LL | |     }
LL | | }
   | |_^
   |
help: replace the manual implementation with a derive attribute
   |
LL + #[derive(Default)]
LL ~ struct WithoutSelfParan(bool);
   |

error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:216:1
   |
LL | / impl Default for RepeatDefault1 {
LL | |     fn default() -> Self {
LL | |         RepeatDefault1 { a: [0; 32] }
LL | |     }
LL | | }
   | |_^
   |
help: replace the manual implementation with a derive attribute
   |
LL + #[derive(Default)]
LL ~ pub struct RepeatDefault1 {
   |

error: this `impl` can be derived
  --> tests/ui/derivable_impls.rs:250:1
   |
LL | / impl Default for SimpleEnum {
LL | |     fn default() -> Self {
LL | |         SimpleEnum::Bar
LL | |     }
LL | | }
   | |_^
   |
help: replace the manual implementation with a derive attribute and mark the default variant
   |
LL + #[derive(Default)]
LL ~ pub enum SimpleEnum {
LL |     Foo,
LL ~     #[default]
LL ~     Bar,
   |

error: aborting due to 8 previous errors

