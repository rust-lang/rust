error: this `match` can be collapsed into the outer `match`
  --> tests/ui/collapsible_match.rs:14:20
   |
LL |           Ok(val) => match val {
   |  ____________________^
LL | |
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:14:12
   |
LL |         Ok(val) => match val {
   |            ^^^ replace this binding
LL |
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern
   = note: `-D clippy::collapsible-match` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::collapsible_match)]`

error: this `match` can be collapsed into the outer `match`
  --> tests/ui/collapsible_match.rs:24:20
   |
LL |           Ok(val) => match val {
   |  ____________________^
LL | |
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:24:12
   |
LL |         Ok(val) => match val {
   |            ^^^ replace this binding
LL |
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `if let`
  --> tests/ui/collapsible_match.rs:34:9
   |
LL | /         if let Some(n) = val {
LL | |
LL | |
LL | |             take(n);
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:33:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
LL |         if let Some(n) = val {
   |                ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `if let`
  --> tests/ui/collapsible_match.rs:43:9
   |
LL | /         if let Some(n) = val {
LL | |
LL | |
LL | |             take(n);
LL | |         } else {
LL | |             return;
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:42:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
LL |         if let Some(n) = val {
   |                ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `if let`
  --> tests/ui/collapsible_match.rs:56:9
   |
LL | /         match val {
LL | |
LL | |             Some(n) => foo(n),
LL | |             _ => (),
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:55:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
...
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `match`
  --> tests/ui/collapsible_match.rs:66:13
   |
LL | /             if let Some(n) = val {
LL | |
LL | |
LL | |                 take(n);
LL | |             }
   | |_____________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:65:12
   |
LL |         Ok(val) => {
   |            ^^^ replace this binding
LL |             if let Some(n) = val {
   |                    ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `if let`
  --> tests/ui/collapsible_match.rs:77:9
   |
LL | /         match val {
LL | |
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:76:15
   |
LL |     if let Ok(val) = res_opt {
   |               ^^^ replace this binding
...
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `match`
  --> tests/ui/collapsible_match.rs:89:13
   |
LL | /             if let Some(n) = val {
LL | |
LL | |
LL | |                 take(n);
LL | |             } else {
LL | |                 return;
LL | |             }
   | |_____________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:88:12
   |
LL |         Ok(val) => {
   |            ^^^ replace this binding
LL |             if let Some(n) = val {
   |                    ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `match`
  --> tests/ui/collapsible_match.rs:102:20
   |
LL |           Ok(val) => match val {
   |  ____________________^
LL | |
LL | |             Some(n) => foo(n),
LL | |             None => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:102:12
   |
LL |         Ok(val) => match val {
   |            ^^^ replace this binding
LL |
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `match`
  --> tests/ui/collapsible_match.rs:112:22
   |
LL |           Some(val) => match val {
   |  ______________________^
LL | |
LL | |             Some(n) => foo(n),
LL | |             _ => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:112:14
   |
LL |         Some(val) => match val {
   |              ^^^ replace this binding
LL |
LL |             Some(n) => foo(n),
   |             ^^^^^^^ with this pattern

error: this `match` can be collapsed into the outer `match`
  --> tests/ui/collapsible_match.rs:256:22
   |
LL |           Some(val) => match val {
   |  ______________________^
LL | |
LL | |             E::A(val) | E::B(val) => foo(val),
LL | |             _ => return,
LL | |         },
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:256:14
   |
LL |         Some(val) => match val {
   |              ^^^ replace this binding
LL |
LL |             E::A(val) | E::B(val) => foo(val),
   |             ^^^^^^^^^^^^^^^^^^^^^ with this pattern

error: this `if let` can be collapsed into the outer `if let`
  --> tests/ui/collapsible_match.rs:288:9
   |
LL | /         if let Some(u) = a {
LL | |
LL | |
LL | |             println!("{u:?}")
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:287:27
   |
LL |     if let Issue9647::A { a, .. } = x {
   |                           ^ replace this binding
LL |         if let Some(u) = a {
   |                ^^^^^^^ with this pattern, prefixed by `a`:

error: this `if let` can be collapsed into the outer `if let`
  --> tests/ui/collapsible_match.rs:298:9
   |
LL | /         if let Some(u) = a {
LL | |
LL | |
LL | |             println!("{u}")
LL | |         }
   | |_________^
   |
help: the outer pattern can be modified to include the inner pattern
  --> tests/ui/collapsible_match.rs:297:35
   |
LL |     if let Issue9647::A { a: Some(a), .. } = x {
   |                                   ^ replace this binding
LL |         if let Some(u) = a {
   |                ^^^^^^^ with this pattern

error: aborting due to 13 previous errors

