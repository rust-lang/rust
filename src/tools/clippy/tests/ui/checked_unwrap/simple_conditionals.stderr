error: called `unwrap` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:47:9
   |
LL |     if x.is_some() {
   |     -------------- help: try: `if let Some(<item>) = x`
LL |         // unnecessary
LL |         x.unwrap();
   |         ^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/checked_unwrap/simple_conditionals.rs:2:35
   |
LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `expect` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:51:9
   |
LL |     if x.is_some() {
   |     -------------- help: try: `if let Some(<item>) = x`
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:55:9
   |
LL |     if x.is_some() {
   |        ----------- because of this check
...
LL |         x.unwrap();
   |         ^^^^^^^^^^
   |
note: the lint level is defined here
  --> tests/ui/checked_unwrap/simple_conditionals.rs:2:9
   |
LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `expect()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:59:9
   |
LL |     if x.is_some() {
   |        ----------- because of this check
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:64:9
   |
LL |     if x.is_none() {
   |        ----------- because of this check
LL |         // will panic
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_none`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:68:9
   |
LL |     if x.is_none() {
   |     -------------- help: try: `if let Some(<item>) = x`
...
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:13:13
   |
LL |         if $a.is_some() {
   |         --------------- help: try: `if let Some(<item>) = x`
LL |             // unnecessary
LL |             $a.unwrap();
   |             ^^^^^^^^^^^
...
LL |     m!(x);
   |     ----- in this macro invocation
   |
   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)

error: called `unwrap` on `x` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:81:9
   |
LL |     if x.is_ok() {
   |     ------------ help: try: `if let Ok(<item>) = x`
LL |         // unnecessary
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `expect` on `x` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:85:9
   |
LL |     if x.is_ok() {
   |     ------------ help: try: `if let Ok(<item>) = x`
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap_err()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:89:9
   |
LL |     if x.is_ok() {
   |        --------- because of this check
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:93:9
   |
LL |     if x.is_ok() {
   |        --------- because of this check
...
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: this call to `expect()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:97:9
   |
LL |     if x.is_ok() {
   |        --------- because of this check
...
LL |         x.expect("an error message");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap_err` on `x` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:101:9
   |
LL |     if x.is_ok() {
   |     ------------ help: try: `if let Err(<item>) = x`
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:106:9
   |
LL |     if x.is_err() {
   |        ---------- because of this check
LL |         // will panic
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: called `unwrap_err` on `x` after checking its variant with `is_err`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:110:9
   |
LL |     if x.is_err() {
   |     ------------- help: try: `if let Err(<item>) = x`
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: called `unwrap` on `x` after checking its variant with `is_err`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:114:9
   |
LL |     if x.is_err() {
   |     ------------- help: try: `if let Ok(<item>) = x`
...
LL |         x.unwrap();
   |         ^^^^^^^^^^

error: this call to `unwrap_err()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:118:9
   |
LL |     if x.is_err() {
   |        ---------- because of this check
...
LL |         x.unwrap_err();
   |         ^^^^^^^^^^^^^^

error: called `unwrap` on `option` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:143:9
   |
LL |     if option.is_some() {
   |     ------------------- help: try: `if let Some(<item>) = &option`
LL |         option.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:146:9
   |
LL |     if option.is_some() {
   |        ---------------- because of this check
...
LL |         option.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `result` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:153:9
   |
LL |     if result.is_ok() {
   |     ----------------- help: try: `if let Ok(<item>) = &result`
LL |         result.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:156:9
   |
LL |     if result.is_ok() {
   |        -------------- because of this check
...
LL |         result.as_ref().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `option` after checking its variant with `is_some`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:162:9
   |
LL |     if option.is_some() {
   |     ------------------- help: try: `if let Some(<item>) = &mut option`
LL |         option.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:165:9
   |
LL |     if option.is_some() {
   |        ---------------- because of this check
...
LL |         option.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: called `unwrap` on `result` after checking its variant with `is_ok`
  --> tests/ui/checked_unwrap/simple_conditionals.rs:171:9
   |
LL |     if result.is_ok() {
   |     ----------------- help: try: `if let Ok(<item>) = &mut result`
LL |         result.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: this call to `unwrap()` will always panic
  --> tests/ui/checked_unwrap/simple_conditionals.rs:174:9
   |
LL |     if result.is_ok() {
   |        -------------- because of this check
...
LL |         result.as_mut().unwrap();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

error: creating a shared reference to mutable static is discouraged
  --> tests/ui/checked_unwrap/simple_conditionals.rs:183:12
   |
LL |         if X.is_some() {
   |            ^^^^^^^^^^^ shared reference to mutable static
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
   = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
   = note: `-D static-mut-refs` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(static_mut_refs)]`

error: aborting due to 26 previous errors

