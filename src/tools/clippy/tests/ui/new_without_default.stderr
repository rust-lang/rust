error: you should consider adding a `Default` implementation for `Foo`
  --> tests/ui/new_without_default.rs:12:5
   |
LL | /     pub fn new() -> Foo {
LL | |
LL | |
LL | |         Foo
LL | |     }
   | |_____^
   |
   = note: `-D clippy::new-without-default` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::new_without_default)]`
help: try adding this
   |
LL + impl Default for Foo {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `Bar`
  --> tests/ui/new_without_default.rs:22:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |
LL | |         Bar
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + impl Default for Bar {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `LtKo<'c>`
  --> tests/ui/new_without_default.rs:88:5
   |
LL | /     pub fn new() -> LtKo<'c> {
LL | |
LL | |
LL | |         unimplemented!()
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + impl<'c> Default for LtKo<'c> {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `Const`
  --> tests/ui/new_without_default.rs:122:5
   |
LL | /     pub const fn new() -> Const {
LL | |
LL | |         Const
LL | |     } // While Default is not const, it can still call const functions, so we should lint this
   | |_____^
   |
help: try adding this
   |
LL + impl Default for Const {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `NewNotEqualToDerive`
  --> tests/ui/new_without_default.rs:183:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |
LL | |         NewNotEqualToDerive { foo: 1 }
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + impl Default for NewNotEqualToDerive {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `FooGenerics<T>`
  --> tests/ui/new_without_default.rs:193:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |
LL | |         Self(Default::default())
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + impl<T> Default for FooGenerics<T> {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `BarGenerics<T>`
  --> tests/ui/new_without_default.rs:202:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |
LL | |         Self(Default::default())
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + impl<T: Copy> Default for BarGenerics<T> {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `Foo<T>`
  --> tests/ui/new_without_default.rs:215:9
   |
LL | /         pub fn new() -> Self {
LL | |
LL | |
LL | |             todo!()
LL | |         }
   | |_________^
   |
help: try adding this
   |
LL ~     impl<T> Default for Foo<T> {
LL +         fn default() -> Self {
LL +             Self::new()
LL +         }
LL +     }
LL + 
LL ~     impl<T> Foo<T> {
   |

error: you should consider adding a `Default` implementation for `MyStruct<K, V>`
  --> tests/ui/new_without_default.rs:262:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |         Self { _kv: None }
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + impl<K, V> Default for MyStruct<K, V>
LL + where
LL +     K: std::hash::Hash + Eq + PartialEq,
LL +  {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `NewWithCfg`
  --> tests/ui/new_without_default.rs:273:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |         unimplemented!()
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + #[cfg(not(test))]
LL + impl Default for NewWithCfg {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
LL | impl NewWithCfg {
   |

error: you should consider adding a `Default` implementation for `NewWith2Cfgs`
  --> tests/ui/new_without_default.rs:283:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |         unimplemented!()
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + #[cfg(not(test))]
LL + #[cfg(panic = "unwind")]
LL + impl Default for NewWith2Cfgs {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
LL | impl NewWith2Cfgs {
   |

error: you should consider adding a `Default` implementation for `NewWithExtraneous`
  --> tests/ui/new_without_default.rs:292:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |         unimplemented!()
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + impl Default for NewWithExtraneous {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
   |

error: you should consider adding a `Default` implementation for `NewWithCfgAndExtraneous`
  --> tests/ui/new_without_default.rs:302:5
   |
LL | /     pub fn new() -> Self {
LL | |
LL | |         unimplemented!()
LL | |     }
   | |_____^
   |
help: try adding this
   |
LL + #[cfg(not(test))]
LL + impl Default for NewWithCfgAndExtraneous {
LL +     fn default() -> Self {
LL +         Self::new()
LL +     }
LL + }
LL | impl NewWithCfgAndExtraneous {
   |

error: aborting due to 13 previous errors

