if let StmtKind::Let(local) = stmt.kind
    && let Some(init) = local.init
    && let ExprKind::Closure { capture_clause: CaptureBy::Ref, fn_decl: fn_decl, body: body_id, closure_kind: ClosureKind::Closure, .. } = init.kind
    && let FnRetTy::DefaultReturn(_) = fn_decl.output
    && expr = &cx.tcx.hir_body(body_id).value
    && let ExprKind::Block(block, None) = expr.kind
    && block.stmts.len() == 1
    && let StmtKind::Semi(e) = block.stmts[0].kind
    && let ExprKind::Call(func, args) = e.kind
    && paths::STD_IO_STDIO__PRINT.matches_path(cx, func) // Add the path to `clippy_utils::paths` if needed
    && args.len() == 1
    && let ExprKind::Call(func1, args1) = args[0].kind
    && paths::CORE_FMT_RT_NEW_V1.matches_path(cx, func1) // Add the path to `clippy_utils::paths` if needed
    && args1.len() == 2
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) = args1[0].kind
    && let ExprKind::Array(elements) = inner.kind
    && elements.len() == 2
    && let ExprKind::Lit(ref lit) = elements[0].kind
    && let LitKind::Str(s, _) = lit.node
    && s.as_str() == ""
    && let ExprKind::Lit(ref lit1) = elements[1].kind
    && let LitKind::Str(s1, _) = lit1.node
    && s1.as_str() == "\n"
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner1) = args1[1].kind
    && let ExprKind::Array(elements1) = inner1.kind
    && elements1.len() == 1
    && let ExprKind::Call(func2, args2) = elements1[0].kind
    && paths::CORE_FMT_RT_ARGUMENT_NEW_DISPLAY.matches_path(cx, func2) // Add the path to `clippy_utils::paths` if needed
    && args2.len() == 1
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner2) = args2[0].kind
    && block.expr.is_none()
    && let PatKind::Binding(BindingMode::NONE, _, name, None) = local.pat.kind
    && name.as_str() == "print_text"
{
    // report your lint here
}
