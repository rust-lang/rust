if let StmtKind::Let(local) = stmt.kind
    && let Some(init) = local.init
    && let ExprKind::Closure { capture_clause: CaptureBy::Ref, fn_decl: fn_decl, body: body_id, closure_kind: ClosureKind::Closure, .. } = init.kind
    && let FnRetTy::DefaultReturn(_) = fn_decl.output
    && expr = &cx.tcx.hir_body(body_id).value
    && let ExprKind::Block(block, None) = expr.kind
    && block.stmts.len() == 1
    && let StmtKind::Semi(e) = block.stmts[0].kind
    && let ExprKind::Call(func, args) = e.kind
    && let ExprKind::Path(ref qpath) = func.kind
    && match_qpath(qpath, &["$crate", "io", "_print"])
    && args.len() == 1
    && let ExprKind::Call(func1, args1) = args[0].kind
    && let ExprKind::Path(ref qpath1) = func1.kind
    && match_qpath(qpath1, &["format_arguments", "new"])
    && args1.len() == 2
    && let ExprKind::Block(block1, None) = args1[0].kind
    && block1.stmts.is_empty()
    && let Some(trailing_expr) = block1.expr
    && let ExprKind::Call(func2, args2) = trailing_expr.kind
    && let ExprKind::Path(ref qpath2) = func2.kind
    && match_qpath(qpath2, &["format_template", "new"])
    && args2.len() == 1
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) = args2[0].kind
    && let ExprKind::Array(elements) = inner.kind
    && elements.len() == 4
    && let ExprKind::Call(func3, args3) = elements[0].kind
    && let ExprKind::Path(ref qpath3) = func3.kind
    && match_qpath(qpath3, &["format_piece", "num"])
    && args3.len() == 1
    && let ExprKind::Lit(ref lit) = args3[0].kind
    && let LitKind::Int(16140901201934811136, LitIntType::Unsigned(UintTy::Usize)) = lit.node
    && let ExprKind::Call(func4, args4) = elements[1].kind
    && let ExprKind::Path(ref qpath4) = func4.kind
    && match_qpath(qpath4, &["format_piece", "num"])
    && args4.len() == 1
    && let ExprKind::Lit(ref lit1) = args4[0].kind
    && let LitKind::Int(1, LitIntType::Unsigned(UintTy::Usize)) = lit1.node
    && let ExprKind::Call(func5, args5) = elements[2].kind
    && let ExprKind::Path(ref qpath5) = func5.kind
    && match_qpath(qpath5, &["format_piece", "str"])
    && args5.len() == 1
    && let ExprKind::Lit(ref lit2) = args5[0].kind
    && let LitKind::Str(s, _) = lit2.node
    && s.as_str() == "\n"
    && let ExprKind::Call(func6, args6) = elements[3].kind
    && let ExprKind::Path(ref qpath6) = func6.kind
    && match_qpath(qpath6, &["format_piece", "num"])
    && args6.len() == 1
    && let ExprKind::Lit(ref lit3) = args6[0].kind
    && let LitKind::Int(0, LitIntType::Unsigned(UintTy::Usize)) = lit3.node
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner1) = args1[1].kind
    && let ExprKind::Array(elements1) = inner1.kind
    && elements1.len() == 1
    && let ExprKind::Call(func7, args7) = elements1[0].kind
    && let ExprKind::Path(ref qpath7) = func7.kind
    && match_qpath(qpath7, &["format_argument", "new_display"])
    && args7.len() == 1
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner2) = args7[0].kind
    && let ExprKind::Path(ref qpath8) = inner2.kind
    && match_qpath(qpath8, &["x"])
    && block.expr.is_none()
    && let PatKind::Binding(BindingMode::NONE, _, name, None) = local.pat.kind
    && name.as_str() == "print_text"
{
    // report your lint here
}
