if let StmtKind::Let(local) = stmt.kind
    && let Some(init) = local.init
    && let ExprKind::Closure { capture_clause: CaptureBy::Ref, fn_decl: fn_decl, body: body_id, closure_kind: ClosureKind::Closure, .. } = init.kind
    && let FnRetTy::DefaultReturn(_) = fn_decl.output
    && expr = &cx.tcx.hir_body(body_id).value
    && let ExprKind::Block(block, None) = expr.kind
    && block.stmts.len() == 1
    && let StmtKind::Semi(e) = block.stmts[0].kind
    && let ExprKind::Call(func, args) = e.kind
    && let ExprKind::Path(ref qpath) = func.kind
    && match_qpath(qpath, &["$crate", "io", "_print"])
    && args.len() == 1
    && let ExprKind::Block(block1, None) = args[0].kind
    && block1.stmts.len() == 2
    && let StmtKind::Let(local1) = block1.stmts[0].kind
    && let Some(init1) = local1.init
    && let ExprKind::Tup(elements) = init1.kind
    && elements.len() == 1
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner) = elements[0].kind
    && let ExprKind::Path(ref qpath1) = inner.kind
    && match_qpath(qpath1, &["x"])
    && let PatKind::Binding(BindingMode::NONE, _, name, None) = local1.pat.kind
    && name.as_str() == "args"
    && let StmtKind::Let(local2) = block1.stmts[1].kind
    && let Some(init2) = local2.init
    && let ExprKind::Array(elements1) = init2.kind
    && elements1.len() == 1
    && let ExprKind::Call(func1, args1) = elements1[0].kind
    && let ExprKind::Path(ref qpath2) = func1.kind
    && match_qpath(qpath2, &["format_argument", "new_display"])
    && args1.len() == 1
    && let ExprKind::Field(object, field_name) = args1[0].kind
    && field_name.as_str() == "0"
    && let ExprKind::Path(ref qpath3) = object.kind
    && match_qpath(qpath3, &["args"])
    && let PatKind::Binding(BindingMode::NONE, _, name1, None) = local2.pat.kind
    && name1.as_str() == "args"
    && let Some(trailing_expr) = block1.expr
    && let ExprKind::Call(func2, args2) = trailing_expr.kind
    && let ExprKind::Path(ref qpath4) = func2.kind
    && match_qpath(qpath4, &["format_arguments", "new_v1"])
    && args2.len() == 2
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner1) = args2[0].kind
    && let ExprKind::Array(elements2) = inner1.kind
    && elements2.len() == 2
    && let ExprKind::Lit(ref lit) = elements2[0].kind
    && let LitKind::Str(s, _) = lit.node
    && s.as_str() == ""
    && let ExprKind::Lit(ref lit1) = elements2[1].kind
    && let LitKind::Str(s1, _) = lit1.node
    && s1.as_str() == "\n"
    && let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, inner2) = args2[1].kind
    && let ExprKind::Path(ref qpath5) = inner2.kind
    && match_qpath(qpath5, &["args"])
    && block.expr.is_none()
    && let PatKind::Binding(BindingMode::NONE, _, name2, None) = local.pat.kind
    && name2.as_str() == "print_text"
{
    // report your lint here
}
