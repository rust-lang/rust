error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:7:5
   |
LL | /     if a.is_none() {
LL | |
LL | |         return None;
LL | |     }
   | |_____^ help: replace it with: `a?;`
   |
   = note: `-D clippy::question-mark` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::question_mark)]`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:53:9
   |
LL | /         if (self.opt).is_none() {
LL | |
LL | |             return None;
LL | |         }
   | |_________^ help: replace it with: `(self.opt)?;`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:58:9
   |
LL | /         if self.opt.is_none() {
LL | |
LL | |             return None
LL | |         }
   | |_________^ help: replace it with: `self.opt?;`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:63:17
   |
LL |           let _ = if self.opt.is_none() {
   |  _________________^
LL | |
LL | |             return None;
LL | |         } else {
LL | |             self.opt
LL | |         };
   | |_________^ help: replace it with: `Some(self.opt?)`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:70:17
   |
LL |           let _ = if let Some(x) = self.opt {
   |  _________________^
LL | |
LL | |             x
LL | |         } else {
LL | |             return None;
LL | |         };
   | |_________^ help: replace it with: `self.opt?`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:88:9
   |
LL | /         if self.opt.is_none() {
LL | |
LL | |             return None;
LL | |         }
   | |_________^ help: replace it with: `self.opt.as_ref()?;`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:97:9
   |
LL | /         if self.opt.is_none() {
LL | |
LL | |             return None;
LL | |         }
   | |_________^ help: replace it with: `self.opt.as_ref()?;`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:106:9
   |
LL | /         if self.opt.is_none() {
LL | |
LL | |             return None;
LL | |         }
   | |_________^ help: replace it with: `self.opt.as_ref()?;`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:114:26
   |
LL |           let v: &Vec<_> = if let Some(ref v) = self.opt {
   |  __________________________^
LL | |
LL | |             v
LL | |         } else {
LL | |             return None;
LL | |         };
   | |_________^ help: replace it with: `self.opt.as_ref()?`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:125:17
   |
LL |           let v = if let Some(v) = self.opt {
   |  _________________^
LL | |
LL | |             v
LL | |         } else {
LL | |             return None;
LL | |         };
   | |_________^ help: replace it with: `self.opt?`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:147:5
   |
LL | /     if f().is_none() {
LL | |
LL | |         return None;
LL | |     }
   | |_____^ help: replace it with: `f()?;`

error: this `match` expression can be replaced with `?`
  --> tests/ui/question_mark.rs:152:16
   |
LL |       let _val = match f() {
   |  ________________^
LL | |
LL | |         Some(val) => val,
LL | |         None => return None,
LL | |     };
   | |_____^ help: try instead: `f()?`

error: this `match` expression can be replaced with `?`
  --> tests/ui/question_mark.rs:163:5
   |
LL | /     match f() {
LL | |
LL | |         Some(val) => val,
LL | |         None => return None,
LL | |     };
   | |_____^ help: try instead: `f()?`

error: this `match` expression can be replaced with `?`
  --> tests/ui/question_mark.rs:169:5
   |
LL | /     match opt_none!() {
LL | |
LL | |         Some(x) => x,
LL | |         None => return None,
LL | |     };
   | |_____^ help: try instead: `opt_none!()?`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:196:13
   |
LL |     let _ = if let Ok(x) = x { x } else { return x };
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x?`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:199:5
   |
LL | /     if x.is_err() {
LL | |
LL | |         return x;
LL | |     }
   | |_____^ help: replace it with: `x?;`

error: this `match` expression can be replaced with `?`
  --> tests/ui/question_mark.rs:204:16
   |
LL |       let _val = match func_returning_result() {
   |  ________________^
LL | |
LL | |         Ok(val) => val,
LL | |         Err(err) => return Err(err),
LL | |     };
   | |_____^ help: try instead: `func_returning_result()?`

error: this `match` expression can be replaced with `?`
  --> tests/ui/question_mark.rs:210:5
   |
LL | /     match func_returning_result() {
LL | |
LL | |         Ok(val) => val,
LL | |         Err(err) => return Err(err),
LL | |     };
   | |_____^ help: try instead: `func_returning_result()?`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:302:5
   |
LL | /     if let Err(err) = func_returning_result() {
LL | |
LL | |         return Err(err);
LL | |     }
   | |_____^ help: replace it with: `func_returning_result()?;`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:310:5
   |
LL | /     if let Err(err) = func_returning_result() {
LL | |
LL | |         return Err(err);
LL | |     }
   | |_____^ help: replace it with: `func_returning_result()?;`

error: this block may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:388:13
   |
LL | /             if a.is_none() {
LL | |
LL | |                 return None;
...  |
LL | |             }
   | |_____________^ help: replace it with: `a?;`

error: this `let...else` may be rewritten with the `?` operator
  --> tests/ui/question_mark.rs:449:5
   |
LL | /     let Some(v) = bar.foo.owned.clone() else {
LL | |         return None;
LL | |     };
   | |______^ help: replace it with: `let v = bar.foo.owned.clone()?;`

error: aborting due to 22 previous errors

