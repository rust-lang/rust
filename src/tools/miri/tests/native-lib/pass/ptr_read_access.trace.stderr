warning: sharing memory with a native function called via FFI
  --> tests/native-lib/pass/ptr_read_access.rs:LL:CC
   |
LL |     unsafe { print_pointer(&x) };
   |              ^^^^^^^^^^^^^^^^^ sharing memory with a native function
   |
   = help: when memory is shared with a native function call, Miri can only track initialisation and provenance on a best-effort basis
   = help: in particular, Miri assumes that the native call initializes all memory it has written to
   = help: Miri also assumes that any part of this memory may be a pointer that is permitted to point to arbitrary exposed memory
   = help: what this means is that Miri will easily miss Undefined Behavior related to incorrect usage of this shared memory, so you should not take a clean Miri run as a signal that your FFI code is UB-free
   = help: tracing memory accesses in native code is not yet fully implemented, so there can be further imprecisions beyond what is documented here
   = note: BACKTRACE:
   = note: inside `test_access_pointer` at tests/native-lib/pass/ptr_read_access.rs:LL:CC
note: inside `main`
  --> tests/native-lib/pass/ptr_read_access.rs:LL:CC
   |
LL |     test_access_pointer();
   |     ^^^^^^^^^^^^^^^^^^^^^

