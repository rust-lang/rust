error: Undefined Behavior: reborrow through <TAG> at ALLOC[0x4] is forbidden
  --> tests/fail/both_borrows/return_invalid_shr_option.rs:LL:CC
   |
LL |     ret
   |     ^^^ reborrow through <TAG> at ALLOC[0x4] is forbidden
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental
   = help: the accessed tag <TAG> has state Disabled which forbids this reborrow (acting as a child read access)
help: the accessed tag <TAG> was created here, in the initial state Frozen
  --> tests/fail/both_borrows/return_invalid_shr_option.rs:LL:CC
   |
LL |     let ret = Some(unsafe { &(*xraw).1 });
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: the accessed tag <TAG> later transitioned to Disabled due to a foreign write access at offsets [0x0..0x8]
  --> tests/fail/both_borrows/return_invalid_shr_option.rs:LL:CC
   |
LL |     unsafe { *xraw = (42, 23) }; // unfreeze
   |              ^^^^^^^^^^^^^^^^
   = help: this transition corresponds to a loss of read permissions
   = note: BACKTRACE (of the first span):
   = note: inside `foo` at tests/fail/both_borrows/return_invalid_shr_option.rs:LL:CC
note: inside `main`
  --> tests/fail/both_borrows/return_invalid_shr_option.rs:LL:CC
   |
LL |     match foo(&mut (1, 2)) {
   |           ^^^^^^^^^^^^^^^^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

