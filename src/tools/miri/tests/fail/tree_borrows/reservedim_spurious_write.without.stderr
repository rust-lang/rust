Thread 1 executing: start
Thread 2 executing: start
Thread 2 executing: retag x (&mut, protect)
Thread 1 executing: retag x (&mut, protect)
Thread 1 executing: [lazy] retag y (&mut, protect, IM)
Thread 2 executing: [lazy] retag y (&mut, protect, IM)
Thread 2 executing: spurious write x
Thread 1 executing: spurious write x (skipped)
Thread 1 executing: ret y
Thread 2 executing: ret y
Thread 2 executing: ret x
Thread 1 executing: ret x
Thread 1 executing: write y
Thread 2 executing: write y
error: Undefined Behavior: write access through <TAG> at ALLOC[0x0] is forbidden
  --> tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   |
LL |         unsafe { *y = 13 }
   |                  ^^^^^^^ write access through <TAG> at ALLOC[0x0] is forbidden
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental
   = help: the accessed tag <TAG> has state Disabled which forbids this child write access
help: the accessed tag <TAG> was created here, in the initial state Reserved
  --> tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   |
LL |         fn inner(y: &mut Cell<()>, b: IdxBarrier) -> *mut u8 {
   |                  ^
help: the accessed tag <TAG> later transitioned to Disabled due to a protector release (acting as a foreign write access) on every location previously accessed by this tag
  --> tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC
   |
LL |         }
   |          ^
   = help: this transition corresponds to a loss of read and write permissions
   = note: BACKTRACE (of the first span) on thread `unnamed-ID`:
   = note: inside closure at tests/fail/tree_borrows/reservedim_spurious_write.rs:LL:CC

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

