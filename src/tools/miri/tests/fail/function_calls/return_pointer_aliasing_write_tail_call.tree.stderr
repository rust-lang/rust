error: Undefined Behavior: write access through <TAG> (root of the allocation) at ALLOC[0x0] is forbidden
  --> tests/fail/function_calls/return_pointer_aliasing_write_tail_call.rs:LL:CC
   |
LL |     unsafe { ptr.write(0) };
   |              ^^^^^^^^^^^^ write access through <TAG> (root of the allocation) at ALLOC[0x0] is forbidden
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Tree Borrows rules it violated are still experimental
   = help: the accessed tag <TAG> (root of the allocation) is foreign to the protected tag <TAG> (i.e., it is not a child)
   = help: this foreign write access would cause the protected tag <TAG> (currently Active) to become Disabled
   = help: protected tags must never be Disabled
help: the accessed tag <TAG> was created here
  --> tests/fail/function_calls/return_pointer_aliasing_write_tail_call.rs:LL:CC
   |
LL | /     mir! {
LL | |         {
LL | |             let _x = 0;
LL | |             let ptr = &raw mut _x;
...  |
LL | |         }
LL | |     }
   | |_____^
help: the protected tag <TAG> was created here, in the initial state Reserved
  --> tests/fail/function_calls/return_pointer_aliasing_write_tail_call.rs:LL:CC
   |
LL |     unsafe { ptr.write(0) };
   |     ^^^^^^^^^^^^^^^^^^^^^^^
help: the protected tag <TAG> later transitioned to Active due to a child write access at offsets [0x0..0x4]
  --> tests/fail/function_calls/return_pointer_aliasing_write_tail_call.rs:LL:CC
   |
LL |     unsafe { ptr.write(0) };
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   = help: this transition corresponds to the first write to a 2-phase borrowed mutable reference
   = note: BACKTRACE (of the first span):
   = note: inside `myfun2` at tests/fail/function_calls/return_pointer_aliasing_write_tail_call.rs:LL:CC
note: inside `main`
  --> tests/fail/function_calls/return_pointer_aliasing_write_tail_call.rs:LL:CC
   |
LL |             Call(*ptr = myfun(ptr), ReturnTo(after_call), UnwindContinue())
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: this error originates in the macro `::core::intrinsics::mir::__internal_remove_let` which comes from the expansion of the macro `mir` (in Nightly builds, run with -Z macro-backtrace for more info)

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to 1 previous error

